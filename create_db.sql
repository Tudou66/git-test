/*
 Navicat Premium Data Transfer

 Source Server         : gy_cz_production
 Source Server Type    : MySQL
 Source Server Version : 50616
 Source Host           : rm-m5ebe1fss94n7478io.mysql.rds.aliyuncs.com:3306
 Source Schema         : gy_cz_production

 Target Server Type    : MySQL
 Target Server Version : 50616
 File Encoding         : 65001

 Date: 02/09/2020 09:38:48
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for alarm_solution
-- ----------------------------
DROP TABLE IF EXISTS `alarm_solution`;
CREATE TABLE `alarm_solution`  (
  `alarmTypeId` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '报警类型Id',
  `solution` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '解决方案',
  `companyDeptId` int(11) NOT NULL COMMENT '公司Id',
  `alarmNameId` int(8) NOT NULL COMMENT '报警表名称Id',
  PRIMARY KEY (`alarmTypeId`, `companyDeptId`, `alarmNameId`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_alarm_test
-- ----------------------------
DROP TABLE IF EXISTS `api_alarm_test`;
CREATE TABLE `api_alarm_test`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1896526939 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_alarm_test_copy
-- ----------------------------
DROP TABLE IF EXISTS `api_alarm_test_copy`;
CREATE TABLE `api_alarm_test_copy`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns`;
CREATE TABLE `api_breakdowns`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `alarmtypename`(`alarmtypename`) USING BTREE,
  INDEX `deptId`(`deptId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10444157 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆故障排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns_day
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns_day`;
CREATE TABLE `api_breakdowns_day`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `idx_stat_date`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 78969616 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns_hour
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns_hour`;
CREATE TABLE `api_breakdowns_hour`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` timestamp(0) NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `alarmtypename`(`alarmtypename`) USING BTREE,
  INDEX `idx_deptid`(`deptId`) USING BTREE,
  INDEX `stat_date`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 73504171 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆故障排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns_hour_copy
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns_hour_copy`;
CREATE TABLE `api_breakdowns_hour_copy`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` timestamp(0) NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 122447 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆故障排行(zzf)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns_hour_new
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns_hour_new`;
CREATE TABLE `api_breakdowns_hour_new`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `alarmtypename`(`alarmtypename`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1422733 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆故障排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_breakdowns_month
-- ----------------------------
DROP TABLE IF EXISTS `api_breakdowns_month`;
CREATE TABLE `api_breakdowns_month`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `alarmtypename` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '故障类型名称',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '故障等级',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `alarmtypename`(`alarmtypename`) USING BTREE,
  INDEX `idx_state_deptId`(`deptId`, `stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29960855 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆故障排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_energe
-- ----------------------------
DROP TABLE IF EXISTS `api_energe`;
CREATE TABLE `api_energe`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `oil` int(11) NULL DEFAULT NULL COMMENT '油耗',
  `gas` int(11) NULL DEFAULT NULL COMMENT '气耗',
  `ele` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `miles` int(11) NULL DEFAULT NULL COMMENT '单日里程',
  `motorType` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mileage` bigint(20) NULL DEFAULT NULL,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `idx_state`(`stat_date`) USING BTREE,
  INDEX `vehicleNo_deptId`(`deptId`, `vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1604598 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_energe_fault_data
-- ----------------------------
DROP TABLE IF EXISTS `api_energe_fault_data`;
CREATE TABLE `api_energe_fault_data`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `oil` int(11) NULL DEFAULT NULL COMMENT '油耗',
  `gas` int(11) NULL DEFAULT NULL COMMENT '气耗',
  `ele` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `miles` int(11) NULL DEFAULT NULL COMMENT '单日里程',
  `motorType` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mileage` bigint(20) NULL DEFAULT NULL,
  INDEX `idx_sdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 146137 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_energe_fault_data_test
-- ----------------------------
DROP TABLE IF EXISTS `api_energe_fault_data_test`;
CREATE TABLE `api_energe_fault_data_test`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `oil` int(11) NULL DEFAULT NULL COMMENT '油耗',
  `gas` int(11) NULL DEFAULT NULL COMMENT '气耗',
  `ele` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `miles` int(11) NULL DEFAULT NULL COMMENT '单日里程',
  `motorType` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mileage` bigint(20) NULL DEFAULT NULL,
  INDEX `idx_sdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 515 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_energe_test
-- ----------------------------
DROP TABLE IF EXISTS `api_energe_test`;
CREATE TABLE `api_energe_test`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `oil` int(11) NULL DEFAULT NULL COMMENT '油耗',
  `gas` int(11) NULL DEFAULT NULL COMMENT '气耗',
  `ele` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `miles` int(11) NULL DEFAULT NULL COMMENT '单日里程',
  `motorType` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `mileage` bigint(20) NULL DEFAULT NULL,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE,
  INDEX `idx_state`(`stat_date`) USING BTREE,
  INDEX `vehicleNo_deptId`(`deptId`, `vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2048 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_site_violation_day
-- ----------------------------
DROP TABLE IF EXISTS `api_site_violation_day`;
CREATE TABLE `api_site_violation_day`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规行为名称',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `score` int(11) NULL DEFAULT NULL COMMENT '扣分',
  `begin_site` int(11) NULL DEFAULT NULL COMMENT '起始站点id',
  `end_site` int(11) NULL DEFAULT NULL COMMENT '终止站点',
  INDEX `idx_sdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 390047 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：驾驶违规行为排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_site_violation_hour
-- ----------------------------
DROP TABLE IF EXISTS `api_site_violation_hour`;
CREATE TABLE `api_site_violation_hour`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` timestamp(0) NULL DEFAULT NULL COMMENT '统计日期',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规行为名称',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `score` int(11) NULL DEFAULT NULL COMMENT '扣分',
  `begin_site` int(11) NULL DEFAULT NULL COMMENT '起始站点id',
  `end_site` int(11) NULL DEFAULT NULL COMMENT '终止站点',
  INDEX `idx_sdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 430738 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：驾驶违规行为排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_site_violation_month
-- ----------------------------
DROP TABLE IF EXISTS `api_site_violation_month`;
CREATE TABLE `api_site_violation_month`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规行为名称',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `score` int(11) NULL DEFAULT NULL COMMENT '扣分',
  `begin_site` int(11) NULL DEFAULT NULL COMMENT '起始站点id',
  `end_site` int(11) NULL DEFAULT NULL COMMENT '终止站点',
  INDEX `idx_sdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 872263 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：驾驶违规行为排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_soc
-- ----------------------------
DROP TABLE IF EXISTS `api_soc`;
CREATE TABLE `api_soc`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `soc` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `cursingdistance` int(11) NULL DEFAULT NULL COMMENT '续航里程',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 252905 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_soc_month
-- ----------------------------
DROP TABLE IF EXISTS `api_soc_month`;
CREATE TABLE `api_soc_month`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `soc` int(11) NULL DEFAULT NULL COMMENT '电耗',
  `status` enum('0','1') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '是否衰减严重，1衰减严重，0则不是',
  `cursingdistance` int(11) NULL DEFAULT NULL COMMENT '续航里程',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `vehicleNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3715714 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：车辆能耗排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for api_violation
-- ----------------------------
DROP TABLE IF EXISTS `api_violation`;
CREATE TABLE `api_violation`  (
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构Id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规行为名称',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `total` int(11) NULL DEFAULT NULL COMMENT '总次数',
  `score` int(11) NULL DEFAULT NULL COMMENT '扣分',
  INDEX `idx_sdate`(`stat_date`) USING BTREE,
  INDEX `idx_state_actiontype`(`stat_date`, `actiontypeDesc`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 976963 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'api统计：驾驶违规行为排行' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for base_logtable
-- ----------------------------
DROP TABLE IF EXISTS `base_logtable`;
CREATE TABLE `base_logtable`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `sysid` int(11) NULL DEFAULT NULL,
  `funcid` int(11) NOT NULL,
  `description` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `type` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `mac` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `ip` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `policenum` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `userid` int(11) NULL DEFAULT NULL,
  `upareaid` int(11) NULL DEFAULT NULL,
  `createtime` int(11) NOT NULL,
  `keyword` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `ext1` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `ext2` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `priparams` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `ind_funcid_logtable`(`funcid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1885530 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_execution
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_execution`;
CREATE TABLE `batch_job_execution`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NULL DEFAULT NULL,
  `JOB_INSTANCE_ID` bigint(20) NOT NULL,
  `CREATE_TIME` datetime(0) NOT NULL,
  `START_TIME` datetime(0) NULL DEFAULT NULL,
  `END_TIME` datetime(0) NULL DEFAULT NULL,
  `STATUS` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_CODE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_MESSAGE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `LAST_UPDATED` datetime(0) NULL DEFAULT NULL,
  `JOB_CONFIGURATION_LOCATION` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`JOB_EXECUTION_ID`) USING BTREE,
  INDEX `JOB_INST_EXEC_FK`(`JOB_INSTANCE_ID`) USING BTREE,
  CONSTRAINT `batch_job_execution_ibfk_1` FOREIGN KEY (`JOB_INSTANCE_ID`) REFERENCES `batch_job_instance` (`JOB_INSTANCE_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_execution_context
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_execution_context`;
CREATE TABLE `batch_job_execution_context`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `SHORT_CONTEXT` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `SERIALIZED_CONTEXT` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `batch_job_execution_context_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_execution_params
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_execution_params`;
CREATE TABLE `batch_job_execution_params`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `TYPE_CD` varchar(6) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `KEY_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `STRING_VAL` varchar(250) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `DATE_VAL` datetime(0) NULL DEFAULT NULL,
  `LONG_VAL` bigint(20) NULL DEFAULT NULL,
  `DOUBLE_VAL` double NULL DEFAULT NULL,
  `IDENTIFYING` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  INDEX `JOB_EXEC_PARAMS_FK`(`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `batch_job_execution_params_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 15120357 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_execution_seq
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_execution_seq`;
CREATE TABLE `batch_job_execution_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_instance
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_instance`;
CREATE TABLE `batch_job_instance`  (
  `JOB_INSTANCE_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NULL DEFAULT NULL,
  `JOB_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `JOB_KEY` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`JOB_INSTANCE_ID`) USING BTREE,
  UNIQUE INDEX `JOB_INST_UN`(`JOB_NAME`, `JOB_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_job_seq
-- ----------------------------
DROP TABLE IF EXISTS `batch_job_seq`;
CREATE TABLE `batch_job_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_step_execution
-- ----------------------------
DROP TABLE IF EXISTS `batch_step_execution`;
CREATE TABLE `batch_step_execution`  (
  `STEP_EXECUTION_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NOT NULL,
  `STEP_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `START_TIME` datetime(0) NOT NULL,
  `END_TIME` datetime(0) NULL DEFAULT NULL,
  `STATUS` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `COMMIT_COUNT` bigint(20) NULL DEFAULT NULL,
  `READ_COUNT` bigint(20) NULL DEFAULT NULL,
  `FILTER_COUNT` bigint(20) NULL DEFAULT NULL,
  `WRITE_COUNT` bigint(20) NULL DEFAULT NULL,
  `READ_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `WRITE_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `PROCESS_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `ROLLBACK_COUNT` bigint(20) NULL DEFAULT NULL,
  `EXIT_CODE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_MESSAGE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `LAST_UPDATED` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`STEP_EXECUTION_ID`) USING BTREE,
  INDEX `JOB_EXEC_STEP_FK`(`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `batch_step_execution_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_step_execution_context
-- ----------------------------
DROP TABLE IF EXISTS `batch_step_execution_context`;
CREATE TABLE `batch_step_execution_context`  (
  `STEP_EXECUTION_ID` bigint(20) NOT NULL,
  `SHORT_CONTEXT` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `SERIALIZED_CONTEXT` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`STEP_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `batch_step_execution_context_ibfk_1` FOREIGN KEY (`STEP_EXECUTION_ID`) REFERENCES `batch_step_execution` (`STEP_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for batch_step_execution_seq
-- ----------------------------
DROP TABLE IF EXISTS `batch_step_execution_seq`;
CREATE TABLE `batch_step_execution_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for driver_attendance
-- ----------------------------
DROP TABLE IF EXISTS `driver_attendance`;
CREATE TABLE `driver_attendance`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `driverId` int(11) NULL DEFAULT NULL COMMENT '司机id',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `lineDeptId` int(11) NULL DEFAULT NULL COMMENT '线路id',
  `empno` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '工号',
  `signInTime` datetime(0) NULL DEFAULT NULL COMMENT '签到时间',
  `signOutTime` datetime(0) NULL DEFAULT NULL COMMENT '签退时间',
  `workHours` float NULL DEFAULT NULL COMMENT '工作时长(小时)',
  `created_at` datetime(0) NULL DEFAULT NULL COMMENT '数据插入时间',
  `updated_at` datetime(0) NULL DEFAULT NULL COMMENT '数据更新时间',
  `lineId` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_driverid_idx`(`driverId`) USING BTREE,
  INDEX `idx_export`(`driverId`, `lineDeptId`, `signInTime`) USING BTREE,
  INDEX `idx_vehicleNo`(`vehicleNo`) USING BTREE,
  CONSTRAINT `driver_attendance_ibfk_1` FOREIGN KEY (`driverId`) REFERENCES `t_driverinfo` (`driverid`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 996665 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '司机考勤信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for driving_violation_type
-- ----------------------------
DROP TABLE IF EXISTS `driving_violation_type`;
CREATE TABLE `driving_violation_type`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `violationName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称',
  `violationeName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称英文',
  `dangerType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '危险类型',
  `hignConsumeType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '高耗能类型',
  `damageType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '损车类型',
  `badServiceType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '不良服务类型',
  `deptid` int(11) NULL DEFAULT NULL COMMENT '总公司机构id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_deptid`(`deptid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1928 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '违规项所属类型' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for driving_violation_type_copy
-- ----------------------------
DROP TABLE IF EXISTS `driving_violation_type_copy`;
CREATE TABLE `driving_violation_type_copy`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `violationName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称',
  `violationeName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称英文',
  `dangerType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '危险类型',
  `hignConsumeType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '高耗能类型',
  `damageType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '损车类型',
  `badServiceType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '不良服务类型',
  `deptid` int(11) NULL DEFAULT NULL COMMENT '总公司机构id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1138 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '违规项所属类型' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for driving_violation_type_copy1
-- ----------------------------
DROP TABLE IF EXISTS `driving_violation_type_copy1`;
CREATE TABLE `driving_violation_type_copy1`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `violationName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称',
  `violationeName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称英文',
  `dangerType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '危险类型',
  `hignConsumeType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '高耗能类型',
  `damageType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '损车类型',
  `badServiceType` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '不良服务类型',
  `deptid` int(11) NULL DEFAULT NULL COMMENT '总公司机构id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_deptid`(`deptid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1518 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '违规项所属类型' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for driving_violation_type_new
-- ----------------------------
DROP TABLE IF EXISTS `driving_violation_type_new`;
CREATE TABLE `driving_violation_type_new`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `violationName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称',
  `violationeName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规名称英文',
  `violationrank` int(11) NULL DEFAULT 0 COMMENT '违规分类；{0：未分类，1：dangerType，2：hignConsumeType，3：damageType,4:badServiceType}',
  `deptid` int(11) NULL DEFAULT NULL COMMENT '总公司机构id',
  `vehicleType` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车型',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_deptid`(`deptid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4379 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '违规项所属类型' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for last_vehicle_miles
-- ----------------------------
DROP TABLE IF EXISTS `last_vehicle_miles`;
CREATE TABLE `last_vehicle_miles`  (
  `vehicledeviceid` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备号',
  `vehicleNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `accruedmiles` int(11) NULL DEFAULT NULL COMMENT '累计里程',
  `shortmiles` int(11) NULL DEFAULT NULL COMMENT '短里程',
  `gpsmiles` int(11) NULL DEFAULT NULL COMMENT 'gps定位里程，每天累加',
  `gpsstatus` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'gps状态',
  `vehicleAge` int(11) NULL DEFAULT NULL COMMENT '车龄（自购买至今的月数）',
  `updatetime` datetime(0) NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `adjustDate` date NULL DEFAULT NULL COMMENT '校准日期'
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for maintain_events_log
-- ----------------------------
DROP TABLE IF EXISTS `maintain_events_log`;
CREATE TABLE `maintain_events_log`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `eventName` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '事件内容',
  `startTime` timestamp(0) NULL DEFAULT NULL,
  `finishTime` timestamp(0) NULL DEFAULT NULL COMMENT '完成时间',
  `comments` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 699871 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '数据库定时任务日志表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for maintain_events_log_detail
-- ----------------------------
DROP TABLE IF EXISTS `maintain_events_log_detail`;
CREATE TABLE `maintain_events_log_detail`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `eventName` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '事件内容',
  `startTime` timestamp(0) NULL DEFAULT NULL,
  `finishTime` timestamp(0) NULL DEFAULT NULL COMMENT '完成时间',
  `comments` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 684291 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '数据库定时任务日志表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for maintain_table_status
-- ----------------------------
DROP TABLE IF EXISTS `maintain_table_status`;
CREATE TABLE `maintain_table_status`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `table_name` varchar(60) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `table_rows` int(11) NULL DEFAULT NULL,
  `data_gb` decimal(14, 1) NULL DEFAULT NULL,
  `index_gb` decimal(14, 1) NULL DEFAULT NULL,
  `stat_date` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 34931 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_dept
-- ----------------------------
DROP TABLE IF EXISTS `mauth_dept`;
CREATE TABLE `mauth_dept`  (
  `dept_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '机构主键',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `code` int(11) NULL DEFAULT NULL COMMENT '机构编号',
  `area_number` int(11) NULL DEFAULT NULL COMMENT '地区编号',
  `lft` int(11) NULL DEFAULT NULL COMMENT '左值',
  `rgt` int(11) NULL DEFAULT NULL COMMENT '右值',
  `remark` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '描述',
  `created_at` bigint(20) NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` bigint(20) NULL DEFAULT NULL COMMENT '更新时间',
  `level` int(10) NULL DEFAULT NULL COMMENT '机构等级',
  `company_sign` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '公司标识（与协议对应）',
  PRIMARY KEY (`dept_id`) USING BTREE,
  INDEX `lft_index`(`lft`) USING BTREE,
  INDEX `rgt_index`(`rgt`) USING BTREE,
  INDEX `dept_id_index`(`dept_id`) USING BTREE,
  INDEX `level_index`(`level`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5979 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '组织机构实体表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_dlevel
-- ----------------------------
DROP TABLE IF EXISTS `mauth_dlevel`;
CREATE TABLE `mauth_dlevel`  (
  `dlevel_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '数据密级id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '名称',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '描述',
  `created_at` bigint(20) NULL DEFAULT NULL,
  `updated_at` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`dlevel_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12346 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '数据密级实体表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_dlevel_record
-- ----------------------------
DROP TABLE IF EXISTS `mauth_dlevel_record`;
CREATE TABLE `mauth_dlevel_record`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `record_id` int(11) NOT NULL COMMENT '密级数据记录id',
  `dlevel_id` int(11) NOT NULL COMMENT '数据密级id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 362 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '密级数据记录和数据密级关联表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_menu
-- ----------------------------
DROP TABLE IF EXISTS `mauth_menu`;
CREATE TABLE `mauth_menu`  (
  `menu_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '菜单id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '名称',
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '链接',
  `lft` int(11) NOT NULL COMMENT '左值',
  `rgt` int(11) NOT NULL COMMENT '右值',
  `is_show_menu` enum('0','1') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '是否显示再菜单上面 1显示 0不显示',
  `remark` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '描述',
  `is_log` enum('1','0') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '当访问的时候是否记录日志 1记录 0不记录',
  `log_info` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '日志记录的内容',
  `log_type` int(11) NULL DEFAULT 19 COMMENT 'log类型(..)',
  PRIMARY KEY (`menu_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 456 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '菜单实体表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_role
-- ----------------------------
DROP TABLE IF EXISTS `mauth_role`;
CREATE TABLE `mauth_role`  (
  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '角色id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '角色名称',
  `remark` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '描述',
  `dlevel_id` int(11) NULL DEFAULT NULL COMMENT '外键 数据密级id',
  `dept_id` int(11) NULL DEFAULT NULL COMMENT '机构主键',
  `controlLimit` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '管理范围 0/全部，1/车场范围，2/非车场范围',
  `created_at` bigint(20) NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` bigint(20) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3213150 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '角色表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_role_data
-- ----------------------------
DROP TABLE IF EXISTS `mauth_role_data`;
CREATE TABLE `mauth_role_data`  (
  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '角色主键',
  `data_type` int(11) NULL DEFAULT NULL COMMENT '1本人数据 2本人及所在单位 3本人及所在单位及下属单位 4全部',
  `other_dept_id` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '其他组织id',
  `other_phone_id` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '其他手机id',
  `created_at` bigint(20) NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` bigint(20) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3213150 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '角色数据范围表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_role_manage
-- ----------------------------
DROP TABLE IF EXISTS `mauth_role_manage`;
CREATE TABLE `mauth_role_manage`  (
  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '角色id',
  `manage_type` int(11) NULL DEFAULT NULL COMMENT '1本人数据 2本人及所在单位 3本人及所在单位及下属单位 4全部',
  `other_dept_id` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '其他组织id',
  `created_at` bigint(20) NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` bigint(20) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3213150 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '角色管理范围表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `mauth_role_menu`;
CREATE TABLE `mauth_role_menu`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int(11) NOT NULL COMMENT '角色id',
  `menu_id` int(11) NOT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 126113 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '角色菜单关联表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_role_menu_copy
-- ----------------------------
DROP TABLE IF EXISTS `mauth_role_menu_copy`;
CREATE TABLE `mauth_role_menu_copy`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int(11) NOT NULL COMMENT '角色id',
  `menu_id` int(11) NOT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 85868 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '角色菜单关联表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_route
-- ----------------------------
DROP TABLE IF EXISTS `mauth_route`;
CREATE TABLE `mauth_route`  (
  `route_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '路由主键',
  `route_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '路由名称',
  `menu_id` int(11) NOT NULL COMMENT '外键 菜单id',
  PRIMARY KEY (`route_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 628 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '路由信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_user
-- ----------------------------
DROP TABLE IF EXISTS `mauth_user`;
CREATE TABLE `mauth_user`  (
  `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `CLIENTID` int(11) NULL DEFAULT NULL,
  `USERROLEID` int(11) NULL DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '密码',
  `real_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '真实姓名',
  `mobilephone` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '手机号码',
  `email` varchar(25) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '邮箱',
  `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `certificateid` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '身份证号码',
  `head_address` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '头像地址',
  `status` enum('1','2') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '1表示停用 2表示正常',
  `last_login_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最后登录ip',
  `last_login_time` bigint(20) NULL DEFAULT NULL COMMENT '最后登录时间',
  `login_times` int(11) NULL DEFAULT 0 COMMENT '登录次数',
  `remark` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '备注',
  `dept_id` int(11) NULL DEFAULT NULL COMMENT '外键 组织id',
  `created_at` bigint(20) NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` bigint(20) NULL DEFAULT NULL COMMENT '最后更新时间',
  `apptocken` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '客户端唯一识别码',
  `parentSystemKey` int(11) NULL DEFAULT NULL COMMENT '账号大系统展示key',
  PRIMARY KEY (`user_id`) USING BTREE,
  INDEX `index_dept_id`(`dept_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 702 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '用户信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mauth_user_role
-- ----------------------------
DROP TABLE IF EXISTS `mauth_user_role`;
CREATE TABLE `mauth_user_role`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int(11) NOT NULL COMMENT '用户id',
  `role_id` int(11) NOT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `index_user_id`(`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4824 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '用户角色关联表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for mon_alarminfo
-- ----------------------------
DROP TABLE IF EXISTS `mon_alarminfo`;
CREATE TABLE `mon_alarminfo`  (
  `id` int(11) NULL DEFAULT NULL,
  `type` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `alarmtime` datetime(0) NULL DEFAULT NULL,
  `lastalarmtime` datetime(0) NULL DEFAULT NULL,
  `dismisstime` datetime(0) NULL DEFAULT NULL,
  `inserttime` datetime(0) NULL DEFAULT NULL,
  `time_diff` int(11) NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 11365 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for people
-- ----------------------------
DROP TABLE IF EXISTS `people`;
CREATE TABLE `people`  (
  `person_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `last_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`person_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_api_data
-- ----------------------------
DROP TABLE IF EXISTS `stat_api_data`;
CREATE TABLE `stat_api_data`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `deviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` smallint(6) NULL DEFAULT NULL COMMENT '数据类型：1-运行里程 2-油耗 3-气耗 4-电耗 5-车辆故障数',
  `stat_date` date NULL DEFAULT NULL,
  `value` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sd_api`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2743026 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '存储车辆统计数据，供api调用' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_api_data_violation_by_line
-- ----------------------------
DROP TABLE IF EXISTS `stat_api_data_violation_by_line`;
CREATE TABLE `stat_api_data_violation_by_line`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `line_deptid` int(11) NULL DEFAULT NULL COMMENT '线路deptid',
  `total_times` int(11) NULL DEFAULT NULL COMMENT '总违规次数',
  `total_vehicles` int(11) NULL DEFAULT NULL COMMENT '总违规车辆数',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sdate_viobyline`(`stat_date`, `line_deptid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 95068 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '按线路统计车辆违规信息' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_battery_analyse_voltandtemp_day
-- ----------------------------
DROP TABLE IF EXISTS `stat_battery_analyse_voltandtemp_day`;
CREATE TABLE `stat_battery_analyse_voltandtemp_day`  (
  `DeviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL,
  `temp` int(11) NULL DEFAULT NULL COMMENT '最大温差',
  `volt` int(11) NULL DEFAULT NULL COMMENT '最大压差',
  INDEX `idx_sdate_speed`(`stat_date`) USING BTREE,
  INDEX `idx_devid`(`DeviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 76448 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员车速统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_battery_analyse_voltandtemp_hour
-- ----------------------------
DROP TABLE IF EXISTS `stat_battery_analyse_voltandtemp_hour`;
CREATE TABLE `stat_battery_analyse_voltandtemp_hour`  (
  `DeviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL,
  `temp` int(11) NULL DEFAULT NULL COMMENT '最大温差',
  `volt` int(11) NULL DEFAULT NULL COMMENT '最大压差',
  `hour` int(11) NULL DEFAULT NULL COMMENT '小时',
  INDEX `idx_sdate_speed`(`stat_date`) USING BTREE,
  INDEX `idx_devid`(`DeviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 895936 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员车速统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_battery_analyse_voltandtemp_month
-- ----------------------------
DROP TABLE IF EXISTS `stat_battery_analyse_voltandtemp_month`;
CREATE TABLE `stat_battery_analyse_voltandtemp_month`  (
  `DeviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL,
  `temp` int(11) NULL DEFAULT NULL COMMENT '最大温差',
  `volt` int(11) NULL DEFAULT NULL COMMENT '最大压差',
  INDEX `idx_sdate_speed`(`stat_date`) USING BTREE,
  INDEX `idx_devid`(`DeviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 108489 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员车速统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_driving_violation_day
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_day`;
CREATE TABLE `stat_driving_violation_day`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `driverId` int(11) NULL DEFAULT NULL COMMENT 't_driverinfo主键',
  `driverName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驾驶员姓名',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备ID',
  `lineId` int(11) NULL DEFAULT NULL COMMENT 't_lineinfo主键',
  `lineName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `groupId` int(11) NULL DEFAULT NULL COMMENT 't_vehiclegroup主键',
  `groupName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队名称',
  `subCompanyId` int(11) NULL DEFAULT NULL COMMENT '分公司ID',
  `subCompanyName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司名称',
  `CompanyId` int(11) NULL DEFAULT NULL COMMENT '总公司ID',
  `CompanyName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司名称',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `month` int(11) NULL DEFAULT NULL COMMENT '统计的月份',
  `actionType` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规项',
  `actionTypeDesc` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规项名称',
  `totalNum` int(11) NULL DEFAULT NULL COMMENT '违规次数',
  `scores` int(11) NULL DEFAULT NULL COMMENT '扣分',
  `total_seconds` int(11) NULL DEFAULT NULL COMMENT '违规时长（单位：秒）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sdate_violationsummary`(`stat_date`) USING BTREE,
  INDEX `idx_dvid_vios`(`deviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 73403 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员行为违规扣分日汇总-zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_driving_violation_detail
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_detail`;
CREATE TABLE `stat_driving_violation_detail`  (
  `vehicledeviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备号',
  `actiontype` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驾驶行为类型',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `begin_time` timestamp(0) NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` timestamp(0) NULL DEFAULT NULL COMMENT '结束时间',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '开始时的gpsx坐标',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '开始时的gpsy坐标',
  `bz_id` smallint(6) UNSIGNED NULL DEFAULT 0 COMMENT '黑点区域id，为0则不属于黑点区域',
  `score` tinyint(3) UNSIGNED NULL DEFAULT NULL COMMENT '得分、时长、次数',
  `speed` smallint(6) NULL DEFAULT NULL COMMENT '车速',
  `engine` smallint(6) NULL DEFAULT NULL COMMENT '引擎转速',
  `driverId` smallint(6) UNSIGNED NULL DEFAULT NULL,
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `lineDeptId` smallint(6) UNSIGNED NULL DEFAULT NULL,
  `begin_site` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '违规开始站点id',
  `end_site` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '违规结束站点id',
  `realduration` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '相邻两站跨站时间',
  `judgement_id` int(11) NULL DEFAULT NULL COMMENT '判断依据主键',
  `violation_no` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规编号',
  UNIQUE INDEX `index_unique_vehicledeviceid_stat_date_violation_no`(`vehicledeviceid`, `stat_date`, `violation_no`) USING BTREE,
  INDEX `idx_stat_bz_line`(`stat_date`, `bz_id`, `lineDeptId`) USING BTREE,
  INDEX `idx_actiontype_stat`(`actiontypeDesc`, `stat_date`, `lineDeptId`) USING BTREE,
  INDEX `idx_stat_driverid`(`driverId`, `stat_date`, `actiontypeDesc`) USING BTREE,
  INDEX `idx_bz_id`(`bz_id`) USING BTREE,
  INDEX `idx_lineDeptId`(`lineDeptId`) USING BTREE,
  INDEX `idx_judgement_id`(`judgement_id`) USING BTREE,
  CONSTRAINT `fk_judgement_id` FOREIGN KEY (`judgement_id`) REFERENCES `stat_driving_violation_judgement` (`judgement_id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶行为违规明细统计表' ROW_FORMAT = Compressed;

-- ----------------------------
-- Table structure for stat_driving_violation_detail_20200718
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_detail_20200718`;
CREATE TABLE `stat_driving_violation_detail_20200718`  (
  `vehicledeviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备号',
  `actiontype` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驾驶行为类型',
  `actiontypeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `begin_time` timestamp(0) NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` timestamp(0) NULL DEFAULT NULL COMMENT '结束时间',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '开始时的gpsx坐标',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '开始时的gpsy坐标',
  `bz_id` smallint(6) UNSIGNED NULL DEFAULT 0 COMMENT '黑点区域id，为0则不属于黑点区域',
  `score` tinyint(3) UNSIGNED NULL DEFAULT NULL COMMENT '得分、时长、次数',
  `speed` smallint(6) NULL DEFAULT NULL COMMENT '车速',
  `engine` smallint(6) NULL DEFAULT NULL COMMENT '引擎转速',
  `driverId` smallint(6) UNSIGNED NULL DEFAULT NULL,
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `lineDeptId` smallint(6) UNSIGNED NULL DEFAULT NULL,
  `begin_site` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '违规开始站点id',
  `end_site` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '违规结束站点id',
  `realduration` smallint(6) UNSIGNED NULL DEFAULT NULL COMMENT '相邻两站跨站时间',
  `judgement_id` int(11) NULL DEFAULT NULL COMMENT '判断依据主键',
  `violation_no` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规编号',
  `end_gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `end_gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avg_speed` double(10, 2) NULL DEFAULT NULL,
  UNIQUE INDEX `index_unique_vehicledeviceid_stat_date_violation_no`(`vehicledeviceid`, `stat_date`, `violation_no`) USING BTREE,
  INDEX `idx_stat_bz_line`(`stat_date`, `bz_id`, `lineDeptId`) USING BTREE,
  INDEX `idx_actiontype_stat`(`actiontypeDesc`, `stat_date`, `lineDeptId`) USING BTREE,
  INDEX `idx_stat_driverid`(`driverId`, `stat_date`, `actiontypeDesc`) USING BTREE,
  INDEX `idx_bz_id`(`bz_id`) USING BTREE,
  INDEX `idx_lineDeptId`(`lineDeptId`) USING BTREE,
  INDEX `idx_judgement_id`(`judgement_id`) USING BTREE,
  CONSTRAINT `fk_judgement_id_copy` FOREIGN KEY (`judgement_id`) REFERENCES `stat_driving_violation_judgement` (`judgement_id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶行为违规明细统计表-测试超速打点' ROW_FORMAT = Compressed;

-- ----------------------------
-- Table structure for stat_driving_violation_judgement
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_judgement`;
CREATE TABLE `stat_driving_violation_judgement`  (
  `judgement_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '违规判断条件主键',
  `create_date` date NULL DEFAULT NULL COMMENT '创建日期',
  `judgement_hash` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '依据内容hash索引',
  `judgement_json` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '违规判断条件内容（json）',
  PRIMARY KEY (`judgement_id`) USING BTREE,
  UNIQUE INDEX `unique_create_date_hash`(`create_date`, `judgement_hash`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9791 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '违规判断依据表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_driving_violation_rank
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_rank`;
CREATE TABLE `stat_driving_violation_rank`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '排名类型：\ndriver-按司机  line-按线路  group-按车队  subcompany-按分公司',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '司机id/线路/车队/分公司deptid',
  `deptName` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名/线路/车队/分公司名称',
  `parentDeptId` int(11) NULL DEFAULT NULL COMMENT '父级deptid',
  `scores` int(11) NULL DEFAULT NULL COMMENT '月总扣分',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计月份',
  `rank` int(11) NULL DEFAULT NULL COMMENT '在dept同级中的排名',
  `statDateType` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '排名时间类型： month-按月排名  year-按年排名',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_statdate_rank`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 516599 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '司机月扣分排名' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_driving_violation_summary
-- ----------------------------
DROP TABLE IF EXISTS `stat_driving_violation_summary`;
CREATE TABLE `stat_driving_violation_summary`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `driverId` int(11) NULL DEFAULT NULL COMMENT 't_driverinfo主键',
  `driverName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驾驶员姓名',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备ID',
  `lineId` int(11) NULL DEFAULT NULL COMMENT 't_lineinfo主键',
  `lineName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `groupId` int(11) NULL DEFAULT NULL COMMENT 't_vehiclegroup主键',
  `groupName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队名称',
  `subCompanyId` int(11) NULL DEFAULT NULL COMMENT '分公司ID',
  `subCompanyName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司名称',
  `CompanyId` int(11) NULL DEFAULT NULL COMMENT '总公司ID',
  `CompanyName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司名称',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `month` int(11) NULL DEFAULT NULL COMMENT '统计的月份',
  `actionType` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规项',
  `actionTypeDesc` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '违规项名称',
  `totalNum` int(11) NULL DEFAULT NULL COMMENT '违规次数',
  `scores` int(11) NULL DEFAULT NULL COMMENT '扣分',
  `total_seconds` int(11) NULL DEFAULT NULL COMMENT '违规时长（单位：秒）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_sdate_violationsummary`(`stat_date`) USING BTREE,
  INDEX `idx_dvid_vios`(`deviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4212899 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员行为违规扣分月汇总' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_drivinganalyse
-- ----------------------------
DROP TABLE IF EXISTS `stat_drivinganalyse`;
CREATE TABLE `stat_drivinganalyse`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `vehicleid` int(11) NULL DEFAULT NULL,
  `speed` int(11) NULL DEFAULT NULL COMMENT '车速',
  `revolutionspeed` int(11) NULL DEFAULT NULL COMMENT '转速',
  `watertemperature` int(11) NULL DEFAULT NULL COMMENT '水温',
  `oilpressure` int(11) NULL DEFAULT NULL COMMENT '油压',
  `airpressure1` int(11) NULL DEFAULT NULL COMMENT '气压1',
  `airpressure2` int(11) NULL DEFAULT NULL COMMENT '气压2',
  `electricity` int(11) NULL DEFAULT NULL COMMENT '电量',
  `oil` int(11) NULL DEFAULT NULL COMMENT '油量',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '行车曲线分析' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_drivingconfig
-- ----------------------------
DROP TABLE IF EXISTS `stat_drivingconfig`;
CREATE TABLE `stat_drivingconfig`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `type_desc` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驾驶员行为类型',
  `parameter` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '参数项',
  `para_value` int(11) NULL DEFAULT NULL COMMENT '两次判断的时间间隔阈值',
  `remark` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `dept_id` int(11) NULL DEFAULT NULL,
  `config_judge` tinyint(4) NULL DEFAULT 0 COMMENT '判断是否为标准',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uni_typeParameter`(`type_desc`, `parameter`, `dept_id`) USING BTREE,
  UNIQUE INDEX `类型唯一`(`type`, `parameter`, `dept_id`) USING BTREE,
  INDEX `idx01`(`type_desc`) USING BTREE,
  INDEX `idx_parameter`(`parameter`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8126 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '驾驶行为分析参数表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_drivingconfig_new
-- ----------------------------
DROP TABLE IF EXISTS `stat_drivingconfig_new`;
CREATE TABLE `stat_drivingconfig_new`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `type_desc` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驾驶员行为类型',
  `parameter` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '参数项',
  `para_value` int(11) NULL DEFAULT NULL COMMENT '两次判断的时间间隔阈值',
  `remark` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `dept_id` int(11) NULL DEFAULT NULL,
  `config_judge` tinyint(4) NULL DEFAULT 0 COMMENT '判断是否为标准',
  `time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `version` int(4) NULL DEFAULT 1 COMMENT '最新修改标记(0:历史修改，1：最新修改)',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx01`(`type_desc`) USING BTREE,
  INDEX `idx_parameter`(`parameter`) USING BTREE,
  INDEX `uni_typeParameter`(`type_desc`, `parameter`, `dept_id`) USING BTREE,
  INDEX `类型唯一`(`type`, `parameter`, `dept_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8132 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '驾驶行为分析参数表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_energy_compare
-- ----------------------------
DROP TABLE IF EXISTS `stat_energy_compare`;
CREATE TABLE `stat_energy_compare`  (
  `vehicleNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备ID',
  `motortype` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆类型： 1-燃油车 2-电车  3-油电混合动力车   4-燃气车     5-气电混合动力车',
  `timetype` int(1) NULL DEFAULT NULL COMMENT '时间类型：0-年 1-月 2-天',
  `time` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '数据时间',
  `stat_date` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '日期',
  `gasAvg` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '平均汽耗',
  `gasHundredMiles` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '百公里汽耗',
  `gasTotal` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总汽耗',
  `fuleAvg` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '平均油耗',
  `fuleHundredMiles` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '百公里油耗',
  `fuleTotal` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总油耗',
  `elecAvg` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '平均电耗',
  `elecHundredMiles` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '百公里电耗',
  `elecTotal` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总电耗',
  INDEX `key_index`(`vehicleNo`, `timetype`, `stat_date`) USING BTREE,
  INDEX `key_date_time`(`timetype`, `stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 63958907 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_energy_saving_detail
-- ----------------------------
DROP TABLE IF EXISTS `stat_energy_saving_detail`;
CREATE TABLE `stat_energy_saving_detail`  (
  `vehicledeviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `type` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '节能分析类型',
  `typeDesc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型描述',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `begin_time` timestamp(0) NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` timestamp(0) NULL DEFAULT NULL COMMENT '结束时间',
  `total_seconds` int(11) NULL DEFAULT NULL COMMENT '时长（秒数）',
  `speed` int(11) NULL DEFAULT NULL COMMENT '平均车速',
  INDEX `idx_statdate_energysaving`(`stat_date`) USING BTREE,
  INDEX `idx_devid`(`vehicledeviceid`) USING BTREE,
  INDEX `idx_type`(`type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6869924 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '节能分析' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_energy_saving_summary
-- ----------------------------
DROP TABLE IF EXISTS `stat_energy_saving_summary`;
CREATE TABLE `stat_energy_saving_summary`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计月份',
  `idleTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '怠速时长（秒）',
  `heaterTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '加热器时长（秒）',
  `conditionTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '空调开启时长（秒）',
  `efficientSpeed` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '平均经济车速',
  `efficientSpeedTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '经济车速时长（秒）',
  `NotRunconditionTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '非运营空调开启时长（秒）',
  `greenRunTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '绿区转速时长（秒）',
  `runTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运行总时长（秒）',
  `vehicledeviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `idleRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '怠速占比',
  `heaterRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '空调开启时长占比',
  `greenRunRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '绿区时长占比',
  `engineOverRunTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '发动机超转时长（秒）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_statdate_ens`(`stat_date`) USING BTREE,
  INDEX `idx_devNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 846471 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '节能分析月汇总' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_energy_saving_summary_day
-- ----------------------------
DROP TABLE IF EXISTS `stat_energy_saving_summary_day`;
CREATE TABLE `stat_energy_saving_summary_day`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `idleTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '怠速时长（秒）',
  `heaterTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '加热器时长（秒）',
  `conditionTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '空调开启时长（秒）',
  `efficientSpeed` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '平均经济车速',
  `efficientSpeedTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '经济车速时长（秒）',
  `NotRunconditionTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '非运营空调开启时长（秒）',
  `greenRunTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '绿区转速时长（秒）',
  `runTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运行总时长（秒）',
  `vehicledeviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `idleRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '怠速占比',
  `heaterRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '空调开启时长占比',
  `greenRunRate` decimal(6, 4) NULL DEFAULT NULL COMMENT '绿区时长占比',
  `engineOverRunTime` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '发动机超转时长（秒）',
  `deptid` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_statdate_ens`(`stat_date`) USING BTREE,
  INDEX `idx_devNo`(`vehicleNo`) USING BTREE,
  INDEX `idx_energesave_day_statdate`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 553449 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '节能分析按天汇总' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_line_alarm_violation_position_cluster
-- ----------------------------
DROP TABLE IF EXISTS `stat_line_alarm_violation_position_cluster`;
CREATE TABLE `stat_line_alarm_violation_position_cluster`  (
  `data_type` tinyint(4) NOT NULL COMMENT '数据类型，1 天，  2. 近七天  3. 月   4. 年',
  `line_dept_id` int(11) NOT NULL COMMENT '线路机构ID',
  `data_date` date NOT NULL COMMENT '记录对应的时间，年， 年月，年月日',
  `statistics_type` tinyint(4) NOT NULL COMMENT '统计类别， 1 故障  2  违规',
  `cluster` int(11) NOT NULL COMMENT '类别索引',
  `center_gps_x` double NULL DEFAULT NULL COMMENT '聚类中心gps_x',
  `center_gps_y` double NULL DEFAULT NULL COMMENT '聚类中心gps_y',
  `count` int(11) NULL DEFAULT NULL COMMENT '聚类样本记录数',
  `max_distance` double NULL DEFAULT NULL COMMENT '样本点距中心最远距离',
  `avg_distance` double NULL DEFAULT NULL COMMENT '样本点距中心的平均距离',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  PRIMARY KEY (`data_type`, `line_dept_id`, `data_date`, `statistics_type`, `cluster`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_speed_analyse
-- ----------------------------
DROP TABLE IF EXISTS `stat_speed_analyse`;
CREATE TABLE `stat_speed_analyse`  (
  `DeviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `lineid` int(11) NULL DEFAULT NULL,
  `depteId` int(11) NULL DEFAULT NULL,
  `type` enum('month','day') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL,
  `value` int(11) NULL DEFAULT NULL COMMENT '最高车速',
  `create_time` datetime(0) NULL DEFAULT NULL,
  INDEX `idx_sdate_speed`(`stat_date`) USING BTREE,
  INDEX `idx_devid`(`DeviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3267585 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员车速统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_speed_analyse_forhour
-- ----------------------------
DROP TABLE IF EXISTS `stat_speed_analyse_forhour`;
CREATE TABLE `stat_speed_analyse_forhour`  (
  `DeviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT NULL,
  `type` enum('month','day','year') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '时间类型',
  `stat_date` date NULL DEFAULT NULL,
  `value` int(11) NULL DEFAULT NULL COMMENT '最高车速',
  `hour` int(11) NULL DEFAULT NULL COMMENT '小时',
  INDEX `idx_devid`(`DeviceId`) USING BTREE,
  INDEX `idx_type`(`type`) USING BTREE,
  INDEX `stat_date_idx`(`stat_date`) USING BTREE,
  INDEX `idx_devid_type_state`(`DeviceId`, `type`, `stat_date`, `deptId`) USING BTREE,
  INDEX `idx_deviceid_hour`(`type`, `stat_date`, `hour`, `DeviceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 83527003 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '驾驶员车速统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_statealarm_summary_tmp
-- ----------------------------
DROP TABLE IF EXISTS `stat_statealarm_summary_tmp`;
CREATE TABLE `stat_statealarm_summary_tmp`  (
  `vehicledeviceid` char(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '设备号',
  `alarmtype` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型',
  `begin_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '报警开始时间',
  `end_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '报警结束时间',
  `duration` smallint(6) NULL DEFAULT NULL COMMENT '报警持续时间',
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警x坐标',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警y坐标',
  `alarmtype2` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '监控类型',
  `stattime` date NULL DEFAULT NULL COMMENT '统计时间',
  `stattype` char(1) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '统计类型'
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_vehicle_status
-- ----------------------------
DROP TABLE IF EXISTS `stat_vehicle_status`;
CREATE TABLE `stat_vehicle_status`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌号',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `online` tinyint(1) NULL DEFAULT 0,
  `status` int(11) NULL DEFAULT NULL COMMENT '汽车状态：1-正常    2-故障   3-维修',
  `isReparing` varchar(1) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT 'N' COMMENT '是否正在维修。改信息根据“车辆维护”信息，通过触发器自动修改',
  `deviceId` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备ID',
  `time` timestamp(0) NULL DEFAULT NULL,
  `mileage` int(11) NULL DEFAULT NULL COMMENT '运行里程，来自t_vehicleanaloginfo表',
  `hasArrearage` tinyint(1) NULL DEFAULT NULL COMMENT '是否欠款:1-是，0-否',
  INDEX `idx_devNo`(`vehicleNo`) USING BTREE,
  INDEX `idx_status`(`status`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8192 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_vehicle_status_copy
-- ----------------------------
DROP TABLE IF EXISTS `stat_vehicle_status_copy`;
CREATE TABLE `stat_vehicle_status_copy`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌号',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机构名称',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `online` tinyint(1) NULL DEFAULT 0,
  `status` int(11) NULL DEFAULT NULL COMMENT '汽车状态：1-正常    2-故障   3-维修',
  `isReparing` varchar(1) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT 'N' COMMENT '是否正在维修。改信息根据“车辆维护”信息，通过触发器自动修改',
  `deviceId` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备ID',
  `time` timestamp(0) NULL DEFAULT NULL,
  `mileage` int(11) NULL DEFAULT NULL COMMENT '运行里程，来自t_vehicleanaloginfo表',
  `hasArrearage` tinyint(1) NULL DEFAULT NULL COMMENT '是否欠款:1-是，0-否',
  INDEX `idx_devNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8192 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_vehicle_totalinfo
-- ----------------------------
DROP TABLE IF EXISTS `stat_vehicle_totalinfo`;
CREATE TABLE `stat_vehicle_totalinfo`  (
  `vehicleId` int(11) NULL DEFAULT NULL COMMENT '车辆id',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `analogNum` int(11) NULL DEFAULT NULL COMMENT '模拟量',
  `stateNum` int(11) NULL DEFAULT NULL COMMENT '状态量',
  `alarmNum` int(11) NULL DEFAULT NULL COMMENT '报警量',
  INDEX `idx_vehicleNo_stattotalinfo`(`vehicleNo`) USING BTREE,
  INDEX `idx_devid_stattotalinfo`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1564688 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车辆每天的状态量、模拟量、报警量等总量信息' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for stat_vehicleenergy
-- ----------------------------
DROP TABLE IF EXISTS `stat_vehicleenergy`;
CREATE TABLE `stat_vehicleenergy`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆ID',
  `vehicleNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌号',
  `motorType` tinyint(4) NULL DEFAULT NULL COMMENT '车型',
  `vehicleType` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `gasStandard` float NULL DEFAULT NULL COMMENT '气车标准能耗',
  `gasAvg` int(11) NULL DEFAULT NULL COMMENT '平均能耗',
  `gasInstant` float NULL DEFAULT NULL COMMENT '瞬时气耗',
  `gasHundredMiles` float NULL DEFAULT NULL COMMENT '百公里气耗',
  `gasTotal` float NULL DEFAULT NULL COMMENT '总气耗',
  `gasSumAll` float NULL DEFAULT NULL COMMENT '累计加气总量',
  `fuleStandard` float NULL DEFAULT NULL COMMENT '油车标准能耗',
  `fuleAvg` int(11) NULL DEFAULT NULL COMMENT '平均油耗',
  `fuleInstant` float NULL DEFAULT NULL COMMENT '瞬时油耗',
  `fuleHundredMiles` float NULL DEFAULT NULL COMMENT '百公里油耗',
  `fuleTotal` float NULL DEFAULT NULL COMMENT '总油耗',
  `fuleSumAll` float NULL DEFAULT NULL COMMENT '累计加油总量',
  `elecStandard` int(11) NULL DEFAULT NULL COMMENT '电车标准能耗',
  `elecAvg` float NULL DEFAULT NULL COMMENT '平均电耗=总电耗/累计里程',
  `elecPerDay` float NULL DEFAULT NULL COMMENT '单日消耗电量',
  `elecHundredMiles` float NULL DEFAULT NULL COMMENT '百公里电耗',
  `elecTotal` float NULL DEFAULT NULL COMMENT '总电耗',
  `elecSumAll` float NULL DEFAULT NULL COMMENT '累计加电总量',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '车辆线路deptid',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `energyStandard` float NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_devid`(`deviceId`) USING BTREE,
  INDEX `idx_deptId`(`deptId`) USING BTREE,
  INDEX `idx_state`(`stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1506316 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆能耗统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_alarmlevelinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_alarmlevelinfo`;
CREATE TABLE `t_alarmlevelinfo`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `deptId` int(11) NULL DEFAULT NULL COMMENT '公司deptid',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `alarmLevel` smallint(6) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_dt_alarmlevel`(`deptId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2388 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_alarmsummary
-- ----------------------------
DROP TABLE IF EXISTS `t_alarmsummary`;
CREATE TABLE `t_alarmsummary`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmType` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属类型的主类',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `alarmlocation` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警发送位置',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `dismissTime` timestamp(0) NULL DEFAULT NULL COMMENT '报警取消时间',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警级别',
  `statTime` datetime(0) NULL DEFAULT NULL COMMENT '统计时间',
  `gx` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps——x',
  `gy` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps-y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL COMMENT '最后一次报警发送时间',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  `companyName` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司',
  `companyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '总公司 deptid',
  `subCompanyName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司',
  `subCompanyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '分公司 deptid',
  `groupName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队',
  `groupDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '车队 deptid',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路',
  `lineDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '线路 deptid',
  `finished` tinyint(1) NOT NULL DEFAULT 0 COMMENT '0-未完成，1-完成',
  `releaseState` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '1' COMMENT '报警解除状态 1:正常结束 2：超时自动结束  3：超时手动结束',
  `intervalTime` longtext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '相同报警时间间隔',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `uix_devid_typeid_finished`(`deviceId`, `alarmstarttime`, `lastAlarmTime`, `alarmtypeid`) USING BTREE,
  INDEX `idx_new`(`alarmstarttime`, `dismissTime`, `companyDeptId`, `lineName`) USING BTREE,
  INDEX `idx_deviceId_time`(`deviceId`, `alarmstarttime`) USING BTREE,
  INDEX `uix_dev_alarm_flag`(`deviceId`, `alarmtypeid`, `alarmFlag`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 129271790 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_alarmsummary_linshi
-- ----------------------------
DROP TABLE IF EXISTS `t_alarmsummary_linshi`;
CREATE TABLE `t_alarmsummary_linshi`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmType` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属类型的主类',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `alarmlocation` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警发送位置',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `dismissTime` timestamp(0) NULL DEFAULT NULL COMMENT '报警取消时间',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警级别',
  `statTime` datetime(0) NULL DEFAULT NULL COMMENT '统计时间',
  `gx` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps——x',
  `gy` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps-y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL COMMENT '最后一次报警发送时间',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  `companyName` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司',
  `companyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '总公司 deptid',
  `subCompanyName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司',
  `subCompanyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '分公司 deptid',
  `groupName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队',
  `groupDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '车队 deptid',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路',
  `lineDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '线路 deptid',
  `finished` tinyint(1) NOT NULL DEFAULT 0 COMMENT '0-未完成，1-完成',
  `intervalTime` longtext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '相同报警时间间隔',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_vno_summary`(`vehicleNo`) USING BTREE,
  INDEX `uix_dev_alarm_flag`(`deviceId`, `alarmtypeid`, `alarmFlag`) USING BTREE,
  INDEX `idx_statTime`(`lineName`, `statTime`) USING BTREE,
  INDEX `idx_vehicleNo_startTime`(`vehicleNo`, `statTime`) USING BTREE,
  INDEX `idx_company`(`companyDeptId`, `lineName`) USING BTREE,
  INDEX `uix_devid_typeid_finished`(`alarmstarttime`, `lastAlarmTime`, `deviceId`, `alarmtypeid`) USING BTREE,
  INDEX `uix_devid_typeid_finished2`(`dismissTime`, `lastAlarmTime`, `deviceId`, `alarmtypeid`) USING BTREE,
  INDEX `idx_alarmstarttime`(`alarmstarttime`, `dismissTime`, `lineName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 51141324 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_alarmsummary_unfinished
-- ----------------------------
DROP TABLE IF EXISTS `t_alarmsummary_unfinished`;
CREATE TABLE `t_alarmsummary_unfinished`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmType` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属类型的主类',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `alarmlocation` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警发送位置',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `dismissTime` timestamp(0) NULL DEFAULT NULL COMMENT '报警取消时间',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警级别',
  `statTime` datetime(0) NULL DEFAULT NULL COMMENT '统计时间',
  `gx` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps——x',
  `gy` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps-y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL COMMENT '最后一次报警发送时间',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  `companyName` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司',
  `companyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '总公司 deptid',
  `subCompanyName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司',
  `subCompanyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '分公司 deptid',
  `groupName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队',
  `groupDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '车队 deptid',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路',
  `lineDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '线路 deptid',
  `finished` tinyint(1) NULL DEFAULT 0 COMMENT '0-未完成，1-完成',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_vno_summary`(`vehicleNo`) USING BTREE,
  INDEX `alarm_flag`(`alarmFlag`) USING BTREE,
  INDEX `idx_alarmstarttime_finished`(`alarmstarttime`, `dismissTime`, `lineName`) USING BTREE,
  INDEX `idx_linedept_alarmstarttime`(`alarmstarttime`, `lineDeptId`) USING BTREE,
  INDEX `idx_lineDeptId_alarmtype`(`lineDeptId`, `alarmType`) USING BTREE,
  INDEX `uix_devid_typeid_finished`(`alarmstarttime`, `dismissTime`, `deviceId`, `alarmtypeid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 25279293567 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_alarmsummary_unfinished_copy
-- ----------------------------
DROP TABLE IF EXISTS `t_alarmsummary_unfinished_copy`;
CREATE TABLE `t_alarmsummary_unfinished_copy`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceId` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `alarmType` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属类型的主类',
  `alarmstarttime` timestamp(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '持续时间',
  `alarmlocation` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警发送位置',
  `motorType` tinyint(45) UNSIGNED NULL DEFAULT NULL COMMENT '车辆类型',
  `dismissTime` timestamp(0) NULL DEFAULT NULL COMMENT '报警取消时间',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警级别',
  `statTime` datetime(0) NULL DEFAULT NULL COMMENT '统计时间',
  `gx` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps——x',
  `gy` double(16, 11) NULL DEFAULT NULL COMMENT '报警发生位置gps-y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL COMMENT '最后一次报警发送时间',
  `alarmtypeid` int(45) UNSIGNED NULL DEFAULT NULL COMMENT '报警类型id',
  `alarmFlag` tinyint(11) UNSIGNED NULL DEFAULT NULL COMMENT '1-表示来自 t_vehiclealarminfo;2-表示来自t_vehiclealarminfo2',
  `companyName` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '总公司',
  `companyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '总公司 deptid',
  `subCompanyName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分公司',
  `subCompanyDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '分公司 deptid',
  `groupName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队',
  `groupDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '车队 deptid',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路',
  `lineDeptId` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '线路 deptid',
  `finished` tinyint(1) NULL DEFAULT 0 COMMENT '0-未完成，1-完成',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `uix_devid_typeid_finished`(`alarmstarttime`, `lastAlarmTime`, `deviceId`, `alarmtypeid`) USING BTREE,
  INDEX `idx_vno_summary`(`vehicleNo`) USING BTREE,
  INDEX `alarm_flag`(`alarmFlag`) USING BTREE,
  INDEX `idx_alarmstarttime_finished`(`alarmstarttime`, `dismissTime`, `lineName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8227271056 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_androidupdate
-- ----------------------------
DROP TABLE IF EXISTS `t_androidupdate`;
CREATE TABLE `t_androidupdate`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `versionCode` int(11) NULL DEFAULT NULL COMMENT '版本号',
  `versionName` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '版本名',
  `isForceUpdate` int(2) NULL DEFAULT NULL COMMENT '是否强制更新',
  `downUrl` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '下载地址',
  `updateLog` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '更新日志',
  `auther` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '作者',
  `time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间',
  `download` int(10) NULL DEFAULT NULL COMMENT '下载次数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 48 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_areainfo
-- ----------------------------
DROP TABLE IF EXISTS `t_areainfo`;
CREATE TABLE `t_areainfo`  (
  `areaId` int(11) NOT NULL AUTO_INCREMENT,
  `lineId` int(11) NULL DEFAULT NULL COMMENT '线路Id',
  `areaName` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '区域名称',
  `importantarea` int(11) NULL DEFAULT 0 COMMENT '重点路口 0：不是 1：是',
  `waterarea` int(11) NULL DEFAULT 0 COMMENT '积水路段 0：不是 1：是',
  `signallight` int(11) NULL DEFAULT 0 COMMENT '信号灯 0：不是 1：是',
  `cameraarea` int(11) NULL DEFAULT 0 COMMENT '积水路段 0：不是 1：是',
  `rotaryisland` int(11) NULL DEFAULT 0 COMMENT '环岛 0：不是 1：是',
  `gps_x` double NULL DEFAULT NULL COMMENT '经度',
  `gps_y` double NULL DEFAULT NULL COMMENT '纬度',
  `speed` int(11) NULL DEFAULT NULL COMMENT '地区限速值',
  `bzNum` int(11) NULL DEFAULT NULL COMMENT '黑点编号',
  `dangerDegree` varchar(4) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '危险等级',
  `r` int(11) NULL DEFAULT NULL COMMENT '区域半径',
  `areaRoad` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '区域路段',
  `situation` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '现场简况',
  `dangerReason` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '危险源',
  `safeGuide` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '安全指导',
  PRIMARY KEY (`areaId`) USING BTREE,
  INDEX `inx_areaId`(`areaId`) USING BTREE,
  INDEX `idx_importantarea`(`importantarea`) USING BTREE,
  INDEX `idx_im_lineId`(`lineId`, `importantarea`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1589 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_canmoduleinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_canmoduleinfo`;
CREATE TABLE `t_canmoduleinfo`  (
  `vehicleType` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '车型',
  `canMatserInfo` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '主站信息',
  `canSlaveInfo` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '从站基本信息',
  `canSlaveTopMuduleInfo` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '管脚定义顶模块',
  `canSlaveFrontMuduleInfo` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '管脚定义前模块',
  `canSlaveRearMuduleInfo` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '管脚定义后模块',
  PRIMARY KEY (`vehicleType`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车辆画像整车拓扑can信息表（仅与车型有关）' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_car_data_tmp_for_count
-- ----------------------------
DROP TABLE IF EXISTS `t_car_data_tmp_for_count`;
CREATE TABLE `t_car_data_tmp_for_count`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `device_id` bigint(16) UNSIGNED ZEROFILL NULL DEFAULT NULL COMMENT '设备id',
  `device_type` tinyint(2) UNSIGNED ZEROFILL NULL DEFAULT NULL COMMENT '车辆类型',
  `packages` tinyint(3) UNSIGNED NULL DEFAULT NULL COMMENT '数据（子）包个数',
  `analog_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `state1_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `state2_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `state3_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ele_analog1_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ele_analog2_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ele_state_time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `data` tinytext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '信息',
  `raw_data` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '原始数据',
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '数据入库时间',
  UNIQUE INDEX `uix_id_create_time`(`id`, `create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '测试统计zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_gps
-- ----------------------------
DROP TABLE IF EXISTS `t_company_gps`;
CREATE TABLE `t_company_gps`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 43 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_month_compare_date
-- ----------------------------
DROP TABLE IF EXISTS `t_company_month_compare_date`;
CREATE TABLE `t_company_month_compare_date`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `companyDeptId` int(11) NULL DEFAULT NULL COMMENT '公司机构id',
  `companyName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公司名称',
  `date` date NULL DEFAULT NULL COMMENT '统计日期',
  `stat_day` int(11) NULL DEFAULT NULL COMMENT '统计日数',
  `statisticalDate` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '当月生效，下月生效',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 51 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_setting
-- ----------------------------
DROP TABLE IF EXISTS `t_company_setting`;
CREATE TABLE `t_company_setting`  (
  `company` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '公司标识',
  `setting` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '公司显示设置',
  PRIMARY KEY (`company`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '公司系统显示表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_vehicle_type_config_batterys
-- ----------------------------
DROP TABLE IF EXISTS `t_company_vehicle_type_config_batterys`;
CREATE TABLE `t_company_vehicle_type_config_batterys`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `StorageBattery` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '储能装置电池包（箱）型号',
  `NumStorageBattery` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '	储能装置电池包(箱)数量',
  `t_company_vehicle_type_configs_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_vehicle_config_battorys_t_company_vehicle_type_configs_id_fk`(`t_company_vehicle_type_configs_id`) USING BTREE,
  CONSTRAINT `t_company_vehicle_type_config_batterys_ibfk_1` FOREIGN KEY (`t_company_vehicle_type_configs_id`) REFERENCES `t_company_vehicle_type_configs` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 132 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_vehicle_type_config_motors
-- ----------------------------
DROP TABLE IF EXISTS `t_company_vehicle_type_config_motors`;
CREATE TABLE `t_company_vehicle_type_config_motors`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `MotorModel` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电机型号',
  `MotorPosition` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电机位置',
  `MotorCoolingMode` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动电机冷却方式',
  `RateVolt` int(11) NULL DEFAULT NULL COMMENT '额定电压(v)',
  `PeakPower` int(11) NULL DEFAULT NULL COMMENT '峰值功率(kwh)',
  `MotorRotateMaxSpeed` int(11) NULL DEFAULT NULL COMMENT '驱动电机最高转速(r/min)',
  `MotorPeakTorque` int(11) NULL DEFAULT NULL COMMENT '驱动电机峰值转矩(Nm)',
  `MotorMaxCurrent` int(11) NULL DEFAULT NULL COMMENT '驱动电机最大工作电流(A)',
  `MotorMaxOutTorque` int(11) NULL DEFAULT NULL COMMENT '驱动电机最大输出转矩(Nm)',
  `t_company_vehicle_type_configs_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `motors__configs_id_fk`(`t_company_vehicle_type_configs_id`) USING BTREE,
  CONSTRAINT `t_company_vehicle_type_config_motors_ibfk_1` FOREIGN KEY (`t_company_vehicle_type_configs_id`) REFERENCES `t_company_vehicle_type_configs` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 64 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_vehicle_type_config_terminals
-- ----------------------------
DROP TABLE IF EXISTS `t_company_vehicle_type_config_terminals`;
CREATE TABLE `t_company_vehicle_type_config_terminals`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `TerminalModel` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '	终端型号',
  `TerminalBrand` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '	终端品牌',
  `t_company_vehicle_type_configs_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_company_vehicle_type_config_terminals_configs_id_fk`(`t_company_vehicle_type_configs_id`) USING BTREE,
  CONSTRAINT `t_company_vehicle_type_config_terminals_ibfk_1` FOREIGN KEY (`t_company_vehicle_type_configs_id`) REFERENCES `t_company_vehicle_type_configs` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_company_vehicle_type_configs
-- ----------------------------
DROP TABLE IF EXISTS `t_company_vehicle_type_configs`;
CREATE TABLE `t_company_vehicle_type_configs`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `VehicleType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆类型',
  `VehicleConfig` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆配置名称',
  `SpecificationNo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '规约号',
  `MaxSpeed` int(11) NULL DEFAULT NULL COMMENT '最高车速（KM/H）',
  `BatteryType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电池种类',
  `PowerType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动方式',
  `DrivingMotorType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动电机种类',
  `MileageMonitorMethod` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '续驶里程监测方式(工况法,等速法)',
  `ElecVehicleMileage` int(11) NULL DEFAULT NULL COMMENT '电动汽车续驶里程(km)',
  `RateVolt` int(11) NULL DEFAULT NULL COMMENT '额定电压(v)',
  `TotalElecStorage` int(11) NULL DEFAULT NULL COMMENT '总储电量(kwh)',
  `BatteryConnectMode` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电池包(箱)串并联方式',
  `t_company_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_company_vehicle_type_configs_t_companyinfo_companyId_fk`(`t_company_id`) USING BTREE,
  CONSTRAINT `t_company_vehicle_type_configs_ibfk_1` FOREIGN KEY (`t_company_id`) REFERENCES `t_companyinfo` (`companyId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_companyinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_companyinfo`;
CREATE TABLE `t_companyinfo`  (
  `companyId` int(11) NOT NULL AUTO_INCREMENT COMMENT '公司主键ID.',
  `companyName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公司名称',
  `companyAddr` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公司地址',
  `adminName` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '管理员姓名',
  `adminTel` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '联系电话',
  `level` int(11) NOT NULL COMMENT '1-表示总公司;2-表示分公司',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '对应mauth_dept的主键',
  `operatorName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '运营单位名称',
  `unifiedSocialCreditCode` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '统一社会信用代码',
  `operatorAddr` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单位地址',
  `operatorTel` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '座机',
  PRIMARY KEY (`companyId`) USING BTREE,
  UNIQUE INDEX `companyName`(`companyName`, `deptId`) USING BTREE,
  INDEX `idx_deptid_company`(`deptId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6757 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '公司信息' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_config
-- ----------------------------
DROP TABLE IF EXISTS `t_config`;
CREATE TABLE `t_config`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `global` tinyint(1) NOT NULL DEFAULT 1 COMMENT '全局-1，私有-0',
  `userid` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '用户id',
  `version` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '版本号',
  `projectid` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '0' COMMENT '项目id',
  `key` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '关键字',
  `val` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '值',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 70 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_connectorinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_connectorinfo`;
CREATE TABLE `t_connectorinfo`  (
  `connectorID` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备接口主键',
  `equipmentID` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备主键',
  `connectorName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '接口名称',
  `connectorType` tinyint(4) NULL DEFAULT NULL COMMENT '设备类型\r\n1：家用插座（模式2）\r\n2：交流接口插座（模式3，连接方式B ）\r\n3：交流接口插头（带枪线，模式3，连接方式C）\r\n4：直流接口枪头（带枪线，模式4）',
  `power` decimal(10, 1) NULL DEFAULT NULL COMMENT '额定功率 单位KW',
  `ratedCurrent` int(10) NULL DEFAULT NULL COMMENT '额定电流 单位A',
  `voltageUpperLimits` int(10) NULL DEFAULT NULL COMMENT '额定电压上限',
  `voltageLowerLimits` int(10) NULL DEFAULT NULL COMMENT '额定电压下限',
  `parkNo` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车位号',
  PRIMARY KEY (`connectorID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '设备接口信息表(20190510)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_connectorstatusinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_connectorstatusinfo`;
CREATE TABLE `t_connectorstatusinfo`  (
  `connectorID` varchar(26) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电设备接口编码',
  `status` int(2) NULL DEFAULT NULL COMMENT '充电设备接口状态\r\n0：离网\r\n1：空闲\r\n2：占用（未充电）\r\n3：占用（充电中）\r\n4：占用（预约锁定）\r\n255：故障',
  `currentA` int(11) NULL DEFAULT 0 COMMENT 'A相电流单位：A，默认：0 含直流(输出)',
  `currentB` int(11) NULL DEFAULT 0 COMMENT 'B相电流单位：A',
  `currentC` int(11) NULL DEFAULT 0 COMMENT 'C相电流单位：A',
  `voltageA` int(11) NULL DEFAULT 0 COMMENT 'A相电压单位：V，默认：0含直流(输出)',
  `voltageB` int(11) NULL DEFAULT 0 COMMENT 'B相电压单位：V',
  `voltageC` int(11) NULL DEFAULT 0 COMMENT 'C相电压单位：V',
  `parkStatus` int(11) NULL DEFAULT NULL COMMENT '车位状态\r\n0：未知\r\n10：空闲\r\n50：占用',
  `lockStatus` int(11) NULL DEFAULT NULL COMMENT '地锁状态\r\n0：未知\r\n10：已解锁\r\n50：已上锁',
  `SOC` decimal(10, 1) NULL DEFAULT 0.0 COMMENT '剩余电量 默认：0'
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '充电设备接口状态表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_data_forward_fields_map
-- ----------------------------
DROP TABLE IF EXISTS `t_data_forward_fields_map`;
CREATE TABLE `t_data_forward_fields_map`  (
  `taskId` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `customer_field` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `my_field` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reserved1` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reserved2` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `reserved4` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_data_redirector_job
-- ----------------------------
DROP TABLE IF EXISTS `t_data_redirector_job`;
CREATE TABLE `t_data_redirector_job`  (
  `job_id` int(20) NOT NULL COMMENT '定时任务唯一标识',
  `data_param_id` int(8) NULL DEFAULT NULL COMMENT '数据转发参数',
  `time` date NOT NULL,
  `status` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `success_number` int(20) NULL DEFAULT NULL COMMENT '预留字段3',
  `fail_number` int(20) NULL DEFAULT NULL COMMENT '预留字段4',
  `reserve_1` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '预留字段1',
  `reserve_2` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '预留字段2',
  PRIMARY KEY (`job_id`) USING BTREE,
  UNIQUE INDEX `idx_job_id`(`job_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_data_transfer_task_detail
-- ----------------------------
DROP TABLE IF EXISTS `t_data_transfer_task_detail`;
CREATE TABLE `t_data_transfer_task_detail`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `taskId` int(11) NULL DEFAULT NULL COMMENT '任务主表主键',
  `orgEn` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '原始偏移量英文',
  `aliasEn` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '原始偏移量英文别名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_data_transfer_taskinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_data_transfer_taskinfo`;
CREATE TABLE `t_data_transfer_taskinfo`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `taskName` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '任务名称',
  `dept_id` int(20) NULL DEFAULT NULL COMMENT '机构id',
  `forwardType` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '转发方式',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `target_config` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '转发参数',
  `sysDatas` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '转发数据量',
  `state` int(4) NULL DEFAULT NULL COMMENT '状态 0正常/1异常/2停止',
  `lineIds` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路',
  `vehicleIds` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '转发车辆列表',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '数据转发格式',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 119 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '数据转发任务配置表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_datamonitor
-- ----------------------------
DROP TABLE IF EXISTS `t_datamonitor`;
CREATE TABLE `t_datamonitor`  (
  `vehicledeviceid` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '设备ID',
  `type` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '异常类型',
  `statdate` timestamp(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `time1` timestamp(0) NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '开始时间或终端时间',
  `time2` timestamp(0) NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '结束时间或现实时间',
  `name` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '数据项',
  `value` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '数据值',
  `standardrange` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '标准区间'
) ENGINE = InnoDB AUTO_INCREMENT = 21904 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_daytimesheet
-- ----------------------------
DROP TABLE IF EXISTS `t_daytimesheet`;
CREATE TABLE `t_daytimesheet`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `month` int(11) NULL DEFAULT NULL COMMENT '月份',
  `time_sheet` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '时间片名称：day-白天，night-夜晚',
  `begin_time` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '开始时刻',
  `end_time` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '结束时刻',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 25 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '白天与夜晚时间范围，用于判断“驾驶行为-夜晚不开大灯”' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_departplan
-- ----------------------------
DROP TABLE IF EXISTS `t_departplan`;
CREATE TABLE `t_departplan`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `vehicleid` int(11) NULL DEFAULT NULL,
  `shiftNo` int(11) NULL DEFAULT NULL COMMENT '车次号',
  `lineid` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '班线',
  `startstop` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '始发站',
  `endstop` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '终点站',
  `planDepartTime` datetime(0) NULL DEFAULT NULL COMMENT '计划发车时间',
  `planArrivalTime` datetime(0) NULL DEFAULT NULL COMMENT '计划到达时间',
  `runtime` int(11) NULL DEFAULT NULL COMMENT '运行时间（分钟）',
  `planman` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '计划人 ',
  `plantime` date NULL DEFAULT NULL COMMENT '计划时间',
  `vehicleNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌号',
  `actualDepartTime` datetime(0) NULL DEFAULT NULL COMMENT '实际发车时间',
  `actualArrivalTime` datetime(0) NULL DEFAULT NULL COMMENT '实际到达时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_vid`(`vehicleid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 589 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '发车计划' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_driverinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_driverinfo`;
CREATE TABLE `t_driverinfo`  (
  `driverid` int(11) NOT NULL AUTO_INCREMENT,
  `drivername` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机姓名',
  `drivercard` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '身份识别卡',
  `licensedate` date NULL DEFAULT NULL COMMENT '驾驶证有效日期',
  `entrantdate` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '入职时间',
  `vehicleid` int(11) NULL DEFAULT NULL COMMENT '对应车辆id，关联得到车牌号',
  `weixinbind` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '是否绑定微信',
  `safedrivetime` varchar(11) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '安全驾驶时间',
  `drivingyears` varchar(11) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '驾龄',
  `accidentonce` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '是否出重大事故',
  `deptid` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '所属机构',
  `drivertel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电话',
  `drivercid` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '身份证',
  `empNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '工号',
  PRIMARY KEY (`driverid`) USING BTREE,
  UNIQUE INDEX `drivercid_UNIQUE`(`drivercid`) USING BTREE,
  UNIQUE INDEX `drivercard_UNIQUE`(`drivercard`) USING BTREE,
  UNIQUE INDEX `drivername`(`drivername`, `drivercard`, `drivercid`, `empNo`) USING BTREE,
  UNIQUE INDEX `drivercard`(`drivercard`) USING BTREE,
  UNIQUE INDEX `drivercid`(`drivercid`) USING BTREE,
  INDEX `drivername_2`(`drivername`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1519 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '司机信息' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_driving_style_advice
-- ----------------------------
DROP TABLE IF EXISTS `t_driving_style_advice`;
CREATE TABLE `t_driving_style_advice`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `actionTypeDesc` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `times1` int(11) NULL DEFAULT NULL,
  `times2` int(11) NULL DEFAULT NULL,
  `advice` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT -1,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 39 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_driving_style_assess
-- ----------------------------
DROP TABLE IF EXISTS `t_driving_style_assess`;
CREATE TABLE `t_driving_style_assess`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `score_a` int(11) NULL DEFAULT 500,
  `score_b` int(11) NULL DEFAULT 1000,
  `score_c` int(11) NULL DEFAULT 2000,
  `score_d` int(11) NULL DEFAULT 3000,
  `deptId` int(11) NULL DEFAULT -1,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_driving_style_violation
-- ----------------------------
DROP TABLE IF EXISTS `t_driving_style_violation`;
CREATE TABLE `t_driving_style_violation`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `actionTypeDesc` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `times1` int(11) NULL DEFAULT NULL,
  `times2` int(11) NULL DEFAULT NULL,
  `style1` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `style2` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `style3` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deptId` int(11) NOT NULL DEFAULT -1,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 39 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_electricvehicleana
-- ----------------------------
DROP TABLE IF EXISTS `t_electricvehicleana`;
CREATE TABLE `t_electricvehicleana`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NOT NULL DEFAULT '' COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `soc` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'SOC',
  `buscurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(电池)总线电流',
  `chargercurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(电池)总线充电电流',
  `mcvoltagefront` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器前端电压',
  `mcvoltagerear` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器后端电压',
  `mccurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器电流',
  `motorspeed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机转速',
  `mctemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器温度',
  `opivoltageout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输入电流',
  `opitemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器温度',
  `apivoltageout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输入电流',
  `apitemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机制动踏板位置',
  `bmvoltagehigh` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池模块最低电压',
  `motortemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机温度（待删除，替换为motor_temp）',
  `batterycount` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包总数',
  `batterysn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包包号',
  `batterymaxtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包最高温度',
  `batterymintemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高压电池电流',
  `remainenergy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '剩余能量',
  `batterytotalvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池总电压',
  `singlehightemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最高温度',
  `singlelowtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最低温度',
  `singlehighvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最高电压',
  `singlelowvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最低电压',
  `insulresisvalue` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调控制器life',
  `vin` varchar(17) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `motorbusbarcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机母线电流',
  `consumeperday` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '日总电耗',
  `bmslifesignal` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'BMS life信号',
  `singlemaxvolt1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1节数',
  `singleminvolt1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1',
  `singleminvolt1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1节数',
  `singlemaxtemp1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度1箱号',
  `singlemintemp1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度1箱号',
  `bmstotalconsume` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(BMS)总电耗',
  `controllerlife` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '整车控制器life',
  `cursingdistance` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '续航里程',
  `motortorque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机扭矩',
  `motorpower` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机功率',
  `motorcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机电流',
  `dcoutvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输出电压',
  `dcoutcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输出电流',
  `dcinvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输入电压',
  `dcradiatortemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC散热器温度',
  `dccheckcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC故障代码',
  `mcucheckcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'MCU系统故障代码',
  `cumulativechargtime` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NOT NULL COMMENT '累计充电时间',
  `outputenergy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '输出能量',
  `vehiclestate` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '整车状态',
  `cumulative_charging_energy` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计充电电能',
  `cumulative_discharge_energy` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计放电电能',
  `energy_meter_life_value` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电能表Life值',
  `insulation_module_life_value` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘模块Life值',
  `insulation_tester_program_version_number` varchar(80) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘检测仪程序版本号',
  `battery_max_temp_inside_the_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池最高温度箱内位置',
  `the_lowest_temp_battery` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池最低温度箱内位置',
  `battery_manufacturer` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池厂家',
  `battery_area` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池地区',
  `battery_pack_information` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组信息',
  `battery_cell_voltage_low_threshold` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体电压低阀值',
  `battery_cell_voltage_high_threshold` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体电压高阀值',
  `battery_pack_temp_low_threshold` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组温度低阀值',
  `battery_pack_temp_high_threshold` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组温度高阀值',
  `total_battery_temp_node_number` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池总温度节点数',
  `battery_rated_voltage` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池额定电压',
  `battery_rated_energy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池额定能量',
  `battery_residual_energy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池剩余能量',
  `num_cells_1_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第1箱单体电池数量',
  `num_cells_2_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第2箱单体电池数量',
  `num_cells_3_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第3箱单体电池数量',
  `num_cells_4_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第4箱单体电池数量',
  `num_cells_5_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第5箱单体电池数量',
  `num_cells_6_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第6箱单体电池数量',
  `num_cells_7_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第7箱单体电池数量',
  `num_cells_8_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第8箱单体电池数量',
  `num_cells_9_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第9箱单体电池数量',
  `num_cells_10_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第10箱单体电池数量',
  `num_cells_11_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第11箱单体电池数量',
  `num_cells_12_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第12箱单体电池数量',
  `num_cells_13_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第13箱单体电池数量',
  `num_cells_14_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第14箱单体电池数量',
  `num_cells_15_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第15箱单体电池数量',
  `num_cells_16_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第16箱单体电池数量',
  `num_battery_temp_nodes_1_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第1箱电池温度节点数量',
  `num_battery_temp_nodes_2_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第2箱电池温度节点数量',
  `num_battery_temp_nodes_3_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第3箱电池温度节点数量',
  `num_battery_temp_nodes_4_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第4箱电池温度节点数量',
  `num_battery_temp_nodes_5_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第5箱电池温度节点数量',
  `num_battery_temp_nodes_6_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第6箱电池温度节点数量',
  `num_battery_temp_nodes_7_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第7箱电池温度节点数量',
  `num_battery_temp_nodes_8_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第8箱电池温度节点数量',
  `num_battery_temp_nodes_9_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第9箱电池温度节点数量',
  `num_battery_temp_nodes_10_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第10箱电池温度节点数量',
  `num_battery_temp_nodes_11_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第11箱电池温度节点数量',
  `num_battery_temp_nodes_12_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第12箱电池温度节点数量',
  `num_battery_temp_nodes_13_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第13箱电池温度节点数量',
  `num_battery_temp_nodes_14_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第14箱电池温度节点数量',
  `num_battery_temp_nodes_15_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第15箱电池温度节点数量',
  `num_battery_temp_nodes_16_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第16箱电池温度节点数量',
  `battery_box_1_max_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱1最高温度',
  `battery_box_2_max_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱2最高温度',
  `battery_box_3_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱3最高温度',
  `battery_box_4_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱4最高温度',
  `battery_box_5_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱5最高温度',
  `battery_box_6_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱6最高温度',
  `battery_box_7_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱7最高温度',
  `battery_box_8_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱8最高温度',
  `battery_box_9_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱9最高温度',
  `battery_box_10_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱10最高温度',
  `battery_box_11_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱11最高温度',
  `battery_box_12_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱12最高温度',
  `max_allowed_out_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最大允许放电电流',
  `max_allowed_feedback_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最大允许回馈电流',
  `oil_pump_u_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出U相电压',
  `oil_pump_u_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出U相电流',
  `oil_pump_v_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出V相电压',
  `oil_pump_v_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出V相电流',
  `oil_pump_w_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出W相电压',
  `oil_pump_w_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出W相电流',
  `gas_pump_u_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出U相电压',
  `gas_pump_u_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出U相电流',
  `gas_pump_v_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出V相电压',
  `gas_pump_v_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出V相电流',
  `gas_pump_w_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出W相电压',
  `gas_pump_w_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出W相电流',
  `motor_rated_power` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机额定功率',
  `drive_motor_id` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机序号',
  `motor_peak_torque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机峰值转矩',
  `avg_hundred_miles_ele` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均百公里电耗',
  `motor_controller_life` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器life',
  `single_battery_total` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体总数',
  `battery_pack_system_break_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组系统故障信息',
  `external_charge_duration` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '外接充电间隔时间',
  `battery_pack_manufacture_year` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（年）',
  `battery_pack_manufacture_month` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（月）',
  `battery_pack_manufacture_day` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（日）',
  `turn_assist_out_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力输出电压',
  `turn_assist_out_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力输出电流',
  `turn_assist_heart_signal` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力心跳信号',
  `turn_assist_radiator_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力散热器温度',
  `turn_assist_break_code` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力故障代码',
  `battery_producer_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池生产商代码',
  `battery_type_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池类型代码',
  `battery_cool_way_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池冷却方式代码',
  `motor_rated_voltage` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机额定电压',
  `motor_max_work_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最大工作电流',
  `motor_peak_power` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机峰值功率',
  `motor_cool_way` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机冷却方式',
  `motor_max_speed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最高转速',
  `drive_motor_total` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机个数',
  `motor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机温度',
  `motor_max_out_torque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最大输出转矩',
  `battery_allowed_min_soc` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组允许最小使用SOC',
  PRIMARY KEY (`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '电车模拟量信息表' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_electricvehicleana2
-- ----------------------------
DROP TABLE IF EXISTS `t_electricvehicleana2`;
CREATE TABLE `t_electricvehicleana2`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NOT NULL DEFAULT '' COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '系统时间',
  `all_single_voltage` longtext CHARACTER SET ascii COLLATE ascii_bin NULL COMMENT '单体电压',
  `all_singlet_temperature` longtext CHARACTER SET ascii COLLATE ascii_bin NULL COMMENT '单体温度',
  `vin` varchar(17) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `obligate` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '预留',
  `obligate2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '预留2',
  `insert_time` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6) COMMENT '录入时间',
  PRIMARY KEY (`vehicledeviceid`, `time`, `insert_time`) USING BTREE,
  INDEX `time`(`time`) USING BTREE,
  INDEX `insert_time`(`insert_time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '电车模拟量信息表2' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_electricvehicleana3
-- ----------------------------
DROP TABLE IF EXISTS `t_electricvehicleana3`;
CREATE TABLE `t_electricvehicleana3`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车载设备id',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `total_stow_energy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计回充能量',
  `single_stow_energy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单次回充能量',
  UNIQUE INDEX `uix_devid_time_elecana`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车模拟量信息表3（电车模拟量1.4协议扩展）' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_electricvehicleana_copy2
-- ----------------------------
DROP TABLE IF EXISTS `t_electricvehicleana_copy2`;
CREATE TABLE `t_electricvehicleana_copy2`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `soc` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'SOC',
  `buscurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(电池)总线电流',
  `chargercurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(电池)总线充电电流',
  `mcvoltagefront` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器前端电压',
  `mcvoltagerear` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器后端电压',
  `mccurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器电流',
  `bcvoltageout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电机输出电压',
  `bccurrentout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电机输出电流',
  `bccurentin` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电机输入电流',
  `bctemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电机温度',
  `motorspeed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机转速',
  `mctemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器温度',
  `opivoltageout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器输入电流',
  `opitemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵逆变器温度',
  `apivoltageout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器输入电流',
  `apitemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机制动踏板位置',
  `batteryentemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱内环境最高温度',
  `bmvoltagehigh` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池模块最低电压',
  `bmtemplow` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池模块最低温度',
  `wiremesh` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '线网单次累计耗电量',
  `currentrecycle` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '回收电流',
  `motortemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机温度（待删除，替换为motor_temp）',
  `batterycount` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包总数',
  `batterysn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包包号',
  `batterymaxtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包最高温度',
  `batterymintemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高压电池电流',
  `remainenergy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '剩余能量',
  `batterytotalvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池总电压',
  `singlehightemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最高温度',
  `singlelowtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最低温度',
  `singlehighvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最高电压',
  `singlelowvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体最低电压',
  `insulresisvalue` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调控制器life',
  `vin` varchar(17) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `cpcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电桩充电电流',
  `cpvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电桩充电电压',
  `cptemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电桩充电温度',
  `cpcheckcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电桩故障代码',
  `chargecardinfo` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电卡信息',
  `chargeduration` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电持续时间',
  `motorbusbarcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机母线电流',
  `busbaroutcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(电池)总线放电电流',
  `consumeperday` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '日总电耗',
  `bmslifesignal` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'BMS life信号',
  `singlemaxvolt1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压1节数',
  `singlemaxvolt2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压2',
  `singlemaxvolt2sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压2箱号',
  `singlemaxvolt2count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压2节数',
  `singlemaxvolt3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压3',
  `singlemaxvolt3sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压3箱号',
  `singlemaxvolt3count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压3节数',
  `singlemaxvolt4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压4',
  `singlemaxvolt4sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压4箱号',
  `singlemaxvolt4count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最高单体电压4节数',
  `singleminvolt1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1',
  `singleminvolt1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压1节数',
  `singleminvolt2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压2',
  `singleminvolt2sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压2箱号',
  `singleminvolt2count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压2节数',
  `singleminvolt3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压3',
  `singleminvolt3sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压3箱号',
  `singleminvolt3count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压3节数',
  `singleminvolt4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压4',
  `singleminvolt4sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压4箱号',
  `singleminvolt4count` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最低单体电压4节数',
  `singlemaxtemp1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度1箱号',
  `singlemaxtemp2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度2',
  `singlemaxtemp2sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度2箱号',
  `singlemaxtemp3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度3',
  `singlemaxtemp3sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度3箱号',
  `singlemaxtemp4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度4',
  `singlemaxtemp4sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度4箱号',
  `singlemintemp1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度1箱号',
  `singlemintemp2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度2',
  `singlemintemp2sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度2箱号',
  `singlemintemp3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度3',
  `singlemintemp3sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度3箱号',
  `singlemintemp4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度4',
  `singlemintemp4sn` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度4箱号',
  `bmstotalconsume` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(BMS)总电耗',
  `batchargevolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池充电电压',
  `batchargemaxvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(充电时)最高单体电压',
  `batchargeminvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '(充电时)最低单体电压',
  `vcucode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'VCU系统故障码',
  `controllerlife` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '整车控制器life',
  `cursingdistance` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '续航里程',
  `transducerbusvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动变频器母线电压',
  `motortorque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机扭矩',
  `motorpower` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机功率',
  `motorcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机电流',
  `dcstartcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC启动指令',
  `acstartcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-AC（空压机）启动指令',
  `dcoutvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输出电压',
  `dcoutcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输出电流',
  `dcinvolt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC输入电压',
  `dcradiatortemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC散热器温度',
  `dccheckcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC故障代码',
  `mcucheckcode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'MCU系统故障代码',
  `soerelayeq` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'SOE电容电量',
  `chargeeq` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电电量',
  `generatorcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机电流',
  `pdbtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NOT NULL COMMENT '配电盒温度',
  `cumulativechargtime` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NOT NULL COMMENT '累计充电时间',
  `outputenergy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '输出能量',
  `vehiclestate` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '整车状态',
  `cumulative_charging_energy` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计充电电能',
  `cumulative_discharge_energy` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计放电电能',
  `energy_meter_life_value` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电能表Life值',
  `insulation_module_life_value` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘模块Life值',
  `insulation_tester_program_version_number` varchar(80) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘检测仪程序版本号',
  `battery_max_temp_inside_the_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池最高温度箱内位置',
  `the_lowest_temp_battery` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池最低温度箱内位置',
  `battery_manufacturer` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池厂家',
  `battery_area` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池地区',
  `battery_pack_information` varchar(40) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组信息',
  `battery_cell_voltage_low_threshold` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体电压低阀值',
  `battery_cell_voltage_high_threshold` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体电压高阀值',
  `battery_pack_temp_low_threshold` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组温度低阀值',
  `battery_pack_temp_high_threshold` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组温度高阀值',
  `total_battery_temp_node_number` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池总温度节点数',
  `battery_rated_voltage` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池额定电压',
  `battery_rated_energy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池额定能量',
  `battery_residual_energy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池剩余能量',
  `num_cells_1_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第1箱单体电池数量',
  `num_cells_2_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第2箱单体电池数量',
  `num_cells_3_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第3箱单体电池数量',
  `num_cells_4_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第4箱单体电池数量',
  `num_cells_5_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第5箱单体电池数量',
  `num_cells_6_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第6箱单体电池数量',
  `num_cells_7_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第7箱单体电池数量',
  `num_cells_8_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第8箱单体电池数量',
  `num_cells_9_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第9箱单体电池数量',
  `num_cells_10_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第10箱单体电池数量',
  `num_cells_11_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第11箱单体电池数量',
  `num_cells_12_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第12箱单体电池数量',
  `num_cells_13_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第13箱单体电池数量',
  `num_cells_14_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第14箱单体电池数量',
  `num_cells_15_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第15箱单体电池数量',
  `num_cells_16_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第16箱单体电池数量',
  `num_battery_temp_nodes_1_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第1箱电池温度节点数量',
  `num_battery_temp_nodes_2_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第2箱电池温度节点数量',
  `num_battery_temp_nodes_3_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第3箱电池温度节点数量',
  `num_battery_temp_nodes_4_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第4箱电池温度节点数量',
  `num_battery_temp_nodes_5_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第5箱电池温度节点数量',
  `num_battery_temp_nodes_6_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第6箱电池温度节点数量',
  `num_battery_temp_nodes_7_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第7箱电池温度节点数量',
  `num_battery_temp_nodes_8_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第8箱电池温度节点数量',
  `num_battery_temp_nodes_9_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第9箱电池温度节点数量',
  `num_battery_temp_nodes_10_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第10箱电池温度节点数量',
  `num_battery_temp_nodes_11_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第11箱电池温度节点数量',
  `num_battery_temp_nodes_12_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第12箱电池温度节点数量',
  `num_battery_temp_nodes_13_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第13箱电池温度节点数量',
  `num_battery_temp_nodes_14_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第14箱电池温度节点数量',
  `num_battery_temp_nodes_15_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第15箱电池温度节点数量',
  `num_battery_temp_nodes_16_box` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '第16箱电池温度节点数量',
  `battery_box_1_max_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱1最高温度',
  `battery_box_2_max_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱2最高温度',
  `battery_box_3_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱3最高温度',
  `battery_box_4_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱4最高温度',
  `battery_box_5_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱5最高温度',
  `battery_box_6_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱6最高温度',
  `battery_box_7_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱7最高温度',
  `battery_box_8_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱8最高温度',
  `battery_box_9_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱9最高温度',
  `battery_box_10_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱10最高温度',
  `battery_box_11_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱11最高温度',
  `battery_box_12_max_temp` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池箱12最高温度',
  `max_allowed_out_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最大允许放电电流',
  `max_allowed_feedback_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '最大允许回馈电流',
  `battery_management_program_version` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池管理系统程序版本信息',
  `singlemaxtemp1count` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最高温度1节数',
  `singlemintemp1count` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组最低温度1节数',
  `oil_pump_u_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出U相电压',
  `oil_pump_u_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出U相电流',
  `oil_pump_v_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出V相电压',
  `oil_pump_v_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出V相电流',
  `oil_pump_w_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出W相电压',
  `oil_pump_w_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出W相电流',
  `gas_pump_u_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出U相电压',
  `gas_pump_u_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出U相电流',
  `gas_pump_v_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出V相电压',
  `gas_pump_v_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出V相电流',
  `gas_pump_w_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出W相电压',
  `gas_pump_w_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出W相电流',
  `assist_current_1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '辅助电流1',
  `assist_current_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '辅助电流2',
  `motor_rated_power` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机额定功率',
  `drive_motor_id` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机序号',
  `motor_peak_torque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机峰值转矩',
  `avg_hundred_miles_ele` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均百公里电耗',
  `motor_controller_life` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机控制器life',
  `single_battery_total` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池单体总数',
  `battery_pack_system_break_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组系统故障信息',
  `external_charge_duration` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '外接充电间隔时间',
  `battery_pack_manufacture_year` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（年）',
  `battery_pack_manufacture_month` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（月）',
  `battery_pack_manufacture_day` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组生产日期（日）',
  `turn_assist_out_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力输出电压',
  `turn_assist_out_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力输出电流',
  `turn_assist_heart_signal` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力心跳信号',
  `turn_assist_radiator_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力散热器温度',
  `turn_assist_break_code` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力故障代码',
  `battery_producer_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池生产商代码',
  `battery_type_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池类型代码',
  `battery_cool_way_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池冷却方式代码',
  `motor_rated_voltage` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机额定电压',
  `motor_max_work_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最大工作电流',
  `motor_peak_power` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机峰值功率',
  `motor_cool_way` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机冷却方式',
  `motor_max_speed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最高转速',
  `drive_motor_total` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机个数',
  `motor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机温度',
  `motor_max_out_torque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机最大输出转矩',
  `battery_allowed_min_soc` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池组允许最小使用SOC',
  UNIQUE INDEX `uix_devid_time_elecana`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '电车模拟量信息表' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_120800` VALUES LESS THAN (1578787200) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_121600` VALUES LESS THAN (1578816000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_130000` VALUES LESS THAN (1578844800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_electricvehiclestateinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_electricvehiclestateinfo`;
CREATE TABLE `t_electricvehiclestateinfo`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车载终端设备号',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0),
  `electricbrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电制动',
  `resistancebrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电阻制动',
  `networkmode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线网模式',
  `auxiliarymode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅源模式',
  `limpstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '跛行状态',
  `offstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '脱网状态',
  `drive` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动',
  `motorreversal` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机反转',
  `work` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运行',
  `halt` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '停机',
  `motormontrolfanopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器风扇开',
  `motorfanopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机风扇开',
  `highpressurecharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '高压充电',
  `chargeconnectindicate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电连接器指示',
  `breakstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '制动踏板状态',
  `engineready` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力系统就绪',
  `emergencypoweroff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '紧急下电请求状态',
  `ecarcurrentstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电车当前状态',
  `balancestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '均衡状态',
  `batterycoolstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池冷却状态',
  `bmsstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS状态',
  `mcucheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU自检状态',
  `bmscheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS自检状态',
  `bmschargestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS充电状态',
  `bmsplugstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS充电插头连接状态',
  `VCUhighvoltorder` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU上高压指令',
  `ecarwholestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆当前状态(废弃)',
  `ecarctrlmutexstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车控制器系统互锁状态',
  `vcucheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU自检状态',
  `bmsdismissstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS解除状态命令',
  `oilpumpenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵使能',
  `airpumpenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵使能',
  `dcdcenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC使能',
  `acenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调使能',
  `chargerelaystat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电继电器状态',
  `mainmotorrelaystat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '主电机继电器状态',
  `batteryheatstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池加热状态',
  `dcdcstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC状态',
  `dcacctrlstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-AC控制器工作状态',
  `bmsp1olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第1箱在线状态',
  `bmsp2olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第2箱在线状态',
  `bmsp3olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第3箱在线状态',
  `bmsp4olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第4箱在线状态',
  `bmsp5olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第5箱在线状态',
  `bmsp6olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第6箱在线状态',
  `bmsp7olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第7箱在线状态',
  `bmsp8olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第8箱在线状态',
  `bmsp9olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第9箱在线状态',
  `bmsp10olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第10箱在线状态',
  `bmsp11olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第11箱在线状态',
  `bmsp12olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第12箱在线状态',
  `bmsp13olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第13箱在线状态',
  `bmsp14olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第14箱在线状态',
  `bmsp15olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第15箱在线状态',
  `bmsp16olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第16箱在线状态',
  `bmsp17olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第17箱在线状态',
  `bmsp18olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第18箱在线状态',
  `bmsp19olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第19箱在线状态',
  `bmsp20olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第20箱在线状态',
  `bmsp21olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第21箱在线状态',
  `bmsp22olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第22箱在线状态',
  `bmsp23olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第23箱在线状态',
  `bmsp24olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第24箱在线状态',
  `bmsp25olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第25箱在线状态',
  `bmsp26olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第26箱在线状态',
  `bmsp27olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第27箱在线状态',
  `bmsp28olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第28箱在线状态',
  `bmsp29olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第29箱在线状态',
  `bmsp30olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第30箱在线状态',
  `bmsp31olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)第31箱在线状态',
  `bmsp32olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第32箱在线状态',
  `vin` varchar(17) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `K10waterCoolingToucher` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K10水冷系统接触器',
  `bmsSbAverageOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS电池均衡激活(废弃)',
  `bmsReady` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS准备就绪',
  `dischargeToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '放电接触器已闭合',
  `highVolToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压接触器闭合',
  `highVolToucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压接触器断开',
  `toucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '接触器吸合',
  `toucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '接触器断开',
  `chargeToucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电接触器断开',
  `chargeToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电接触器闭合',
  `powerSbCharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力蓄电池充电',
  `bmsPassiveControlMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '低压转向工作状态',
  `chargeTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电指示',
  `evSwitch` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'EV开关',
  `highVolPreCharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压预充电',
  `assiChargerOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅助充电机开启',
  `assiChargerOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅助充电机闭合',
  `highVolPowerOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压电源接通',
  `turnAssi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '转向助力',
  `powerModeTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力模式指示',
  `bmsOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS掉线',
  `vcuOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU掉线',
  `K11ElectricAirConditionerToucher` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K11电空调接触器',
  `MCUbreakStatus` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU故障状态',
  `inverterModuleOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '逆变模块起机(废弃)',
  `choppingModuleOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '斩波模块起机(废弃)',
  `dischargeRelayConnected` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '放电继电器粘连',
  `turnInputOverVol` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '转向输入过压',
  `detectorBonding` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '检测仪搭铁(废弃)',
  `increaseMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '增程模式',
  `capTouchActive` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电容接触器有效',
  `eqKeepMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电量保持模式',
  `chargeError` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电错误',
  `checkTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '诊断指示(废弃)',
  `highVolInterLock` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压互锁状态',
  `impactSignal` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '碰撞信号状态',
  `input_cutoff` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC输入切断',
  `output_cutoff` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC输出切断',
  `battery_box_1_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱1冷却开关',
  `battery_box_2_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱2冷却开关',
  `battery_box_3_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱3冷却开关',
  `battery_box_4_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱4冷却开关',
  `battery_box_5_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱5冷却开关',
  `battery_box_6_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱6冷却开关',
  `battery_box_7_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱7冷却开关',
  `battery_box_8_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱8冷却开关',
  `battery_box_9_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱9冷却开关',
  `battery_box_10_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱10冷却开关',
  `battery_box_11_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱11冷却开关',
  `battery_box_12_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱12冷却开关',
  `battery_box_13_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱13冷却开关',
  `battery_box_14_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱14冷却开关',
  `battery_box_15_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱15冷却开关',
  `battery_box_16_cooling_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱16冷却开关',
  `battery_box_1_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱1加热开关',
  `battery_box_2_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱2加热开关',
  `battery_box_3_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱3加热开关',
  `battery_box_4_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱4加热开关',
  `battery_box_5_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱5加热开关',
  `battery_box_6_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱6加热开关',
  `battery_box_7_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱7加热开关',
  `battery_box_8_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱8加热开关',
  `battery_box_9_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱9加热开关',
  `battery_box_10_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱10加热开关',
  `battery_box_11_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱11加热开关',
  `battery_box_12_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱12加热开关',
  `battery_box_13_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '电池箱13加热开关',
  `battery_box_14_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱14加热开关',
  `battery_box_15_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱15加热开关',
  `battery_box_16_heating_switch` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱16加热开关',
  `accelerate_pedal_status` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '加速踏板状态',
  `pre_charge_overtime` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预充超时',
  `obligate` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预留',
  `BMS_request` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS请求',
  `K2MainMotorContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K2主电机接触器',
  `K1MainMotorPreChargeContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K1主电机预充接触器',
  `K3ElectricAccessoryContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K3电附件接触器',
  `K4AccessoryPreChargeContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K4附件预充接触器',
  `K5ElectricDefrostingContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K5电除霜接触器',
  `K6Charge1Contactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K6充电1接触器',
  `K7Charge2Contactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K7充电2接触器',
  `K8BatteryMainloopContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K8电池主回路接触器',
  `K9BatteryTMSContactor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'K9电池TMS接触器',
  `S1HighVoltageQuickBreak` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'S1高压急断',
  PRIMARY KEY (`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elevst`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车专有状态信息表' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_energyinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_energyinfo`;
CREATE TABLE `t_energyinfo`  (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `energyType` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '能源类型:oil-燃油，gas-燃气，ele-电',
  `subType` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '能源子类型',
  `energyVolume` int(10) NULL DEFAULT NULL COMMENT '加油/汽/电量',
  `energyCarNo` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '卡号',
  `balance` int(10) NULL DEFAULT NULL COMMENT '余额',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_devNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 624 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_equipmentinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_equipmentinfo`;
CREATE TABLE `t_equipmentinfo`  (
  `equipmentID` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备主键',
  `stationID` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电站主键',
  `equipmentName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备名称',
  `equipmentModel` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备型号',
  `productionDate` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备生产日期',
  `equipmentType` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备类型\r\n1：直流设备\r\n2：交流设备\r\n3：交直流一体设备',
  `power` decimal(10, 1) NULL DEFAULT NULL COMMENT '额定功率 单位KW',
  `nationalStandard` int(4) NULL DEFAULT NULL COMMENT '国家标准\r\n1：2011\r\n2：2015\r\n99：其他',
  `equipmentLng` decimal(10, 6) NULL DEFAULT NULL COMMENT '充电设备经度',
  `equipmentLat` decimal(10, 6) NULL DEFAULT NULL COMMENT '充电设备纬度',
  `manufacturerID` varchar(9) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备生产商组织结构代码',
  `manufacturerName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备生产商名称',
  PRIMARY KEY (`equipmentID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '充电设备信息表(20190510)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_fault_push
-- ----------------------------
DROP TABLE IF EXISTS `t_fault_push`;
CREATE TABLE `t_fault_push`  (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '故障推送id',
  `task_explain` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '任务名称',
  `fushDeptId` int(11) NULL DEFAULT NULL COMMENT '推送报警机构id',
  `weChatState` int(2) NOT NULL DEFAULT 0 COMMENT '0/开启 1/关闭 2/异常',
  `emailState` int(2) NOT NULL DEFAULT 0 COMMENT '邮箱推送状态 0/关闭 1/开启 2/异常',
  `pushTime` int(5) NULL DEFAULT 1 COMMENT '推送频率',
  `user_id` int(11) NULL DEFAULT NULL COMMENT '推送角色',
  `dept_id` int(11) NULL DEFAULT NULL COMMENT '推送任务所属机构id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_user_task`(`user_id`) USING BTREE,
  INDEX `fk_lineDept_mauth`(`fushDeptId`) USING BTREE,
  INDEX `fk_dept`(`dept_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 202 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_fencegps
-- ----------------------------
DROP TABLE IF EXISTS `t_fencegps`;
CREATE TABLE `t_fencegps`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lineId` int(11) NULL DEFAULT NULL,
  `gps_x` double NULL DEFAULT NULL,
  `gps_y` double NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_header
-- ----------------------------
DROP TABLE IF EXISTS `t_header`;
CREATE TABLE `t_header`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `verison` varchar(11) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT '项目版本号',
  `projectid` varchar(11) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT '项目id',
  `tablename` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '表名称',
  `fieldname` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '表字段',
  `fieldtypeid` int(11) NOT NULL DEFAULT 1 COMMENT '字段类型',
  `inputshow` tinyint(1) NOT NULL DEFAULT 1 COMMENT '输入可见',
  `viewshow` tinyint(1) NULL DEFAULT 1 COMMENT '列表可见',
  `viewfield` tinyint(1) NOT NULL DEFAULT 1 COMMENT '视图专有字段',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 741 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_int
-- ----------------------------
DROP TABLE IF EXISTS `t_int`;
CREATE TABLE `t_int`  (
  `x` int(11) NOT NULL,
  PRIMARY KEY (`x`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_line_max_speed
-- ----------------------------
DROP TABLE IF EXISTS `t_line_max_speed`;
CREATE TABLE `t_line_max_speed`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `line_dept_id` int(11) NOT NULL COMMENT '线路机构ID',
  `site_id_s` int(11) NOT NULL COMMENT '区间开始站点ID',
  `site_id_e` int(11) NULL DEFAULT NULL COMMENT '站点区间结束ID',
  `speed` int(11) NULL DEFAULT NULL COMMENT '区域限速值',
  `time` int(11) NULL DEFAULT NULL COMMENT '标准时长',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `t_line_max_speed_id_uindex`(`id`) USING BTREE,
  INDEX `t_line_max_speed_t_siteinfo_siteId_fk_2`(`site_id_e`) USING BTREE,
  INDEX `t_line_max_speed_t_siteinfo_siteId_fk`(`site_id_s`) USING BTREE,
  INDEX `t_line_max_speed_mauth_dept_dept_id_fk`(`line_dept_id`) USING BTREE,
  CONSTRAINT `t_line_max_speed_ibfk_1` FOREIGN KEY (`line_dept_id`) REFERENCES `mauth_dept` (`dept_id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `t_line_max_speed_ibfk_2` FOREIGN KEY (`site_id_s`) REFERENCES `t_siteinfo` (`siteId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `t_line_max_speed_ibfk_3` FOREIGN KEY (`site_id_e`) REFERENCES `t_siteinfo` (`siteId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 3451 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '站点限速配置表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_line_site_gps_info
-- ----------------------------
DROP TABLE IF EXISTS `t_line_site_gps_info`;
CREATE TABLE `t_line_site_gps_info`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `index` int(11) NULL DEFAULT NULL,
  `line_dept_id` int(11) NULL DEFAULT NULL COMMENT '线路机构id',
  `loginitude` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '经度',
  `latitude` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '纬度',
  `distance` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '累积折线距离',
  `station_nme` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '*',
  `direct` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '1 上行 2 下行',
  `pre_station` int(11) NULL DEFAULT NULL,
  `next_station` int(11) NULL DEFAULT NULL,
  `station_index` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 59992 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '站点gps信息' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_lineinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_lineinfo`;
CREATE TABLE `t_lineinfo`  (
  `lineId` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键线路的机构ID',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `lineAddr` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线路地址',
  `lineAdmin` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线路管理员',
  `siteNum` int(45) NULL DEFAULT NULL COMMENT '线路总站数',
  `adminTel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '管理员电话',
  `lineType` int(10) NULL DEFAULT 1 COMMENT '线路类型：0-环线，1-非环线',
  `onPrice` int(11) NULL DEFAULT NULL COMMENT '起步价格',
  `upDistance` int(11) NULL DEFAULT NULL COMMENT '上行里程',
  `downDistance` int(11) NULL DEFAULT NULL COMMENT '下行里程',
  `upSiteNum` int(11) NULL DEFAULT NULL COMMENT '上行站点数',
  `downSiteNum` int(11) NULL DEFAULT NULL COMMENT '下行站点数',
  `parkLotGPSX` decimal(10, 7) NULL DEFAULT NULL COMMENT '车场位置',
  `parkLotGPSY` decimal(10, 7) NULL DEFAULT NULL,
  `deptId` int(11) NULL DEFAULT NULL COMMENT '对应mauth_dept的主键',
  PRIMARY KEY (`lineId`) USING BTREE,
  UNIQUE INDEX `lineName`(`lineName`, `deptId`) USING BTREE,
  INDEX `idx_deptId`(`deptId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5041 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '线路信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_mauth_dept
-- ----------------------------
DROP TABLE IF EXISTS `t_mauth_dept`;
CREATE TABLE `t_mauth_dept`  (
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公司名称',
  `companyDeptId` int(11) NULL DEFAULT NULL COMMENT '机构id',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '子公司名称',
  `subCompanyDeptId` int(11) NULL DEFAULT NULL COMMENT '子机构id',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '组名称',
  `groupDeptId` int(11) NULL DEFAULT NULL COMMENT '组id',
  `lineName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `lineDeptId` int(11) NULL DEFAULT NULL COMMENT '线路id',
  INDEX `idx_lineDeptId`(`lineDeptId`) USING BTREE,
  INDEX `idx_lineName`(`lineName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5317657 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_monthfortrend
-- ----------------------------
DROP TABLE IF EXISTS `t_monthfortrend`;
CREATE TABLE `t_monthfortrend`  (
  `cnt` tinyint(4) NULL DEFAULT NULL COMMENT '月份'
) ENGINE = InnoDB AUTO_INCREMENT = 25 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '趋势图辅助表 静态' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_operationorinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_operationorinfo`;
CREATE TABLE `t_operationorinfo`  (
  `operatorID` varchar(9) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '运营商主键',
  `operatorName` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商名称',
  `operatorTel1` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商电话1',
  `operatorTel2` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商电话2',
  `operatorRegAddress` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商注册地址',
  `operatorNote` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`operatorID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '运营商信息表(20190510)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_orderinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_orderinfo`;
CREATE TABLE `t_orderinfo`  (
  `orderID` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '订单主键',
  `operatorID` varchar(9) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商ID',
  `connectorID` varchar(26) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电设备接口编码',
  `startChargeSeq` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电订单号（同一运营商内唯一）',
  `startTime` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '本次充电开始时间',
  `endTime` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '本次充电结束时间',
  `elect` decimal(10, 1) NULL DEFAULT NULL COMMENT '本次充电电量',
  `money` decimal(10, 2) NULL DEFAULT NULL COMMENT '本次充电消费总金额',
  `electMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '本次充电电费总金额',
  `serviceMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '本次充电服务费金额',
  `payChannel` tinyint(4) NULL DEFAULT NULL COMMENT '支付方式\r\n1：支付宝\r\n2：微信支付\r\n3：交通卡\r\n4：预充卡\r\n5：银联\r\n6：其他自定义',
  `userChargeType` tinyint(4) NULL DEFAULT NULL COMMENT '用户发起充电类型\r\n1:运营商APP注册用户\r\n2:运营商卡用户\r\n3:其他',
  `mobileNumber` int(11) NULL DEFAULT NULL COMMENT '用户手机\r\n若用户发起充电类型为APP，用户手机号必填号',
  `cuspElect` decimal(10, 1) NULL DEFAULT NULL COMMENT '尖阶段电量 单位kWh，精度0.1',
  `cuspElectPrice` decimal(10, 6) NULL DEFAULT NULL COMMENT '尖电价价格 单位：元',
  `cuspServicePrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '尖服务费单价 单位：元',
  `cuspMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '尖总金额 单位：元',
  `cuspElectMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '尖充电金额 单位：元',
  `cuspServiceMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '尖服务费金额 单位：元',
  `peakElect` decimal(10, 1) NULL DEFAULT NULL COMMENT '峰阶段电量 单位kWh，精度0.1',
  `peakElectPrice` decimal(10, 6) NULL DEFAULT NULL COMMENT '峰电价价格 单位：元',
  `peakServicePrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '峰服务费单价 单位：元',
  `peakMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '峰总金额 单位：元',
  `peakElectMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '峰充电金额 单位：元',
  `peakServiceMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '峰服务费金额 单位：元',
  `flatElect` decimal(10, 1) NULL DEFAULT NULL COMMENT '平阶段电量 单位kWh，精度0.1',
  `flatElectPrice` decimal(10, 6) NULL DEFAULT NULL COMMENT '平阶段电价 单位：元',
  `flatServicePrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '平阶段服务费单价 单位：元',
  `flatMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '平总金额  单位：元',
  `flatElectMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '平充电金额 单位：元',
  `flatServiceMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '平服务费金额 单位:元',
  `valleyElect` decimal(10, 1) NULL DEFAULT NULL COMMENT '谷阶段电量 单位kWh，精度0.1',
  `valleyElectPrice` decimal(10, 6) NULL DEFAULT NULL COMMENT '谷阶段电价  单位：元',
  `valleyServicePrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '谷阶段服务费单价 单位：元',
  `valleyMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '谷总金额 单位：元',
  `valleyElectMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '谷充电金额 单位：元',
  `valleyServiceMoney` decimal(10, 2) NULL DEFAULT NULL COMMENT '谷服务费金额 单位：元',
  `paymentAmount` decimal(10, 2) NULL DEFAULT NULL COMMENT '支付金额 单位：元',
  `payTime` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '支付时间',
  `stopReason` tinyint(4) NULL DEFAULT NULL COMMENT '充电结束原因0：用户手动停止充电；\r\n1：客户归属地运营商平台停止充电；\r\n2：BMS停止充电；\r\n3：充电机设备故障；\r\n4：连接器断开；\r\n5～99：自定义',
  `discountInfo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '优惠信息描述 描述支付的相关优惠信息，如优惠券，折扣等',
  `confirmResult` int(8) NULL DEFAULT NULL COMMENT '订单结果 0成功 1争议交易 2~99自定义',
  PRIMARY KEY (`orderID`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '充电订单信息表(20190510)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_outlinedates
-- ----------------------------
DROP TABLE IF EXISTS `t_outlinedates`;
CREATE TABLE `t_outlinedates`  (
  `vehicledeviceid` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆设备ID',
  `vehicleNo` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '线路机构ID',
  `lineName` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `outlinedates` int(11) NULL DEFAULT NULL COMMENT '连续离线天数',
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期'
) ENGINE = InnoDB AUTO_INCREMENT = 9225 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_partition_test
-- ----------------------------
DROP TABLE IF EXISTS `t_partition_test`;
CREATE TABLE `t_partition_test`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆状态信息2编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间'
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 4
(PARTITION `p_20200101` VALUES LESS THAN (1577894400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200102` VALUES LESS THAN (1577980800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200103` VALUES LESS THAN (1578067200) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `pdefault` VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_payinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_payinfo`;
CREATE TABLE `t_payinfo`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `companyId` int(11) NULL DEFAULT NULL,
  `companyName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公司名称',
  `payTime` date NULL DEFAULT NULL COMMENT '缴费时间',
  `payAmount` int(32) NULL DEFAULT NULL COMMENT '缴费金额',
  `payUnit` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '缴费单位',
  `payDiscount` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '缴费折扣',
  `receiveUnit` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '收款单位',
  `payee` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '收款人',
  `doneVehicles` tinyint(1) NULL DEFAULT 0 COMMENT '是否完成选车',
  `hasVehiclesNumber` int(11) NULL DEFAULT NULL COMMENT '已添加缴费车辆',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 86 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_paymentvehicles
-- ----------------------------
DROP TABLE IF EXISTS `t_paymentvehicles`;
CREATE TABLE `t_paymentvehicles`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',
  `paymentId` int(11) NULL DEFAULT NULL COMMENT 'payment_info表的主键',
  `vehicleNo` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `lastTime` date NULL DEFAULT NULL COMMENT '车辆上次缴费到期日期',
  `newTime` date NULL DEFAULT NULL COMMENT '车辆本次到期日期',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `vehicleId`(`vehicleNo`) USING BTREE,
  INDEX `paymentId`(`paymentId`) USING BTREE,
  CONSTRAINT `t_paymentvehicles_ibfk_1` FOREIGN KEY (`paymentId`) REFERENCES `t_payinfo` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '缴费的车辆明细' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_proalarmlevelinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_proalarmlevelinfo`;
CREATE TABLE `t_proalarmlevelinfo`  (
  `deptId` int(11) NOT NULL DEFAULT 0 COMMENT '总公司deptid',
  `proalarminfo` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`deptId`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '公司预警类型设置表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_siteinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_siteinfo`;
CREATE TABLE `t_siteinfo`  (
  `siteId` int(11) NOT NULL AUTO_INCREMENT,
  `lineId` int(11) NULL DEFAULT NULL COMMENT '线路id',
  `siteName` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '站点名称',
  `gps_x` double NULL DEFAULT NULL COMMENT '经度',
  `gps_y` double NULL DEFAULT NULL COMMENT '纬度',
  `type` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '站点类型:0-环线，1-上行，2-下行',
  `order` int(10) NULL DEFAULT NULL COMMENT '站点先后顺序',
  PRIMARY KEY (`siteId`) USING BTREE,
  UNIQUE INDEX `siteName`(`siteName`, `type`, `lineId`) USING BTREE,
  UNIQUE INDEX `siteName_2`(`siteName`, `type`, `lineId`, `order`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5102 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '站点信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_stat_vehiclesn_or_vehicleno
-- ----------------------------
DROP TABLE IF EXISTS `t_stat_vehiclesn_or_vehicleno`;
CREATE TABLE `t_stat_vehiclesn_or_vehicleno`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `stat_type` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆显示方式',
  `speed_type` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '超速分析类型',
  `deptid` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 112 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_state_analog_alarm_info
-- ----------------------------
DROP TABLE IF EXISTS `t_state_analog_alarm_info`;
CREATE TABLE `t_state_analog_alarm_info`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bigsys` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大分类',
  `smallsys` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '小分类',
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型 状态 模拟 报警',
  `ename` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '英文名',
  `cname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '中文名',
  `key` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `show` tinyint(4) NULL DEFAULT 1,
  `selected` tinyint(4) NULL DEFAULT 0,
  `dept_id` int(11) NULL DEFAULT -1 COMMENT '机构名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1122 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_stationinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_stationinfo`;
CREATE TABLE `t_stationinfo`  (
  `stationID` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '充电站主键',
  `operatorID` varchar(9) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运营商主键',
  `equipmentOwnerID` varchar(9) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备所属方组织机构代码',
  `stationName` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电站名称',
  `countryCode` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电站国家代码 CN中国',
  `areaCode` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '充电站省市辖区编码',
  `stationLng` decimal(10, 6) NULL DEFAULT NULL COMMENT '充电站经度',
  `stationLat` decimal(10, 6) NULL DEFAULT NULL COMMENT '充电站纬度',
  `address` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '详细地址',
  `stationTel` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '站点电话',
  `serviceTel` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '服务电话',
  `stationType` int(4) NULL DEFAULT NULL COMMENT '站点类型 1公共 50个人 100公交专用 101环卫专用 102物流专用 103出租车专用',
  `stationStatus` int(4) NULL DEFAULT NULL COMMENT '站点状态 \r\n0：未知\r\n1：建设中\r\n5：关闭下线\r\n6：维护中\r\n50：正常使用',
  `parkNums` int(10) NULL DEFAULT NULL COMMENT '可停放进行充电的车位总数，默认：0 未知',
  `openAllDay` int(4) NULL DEFAULT NULL COMMENT '是否全天开放 0否 1是',
  `busineHours` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '营业时间',
  `parkingFee` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '停车费描述',
  `supportOrder` int(4) NULL DEFAULT NULL COMMENT '是否支持预约 0否1是',
  `remark` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  `siteGuide` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '站点引导',
  `construction` int(4) NULL DEFAULT NULL COMMENT '建设场所\r\n1：居民区\r\n2：公共机构\r\n3：企事业单位\r\n4：写字楼\r\n5：工业园区\r\n6：交通枢纽\r\n7：大型文体设施\r\n8：城市绿地\r\n9：大型建筑配建停车场\r\n10：路边停车位\r\n11：城际高速服务区\r\n255：其他',
  `matchCars` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '使用车型描述 0出租车',
  `parkInfo` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车位楼层及数量描述',
  `payment` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '支付方式 0刷卡 1线上 2现金',
  PRIMARY KEY (`stationID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '充电站信息表(20190510)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_system_version
-- ----------------------------
DROP TABLE IF EXISTS `t_system_version`;
CREATE TABLE `t_system_version`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `can_version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'can协议版本',
  `create_time` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `file_path` varchar(300) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '协议文件位置（word）',
  `state` tinyint(1) NULL DEFAULT NULL COMMENT '协议状态 0无效 1有效',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'can协议版本表-zzf(该表自增字段由2开始)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_tableheader
-- ----------------------------
DROP TABLE IF EXISTS `t_tableheader`;
CREATE TABLE `t_tableheader`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键',
  `tableName` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '表名',
  `field` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字段名',
  `english` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字段对应英文名',
  `chinese` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字段对应中文名',
  `show` tinyint(2) NOT NULL COMMENT '是否在前端显示：0-不显示，1-显示，2-前端定义',
  `show1` tinyint(2) NOT NULL DEFAULT 1,
  `noRepeat` int(3) NOT NULL COMMENT '客户输入是否需要判重：0-否，1-是',
  `keyType` tinyint(2) NOT NULL COMMENT '类型：1-主键，2-外键，3-其它',
  `insertDept` tinyint(1) NULL DEFAULT 0 COMMENT '是否为机构表头插入位置',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5599 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '据管理用来定义要在前端显示的字段' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_test
-- ----------------------------
DROP TABLE IF EXISTS `t_test`;
CREATE TABLE `t_test`  (
  `stat_date` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `ele` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `vehicleNo` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 19023 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `typename` enum('ENUM','NUMBER','TIME','STRING','DEPT','VEHICLE','DRIVER','URIINPUT') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT 'STRING' COMMENT '类型名称',
  `enumname` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '枚举名称',
  `enum` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '枚举值列表',
  `min` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '最小数值',
  `max` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '最大数值',
  `precision` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '精确到小数位',
  `datetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '\"yyyy-mm-dd HH:MM:SS\"' COMMENT '日期时间类型',
  `regx` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '验证正则表达式',
  `default` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '默认值',
  `option` tinyint(1) NULL DEFAULT 1 COMMENT '是否必填',
  `level` int(11) NULL DEFAULT NULL COMMENT '机构level',
  `uri` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '验证api',
  `findKey` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '验证参数关键字',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_user_setting
-- ----------------------------
DROP TABLE IF EXISTS `t_user_setting`;
CREATE TABLE `t_user_setting`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `protocolVersion` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆协议版本',
  `setting` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1014 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_user_setting_order
-- ----------------------------
DROP TABLE IF EXISTS `t_user_setting_order`;
CREATE TABLE `t_user_setting_order`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `protocol_version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车辆协议版本 公司+协议+mt车型（guiyang_1.5_5）',
  `order_setting` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '用户开关设置json',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '新版用户开关设置表-zzf-20200529' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicle_batterys
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicle_batterys`;
CREATE TABLE `t_vehicle_batterys`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `stoBatteryType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '储能装置电池包(箱)型号',
  `stoBatteryCode` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '储能装置电池包(箱)编码',
  `BatteryPosition` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'position',
  `t_vehicleinfo_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_vehicle_batterys_t_vehicleinfo_vehicleId_fk`(`t_vehicleinfo_id`) USING BTREE,
  CONSTRAINT `t_vehicle_batterys_ibfk_1` FOREIGN KEY (`t_vehicleinfo_id`) REFERENCES `t_vehicleinfo` (`vehicleId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicle_current_postion
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicle_current_postion`;
CREATE TABLE `t_vehicle_current_postion`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `vehicleDeviceId` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `pre_station` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `next_station` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `scale` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `norms_direct` int(11) NULL DEFAULT NULL,
  `norm_index` int(11) NULL DEFAULT NULL,
  `direct` int(11) NULL DEFAULT NULL,
  `created_at` datetime(0) NULL DEFAULT NULL,
  `updated_at` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 149 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车辆当前位置' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicle_fault_code
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicle_fault_code`;
CREATE TABLE `t_vehicle_fault_code`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `variableId` int(11) NULL DEFAULT NULL COMMENT '变量主键-关联t_vehiclevariableinfo-id',
  `filepath` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文件位置',
  `vehicletype` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车型',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车型与故障码文件对照表-zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicle_monitor_info
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicle_monitor_info`;
CREATE TABLE `t_vehicle_monitor_info`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bigsysc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大分类中文',
  `bigsys` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大分类英文',
  `smallsysc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '小分类中文',
  `smallsys` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '小分类,英文',
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型 状态 模拟 报警',
  `ename` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '英文名 前端用',
  `cname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '中文名  前端用',
  `key` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `show` enum('0','1') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '1',
  `selected` tinyint(4) NULL DEFAULT 0,
  `deviceid` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '-1' COMMENT '车辆设备号',
  `index` int(11) NULL DEFAULT NULL COMMENT '小系统内顺序',
  `xml_smallsys` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'xml里的 系统名称英文',
  `xml_smallsysc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'xml里的系统名称中文',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8686 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '整车监控显示实时信息的字段' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicle_terminals
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicle_terminals`;
CREATE TABLE `t_vehicle_terminals`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `terminalType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '终端型号',
  `iccid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'ICCID',
  `t_vehicleinfo_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_vehicle_terminals_t_vehicleinfo_vehicleId_fk`(`t_vehicleinfo_id`) USING BTREE,
  CONSTRAINT `t_vehicle_terminals_ibfk_1` FOREIGN KEY (`t_vehicleinfo_id`) REFERENCES `t_vehicleinfo` (`vehicleId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarminfo
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarminfo`;
CREATE TABLE `t_vehiclealarminfo`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `deviceId` bigint(16) UNSIGNED ZEROFILL NULL DEFAULT NULL COMMENT '设备号',
  `alarmTypeId` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警等级',
  `alarmValue` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '当时状态',
  `alarmTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `lcd` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `createTime` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '新增时间',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_time_alarm`(`alarmTime`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9490793533 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarminfo2
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarminfo2`;
CREATE TABLE `t_vehiclealarminfo2`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `deviceId` bigint(16) UNSIGNED ZEROFILL NULL DEFAULT NULL COMMENT '设备号',
  `alarmTypeId` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警等级',
  `alarmValue` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '当时状态',
  `alarmTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `lcd` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_time_alarm`(`alarmTime`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29580675532 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarminfo3
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarminfo3`;
CREATE TABLE `t_vehiclealarminfo3`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `deviceId` bigint(16) UNSIGNED ZEROFILL NULL DEFAULT NULL COMMENT '设备号',
  `alarmTypeId` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型',
  `alarmLevel` int(11) NULL DEFAULT NULL COMMENT '报警等级',
  `alarmValue` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '当时状态',
  `alarmTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `lcd` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_time_alarm`(`alarmTime`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9021603 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype`;
CREATE TABLE `t_vehiclealarmtype`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE,
  INDEX `idx_parenttype`(`parenttype`) USING BTREE,
  INDEX `idx_alarmtypename`(`alarmtypename`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype2
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype2`;
CREATE TABLE `t_vehiclealarmtype2`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属系统类型主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE,
  INDEX `idx_parentType`(`parenttype`) USING BTREE,
  INDEX `idx_alarmtypename`(`alarmtypename`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype2_copy
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype2_copy`;
CREATE TABLE `t_vehiclealarmtype2_copy`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属系统类型主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype2_v1420190321f
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype2_v1420190321f`;
CREATE TABLE `t_vehiclealarmtype2_v1420190321f`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属系统类型主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype3
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype3`;
CREATE TABLE `t_vehiclealarmtype3`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE,
  INDEX `parenttype`(`parenttype`) USING BTREE,
  INDEX `alarmtypename`(`alarmtypename`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表(表3-201905300940)' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype_copy
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype_copy`;
CREATE TABLE `t_vehiclealarmtype_copy`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclealarmtype_v1420190321f
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclealarmtype_v1420190321f`;
CREATE TABLE `t_vehiclealarmtype_v1420190321f`  (
  `alarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类',
  PRIMARY KEY (`alarmtypeid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleanalog_offset
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleanalog_offset`;
CREATE TABLE `t_vehicleanalog_offset`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `offset_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '偏移量名称',
  `offset_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '偏移量内容',
  `state_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '状态码',
  `battery_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '电池信息配置展示量',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 407 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '偏移量新表（新版）' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleanalog_offset_copy
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleanalog_offset_copy`;
CREATE TABLE `t_vehicleanalog_offset_copy`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `offset_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '偏移量名称',
  `offset_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '偏移量内容',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 401 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '偏移量新表（新版）' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleanaloginfo
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleanaloginfo`;
CREATE TABLE `t_vehicleanaloginfo`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NOT NULL DEFAULT '',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `datatypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0),
  `speed` int(11) NULL DEFAULT NULL COMMENT '车速',
  `engine` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机转速',
  `batteryvoltage` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '蓄电池电压',
  `oilpressure` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '机油压力',
  `coolanttemper` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '冷却液温度(发动机水温)',
  `pressure1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压1',
  `pressure2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压2',
  `enginecompartmenttemper` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机舱温度',
  `insidetemper` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车内温度',
  `outsidetemper` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车外温度',
  `residualfuel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '剩余油量',
  `fullfuel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '满箱油量',
  `tyrelayout` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎布局',
  `tyreposition` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置1',
  `tyretemper` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度1',
  `shortmileage` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '短累计里程',
  `mileage` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计里程',
  `cumulativeenginerevolution` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计发动机转数',
  `fuelconsumptrate` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '燃料使用率',
  `fueleconomy` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '瞬时燃油经济性',
  `totalfueluse` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均燃油经济性',
  `urealevel` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '尿素液位',
  `sim` varchar(20) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'SIM',
  `io` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'IO量',
  `singletotalgasuse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均百公里气耗',
  `totalgasuse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '总气耗',
  `realtimegasuse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '瞬时气耗',
  `allgasuse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '累计燃气消耗量',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `gpsangle` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Angle',
  `gpsx1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X1（936）',
  `gpsy1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y1',
  `gpsangle1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Angle1',
  `singletotalfueluse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均百公里油耗',
  `realtimegfueluse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '瞬时油耗',
  `totalfuelcost` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '总油耗',
  `totalenergyuse` varchar(45) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '总能耗',
  `drive_system_cooling_request` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动系统冷却请求',
  `drive_motor_failure_1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机故障1  ',
  `drive_motor_failure_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机故障2  ',
  `drive_motor_failure_3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机故障3  ',
  `drive_motor_failure_4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动电机故障4  ',
  `getonnum` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '当次上车人数',
  `downnum` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '当次下车人数',
  `state` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '接收上下车人数标志位',
  `ltyali` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `settemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '设定温度',
  `compreloadratio` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '压缩机负载比例',
  `wateroutputtemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '热管理系统_出水温度',
  `waterbacktemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '热管理系统_回水温度',
  `radwaterintemp1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器进水1温度',
  `radwaterintemp2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器进水2温度',
  `positiveresistance` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '正对地绝缘电阻值',
  `negativeresistance` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '负对地绝缘电阻值',
  `gaspumpspeed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵电机转速',
  `gaspumpvol` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵控制器电压',
  `gaspumpcurent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵控制器电流',
  `oilpumpspeed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵电机转速',
  `oilpumpvol` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵控制器电压',
  `oilpumpcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵控制器电流',
  `stpumpcurrent` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向泵三相电流',
  `stpumpvol` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向泵三相电压',
  `stpumpmotortemp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向泵电机温度',
  `stpumpspeed` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向泵转速',
  `hydralvalsignal` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '液压值信号',
  `motrealtorque` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机实际转矩',
  `air_pressure_1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压(12bar)',
  `air_pressure_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压2(12bar)',
  `air_pressure_3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压3(12bar)',
  `air_pressure_4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气压4(12bar)',
  `adas_fault_code` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ADAS错误码值',
  `adas_limit_speed_mark_auto_recognition` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ADAS限速标志自动识别',
  `car_distance_monitor` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车距监测',
  `conditioner_total_consume` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调总能耗',
  `conditioner_in_volt` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调输入电压',
  `conditioner_in_current` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调输入总电流',
  `conditioner_present_consume` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调瞬时功耗',
  `lf_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳左前传感器温度',
  `rf_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳右前传感器温度',
  `lm_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳左中传感器温度',
  `rm_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳右中传感器温度',
  `lb_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳左后传感器温度',
  `rb_brake_caliper_sensor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动钳右后传感器温度',
  `local_alarm_temp_setting` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '本地告警温度设置',
  `fog_monitor_temp` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度1',
  `fog_monitor_product_num` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号1',
  `br_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后右雷达信息',
  `brm_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后右中雷达信息',
  `blm_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后左中雷达信息',
  `bl_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后左雷达信息',
  `left_side_back__radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左侧后雷达信息',
  `right_side_back_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右侧后雷达信息',
  `fl_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前左雷达信息',
  `flm_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前左中雷达信息',
  `frm_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前右中雷达信息',
  `fr_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前右雷达信息',
  `right_side_front_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右侧前雷达信息',
  `left_side_front_radar_info` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左侧前雷达信息',
  `fog_monitor_temp_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度2',
  `fog_monitor_temp_3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度3',
  `fog_monitor_temp_4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度4',
  `fog_monitor_temp_5` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度5',
  `fog_monitor_temp_6` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度6',
  `fog_monitor_temp_7` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度7',
  `fog_monitor_temp_8` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器温度8',
  `fog_monitor_product_num_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号2',
  `fog_monitor_product_num_3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号3',
  `fog_monitor_product_num_4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号4',
  `fog_monitor_product_num_5` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号5',
  `fog_monitor_product_num_6` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号6',
  `fog_monitor_product_num_7` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号7',
  `fog_monitor_product_num_8` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器厂家编号8',
  `fog_temp_alarm_life_signal_1` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号1',
  `fog_temp_alarm_life_signal_2` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号2',
  `fog_temp_alarm_life_signal_3` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号3',
  `fog_temp_alarm_life_signal_4` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号4',
  `fog_temp_alarm_life_signal_5` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号5',
  `fog_temp_alarm_life_signal_6` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号6',
  `fog_temp_alarm_life_signal_7` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号7',
  `fog_temp_alarm_life_signal_8` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾及温度预警life信号8',
  `tyrepressure1` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力1',
  `tyreposition2` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置2',
  `tyretemper2` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度2',
  `tyrepressure2` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力2',
  `tyreposition3` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置3',
  `tyretemper3` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度3',
  `tyrepressure3` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力3',
  `tyreposition4` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置4',
  `tyretemper4` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度4',
  `tyrepressure4` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力4',
  `tyreposition5` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置5',
  `tyretemper5` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度5',
  `tyrepressure5` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力5',
  `tyreposition6` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置6',
  `tyretemper6` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度6',
  `tyrepressure6` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力6',
  `tyreposition7` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置7',
  `tyretemper7` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度7',
  `tyrepressure7` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力7',
  `tyreposition8` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置8',
  `tyretemper8` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度8',
  `tyrepressure8` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力8',
  `tyreposition9` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置9',
  `tyretemper9` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度9',
  `tyrepressure9` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力9',
  `tyreposition10` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置10',
  `tyretemper10` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度10',
  `tyrepressure10` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力10',
  `tyreposition11` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置11',
  `tyretemper11` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度11',
  `tyrepressure11` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力11',
  `tyreposition12` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置12',
  `tyretemper12` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度12',
  `tyrepressure12` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力12',
  `tyreposition13` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置13',
  `tyretemper13` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度13',
  `tyrepressure13` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力13',
  `tyreposition14` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置14',
  `tyretemper14` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度14',
  `tyrepressure14` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力14',
  `tyreposition15` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置15',
  `tyretemper15` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度15',
  `tyrepressure15` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力15',
  `tyreposition16` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎位置16',
  `tyretemper16` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎温度16',
  `tyrepressure16` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎压力16',
  `insulationbreakdowncode` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘故障代码',
  `driverNo` varchar(64) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机编号',
  `generatortemperature` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机温度',
  `generatorcontrollertemperature` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机控制器温度',
  `enginetargetthrottle` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机目标油门',
  `engineactualthrottle` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机实际油门',
  `engineintaketemperature` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机进气温度',
  `compressorspeed` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '压缩机转速',
  `condensingfanpwm` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '冷凝风机PWM占空比',
  `compressorlife` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '压缩机LIFE值',
  `conditionmaxwork` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调最大工作负荷',
  `conditionactualwork` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调实际工作负荷',
  `airconditiondcside` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调直流侧电流',
  `averagevoltage` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '单体平均电压',
  `chargingstandtemperature1` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电座温度1',
  `chargingstandtemperature2` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电座温度2',
  `chargingstandtemperature3` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电座温度3',
  `chargingstandtemperature4` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电座温度4',
  `engineloadrate` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机负荷率',
  `enginetargetspeed` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机目标转速',
  `enginetargettorque` varchar(5) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机目标转矩',
  `equipmentwarehousetemperature` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '设备仓温度',
  `batterycompartmenttemperature` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '蓄电池舱温',
  `batteryoutwatertemperature` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '锂电池组出水温度',
  `batteryinwatertemperature` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '锂电池组进水温度',
  `averagepowerconsumption` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '平均电耗',
  `instantpowerconsumption` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '瞬时电耗',
  `faultcode` varchar(32) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高压系统故障代码',
  PRIMARY KEY (`vehicledeviceid`, `time`) USING BTREE,
  INDEX `IDX_VE_MI_TI`(`vehicledeviceid`, `mileage`, `time`) USING BTREE,
  INDEX `idx_time_vellog`(`time`) USING BTREE,
  INDEX `idx_vid_speed_analog`(`vehicledeviceid`, `speed`) USING BTREE,
  INDEX `idx_time_engine_vid`(`vehicledeviceid`, `engine`, `time`) USING BTREE,
  INDEX `idx_speed_time`(`speed`, `time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_vehicleanaloginfo_offset
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleanaloginfo_offset`;
CREATE TABLE `t_vehicleanaloginfo_offset`  (
  `vehicleid` int(10) NOT NULL,
  `speed` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '车速',
  `engine` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '发动机转速',
  `batteryvoltage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '蓄电池电压',
  `oilpressure` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '机油压力',
  `coolanttemper` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '冷却液温度',
  `pressure1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压1',
  `pressure2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压2',
  `pressure3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压3',
  `pressure4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压4',
  `enginecompartmenttemper` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '发动机舱温度',
  `insidetemper` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '车内温度',
  `outsidetemper` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '车外温度',
  `residualfuel` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '剩余油量',
  `fullfuel` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '满箱油量',
  `tyrelayout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎布局',
  `tyreposition` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎位置',
  `tyretemper` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎温度',
  `tyrepressurehigh` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎压力高4位',
  `ltyali` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎压力(前端需要，整合高4位和低8位)',
  `tyrepressurelow` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '轮胎压力低8位',
  `shortmileage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '短累计里程',
  `mileage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计里程',
  `cumulativeenginerevolution` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计发动机转数',
  `fuelconsumptrate` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '燃料使用率',
  `fueleconomy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '瞬时燃料经济性',
  `totalfueluse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '平均燃油经济性',
  `urealevel` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '尿素液位',
  `singletotalfueluse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '平均百公里油耗',
  `hundredfueluse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '百公里油耗',
  `realhundredfueluse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '瞬时百公里油耗',
  `realtimegfueluse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '瞬时油耗',
  `allgasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计燃气消耗量',
  `singletotalgasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '平均百公里气耗',
  `hundredgasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '百公里气耗',
  `realtimegasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '瞬时气耗',
  `realhundredgasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '瞬时百公里气耗',
  `residualgas` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '剩余气量',
  `totalgasuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '总气耗',
  `totalfuelcost` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '总油耗',
  `totalenergyuse` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '总能耗',
  `soc` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'SOC',
  `buscurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '(电池)总线电流',
  `chargercurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（电池）总线充电电流',
  `mcvoltagefront` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机控制器前段电压',
  `mcvoltagerear` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机控制器后端电压',
  `mccurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机控制器电流',
  `bcvoltageout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电机输出电压',
  `bccurrentout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电机输出电流',
  `bccurentin` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电机输入电流',
  `bctemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电机温度',
  `motorspeed` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（驱动）电机转速',
  `mctemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机控制器温度',
  `opivoltageout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '油泵逆变器输入电流',
  `opitemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '油泵逆变器温度',
  `apivoltageout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵逆变器输入电流',
  `apitemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '司机制动踏板位置',
  `batteryentemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池箱内环境最高温度',
  `bmvoltagehigh` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池模块最低电压',
  `bmtemplow` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池模块最低温度',
  `wiremesh` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '线网单次累计耗电量',
  `currentrecycle` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '回收电流',
  `motortemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（驱动）电机温度',
  `batterycount` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池包总数N',
  `batterysn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池包包号',
  `batterymaxtemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池包最高温度',
  `batterymintemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '高压电池电流',
  `remainenergy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '剩余能量',
  `batterytotalvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池总电压',
  `singlehightemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '单体最高温度',
  `singlelowtemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '单体最低温度',
  `singlehighvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '单体最高电压',
  `singlelowvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '单体最低电压',
  `insulresisvalue` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '液体燃料消耗量',
  `vin` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '车辆VIN号',
  `cpcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电桩充电电流',
  `cpvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电桩充电电压',
  `cptemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电桩充电温度',
  `cpcheckcode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电桩故障代码',
  `chargecardinfo` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电卡信息',
  `chargeduration` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电持续时间',
  `motorbusbarcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机母线电流',
  `busbaroutcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（电池）总线放电电流',
  `consumeperday` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '日总电耗',
  `bmslifesignal` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'BMSlife信号',
  `singlemaxvolt1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压1节数',
  `singlemaxvolt2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压2',
  `singlemaxvolt2sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压2箱号',
  `singlemaxvolt2count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压2节数',
  `singlemaxvolt3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压3',
  `singlemaxvolt3sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压3箱号',
  `singlemaxvolt3count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压3节数',
  `singlemaxvolt4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压4',
  `singlemaxvolt4sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压4箱号',
  `singlemaxvolt4count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最高单体电压4节数',
  `singleminvolt1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最单体电压1',
  `singleminvolt1sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压1节数',
  `singleminvolt2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压2',
  `singleminvolt2sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压2箱号',
  `singleminvolt2count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压2节数',
  `singleminvolt3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压3',
  `singleminvolt3sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压3箱号',
  `singleminvolt3count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压3节数',
  `singleminvolt4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压4',
  `singleminvolt4sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压4箱号',
  `singleminvolt4count` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最低单体电压4节数',
  `singlemaxtemp1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度1箱号',
  `singlemaxtemp2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度2',
  `singlemaxtemp2sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度2箱号',
  `singlemaxtemp3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度3',
  `singlemaxtemp3sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度3箱号',
  `singlemaxtemp4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度4',
  `singlemaxtemp4sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最高温度4箱号',
  `singlemintemp1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度1箱号',
  `singlemintemp2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度2',
  `singlemintemp2sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度2箱号',
  `singlemintemp3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度3',
  `singlemintemp3sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度3箱号',
  `singlemintemp4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度4',
  `singlemintemp4sn` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组最低温度4箱号',
  `bmstotalconsume` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '(BMS)总电耗',
  `batchargevolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池充电电压',
  `batchargemaxvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（充电时）最高单体电压',
  `batchargeminvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '（充电时）最低单体电压',
  `vcucode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'VCU系统故障码',
  `controllerlife` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '整车控制器life',
  `cursingdistance` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '续航里程',
  `transducerbusvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '驱动变频器母线电压',
  `motortorque` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '驱动电机扭矩',
  `motorpower` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '驱动电机功率',
  `motorcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '驱动电机电流',
  `dcstartcode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC启动指令',
  `acstartcode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/AC（空压机）启动指令',
  `dcoutvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC输出电压',
  `dcoutcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC输出电流',
  `dcinvolt` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC输入电压',
  `dcradiatortemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC散热器温度',
  `dccheckcode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'DC/DC故障代码',
  `mcucheckcode` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'MCU系统故障代码',
  `soerelayeq` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'SOE电容电量',
  `chargeeq` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '充电电量',
  `generatorcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '发电机电流',
  `pdbtemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '配电盒温度',
  `cumulativechargtime` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计充电时间',
  `outputenergy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '输出能量',
  `vehiclestate` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '整车状态',
  `air_pressure_1` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压1(12bar)',
  `air_pressure_2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压2(12bar)',
  `air_pressure_3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压3(12bar)',
  `air_pressure_4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气压4(12bar)',
  `motor_rated_power` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机额定功率',
  `battery_residual_energy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池剩余能量',
  `motor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机温度',
  `cumulative_charging_energy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计充电电能',
  `motor_max_out_torque` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机最大输出转矩',
  `insulation_module_life_value` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '绝缘模块life值',
  `max_allowed_out_current` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最大允许放电电流',
  `max_allowed_feedback_current` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '最大允许回馈电流',
  `battery_rated_voltage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池额定电压',
  `motor_peak_torque` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机峰值转矩',
  `turn_assist_radiator_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向助力散热器温度',
  `motor_rated_voltage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机额定电压',
  `motor_max_work_current` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机最大工作电流',
  `motor_peak_power` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机峰值功率',
  `motor_max_speed` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机最高转速',
  `battery_rated_energy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池额定能量',
  `positiveresistance` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '正对地绝缘电阻值',
  `negativeresistance` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '负对地绝缘电阻值',
  `battery_reated_energy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池额定能量',
  `total_battery_temp_node_number` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池总温度节点数',
  `battery_type_num` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池类型代码',
  `gaspumpvol` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵控制器电压',
  `monomer_voltage` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '单体电池电压',
  `motrealtorque` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电机实际转矩',
  `battery_allowed_min_soc` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '电池组允许最小使用SOC',
  `lf_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳左前传感器温度',
  `rf_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳右前传感器温度',
  `lm_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳左中传感器温度',
  `rm_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳右中传感器温度',
  `lb_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳左后传感器温度',
  `rb_brake_caliper_sensor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '制动钳右后传感器温度',
  `gaspumpcurent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵控制器电流',
  `fog_monitor_temp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度1',
  `fog_monitor_temp_2` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度2',
  `fog_monitor_temp_3` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度3',
  `fog_monitor_temp_4` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度4',
  `fog_monitor_temp_5` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度5',
  `fog_monitor_temp_6` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度6',
  `fog_monitor_temp_8` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '烟雾报警器温度8',
  `stpumpvol` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向泵三相电压',
  `stpumpcurrent` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向泵三相电流',
  `cumulative_discharge_energy` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '累计放电电能',
  `wateroutputtemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '热管理系统_出水温度',
  `stpumpspeed` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向泵转速',
  `stpumpmotortemp` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向泵电机温度',
  `turn_assist_heart_signal` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向助力心跳信号',
  `gaspumpspeed` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '气泵电机转速',
  `conditioner_in_current` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '空调输入总电流',
  `turn_assist_out_volt` tinytext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向助力输出电压',
  `turn_assist_out_current` tinytext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '转向助力输出电流',
  `settemp` tinytext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '设定温度',
  `waterbacktemp` tinytext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '热管理系统_回水温度'
) ENGINE = InnoDB AUTO_INCREMENT = 1716 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '模拟量偏移量' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclebatteryalarmtype
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclebatteryalarmtype`;
CREATE TABLE `t_vehiclebatteryalarmtype`  (
  `alarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类'
) ENGINE = InnoDB AUTO_INCREMENT = 327 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '电池报警类型表 用于电池统计' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclegroup
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclegroup`;
CREATE TABLE `t_vehiclegroup`  (
  `groupId` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `groupNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队编号',
  `groupName` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队名称',
  `groupAddr` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车队地址',
  `vehicleNum` int(11) NULL DEFAULT NULL COMMENT '车辆总数',
  `lineNum` int(11) NULL DEFAULT NULL COMMENT '线路总数',
  `driverNum` int(11) NULL DEFAULT NULL COMMENT '司机总数',
  `repareFactory` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '维修工厂',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '对应mauth_dept的主键',
  `ownerNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车队自编号',
  PRIMARY KEY (`groupId`) USING BTREE,
  UNIQUE INDEX `groupName`(`groupName`, `deptId`) USING BTREE,
  INDEX `idx_gid_vg`(`groupId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3715 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车队信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclehighdangerbatteryalarmtype
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclehighdangerbatteryalarmtype`;
CREATE TABLE `t_vehiclehighdangerbatteryalarmtype`  (
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型key',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '报警所属机构主键'
) ENGINE = InnoDB AUTO_INCREMENT = 288 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '高危电池报警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleinfo`;
CREATE TABLE `t_vehicleinfo`  (
  `vehicleId` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '所属线路编号',
  `vehicleType` varchar(30) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车型',
  `motorType` enum('1','2','3','4','5') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '车辆类型：\n1- 燃油车\n，2- 电车\n，3- 油电混合动力车\n，4- 燃气车\n，5- 气电混合动力车',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '设备号',
  `lineInfo` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '班线',
  `deviceFactoryNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '主机厂车辆自编号',
  `engineVinNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机VIN码',
  `oilBoxCap` int(11) NULL DEFAULT NULL COMMENT '油箱容量',
  `dayRunTime` int(11) NULL DEFAULT NULL COMMENT '每日行驶时间',
  `airBottleCap` int(11) NULL DEFAULT NULL COMMENT '气瓶容量',
  `batteryCap` int(11) NULL DEFAULT NULL COMMENT '电池电量',
  `eleCost` int(11) NULL DEFAULT NULL COMMENT '标准电耗',
  `gasCost` int(11) NULL DEFAULT NULL COMMENT '标准气耗',
  `oilCost` int(11) NULL DEFAULT NULL COMMENT '标准油耗',
  `engineModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机型号/厂家',
  `gearBoxModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '变速箱型号/厂家',
  `batteryModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池型号/厂家',
  `dynamoModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机型号/厂家',
  `tireModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎型号/厂家',
  `wheelaxlesModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车桥型号/厂家',
  `doorpumpModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '门泵型号/厂家',
  `fsbSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线厂家',
  `heaterSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '暖风厂家',
  `wiperSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮系统厂家',
  `lightswitchsupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '灯光组合开关厂家',
  `seatSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '座椅厂家',
  `tirepressureSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '胎压型号/厂家',
  `motorSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机型号/厂家',
  `electricboxModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电器盒型号/厂家',
  `absModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ABS 型号/厂家',
  `brakeshoreModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '刹车蹄片型号/厂家',
  `isReparing` varchar(1) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT 'N' COMMENT '是否正在维修。改信息根据“车辆维护”信息，通过触发器自动修改',
  `expireDate` date NULL DEFAULT NULL COMMENT '车辆到期日期',
  `producer` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆生产厂家',
  `purchaseDate` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购买日期',
  `status` int(11) NOT NULL DEFAULT 1 COMMENT '汽车状态：1-正常    2-故障   3-维修',
  `paymentExpiredDate` date NULL DEFAULT NULL COMMENT '缴费到期时间',
  `online` tinyint(1) NULL DEFAULT 0,
  `paymentStatus` tinyint(1) NULL DEFAULT 1 COMMENT '是否欠费',
  `sim` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'sim卡信息',
  `vehicleSN` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆编号',
  `lastDataUpTime` int(11) NULL DEFAULT 0 COMMENT '数据最后更新时间',
  `alarm` tinyint(1) NULL DEFAULT 0 COMMENT '是否报警',
  `lastAlarmTime` int(11) NULL DEFAULT 0 COMMENT '报警最后更新时间',
  `vehicleManufacturer` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆厂商',
  `vin` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'vin',
  `vehicleNoColor` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌颜色',
  `vehicleConfig` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆配置名称',
  `productBatch` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'productBatch',
  `vehicleUse` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆用途\n',
  `puchaseField` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购车领域',
  `vehicleOperator` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '运营单位',
  `buyer` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购买车主/购买单位',
  `manufactureDate` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '出厂日期',
  `protocolVersion` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆应用协议版本',
  `createTime` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '录入时间',
  `offsetId` bigint(20) NULL DEFAULT -1 COMMENT '偏移量主键',
  PRIMARY KEY (`vehicleId`) USING BTREE,
  UNIQUE INDEX `vehicleNo_UNIQUE`(`vehicleNo`) USING BTREE,
  UNIQUE INDEX `deviceId_UNIQUE`(`deviceId`) USING BTREE,
  INDEX `idx_devid_vinfo`(`deviceId`) USING BTREE,
  INDEX `idx_vehicleNo_vehi`(`vehicleNo`) USING BTREE,
  INDEX `fk_offsetId`(`offsetId`) USING BTREE,
  INDEX `deptId_index`(`deptId`) USING BTREE,
  INDEX `motorType_index`(`motorType`) USING BTREE,
  INDEX `motor_device_index`(`motorType`, `deviceId`) USING BTREE,
  INDEX `deptId_type_idx`(`deptId`, `motorType`) USING BTREE,
  CONSTRAINT `fk_offsetId` FOREIGN KEY (`offsetId`) REFERENCES `t_vehicleanalog_offset` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 39554 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleinfo_motors
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleinfo_motors`;
CREATE TABLE `t_vehicleinfo_motors`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `drivingMotorType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动电机型号',
  `drivingMotorid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动电机编号',
  `motorPosition` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电机位置',
  `drivingMotorNo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '驱动电机序号',
  `t_vehicleinfo_id` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `t_vehicleinfo_motors_t_vehicleinfo_vehicleId_fk`(`t_vehicleinfo_id`) USING BTREE,
  CONSTRAINT `t_vehicleinfo_motors_ibfk_1` FOREIGN KEY (`t_vehicleinfo_id`) REFERENCES `t_vehicleinfo` (`vehicleId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleinfo_system
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleinfo_system`;
CREATE TABLE `t_vehicleinfo_system`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '小类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大类型',
  `dept_id` int(11) NULL DEFAULT -1 COMMENT '公司id',
  `show` tinyint(4) NULL DEFAULT 1 COMMENT '是否显示',
  `version` float NULL DEFAULT 1.2 COMMENT '版本号',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 83 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车身系统分类\r\n' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleinfo_system_type
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleinfo_system_type`;
CREATE TABLE `t_vehicleinfo_system_type`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '小类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大类型',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 44 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车身系统分类\r\n' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleinfo_updated_stamp
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleinfo_updated_stamp`;
CREATE TABLE `t_vehicleinfo_updated_stamp`  (
  `last_update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `t_vehicleinfo_updated_stamp_last_update_time_uindex`(`last_update_time`) USING BTREE,
  UNIQUE INDEX `t_vehicleinfo_updated_stamp_id_uindex`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclemaintenance
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclemaintenance`;
CREATE TABLE `t_vehiclemaintenance`  (
  `vehicleMaintainId` int(11) NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌号',
  `firstMaintenance` date NULL DEFAULT NULL COMMENT '一保时间',
  `secondMaintenance` date NULL DEFAULT NULL COMMENT '二保时间',
  `thirdMaintenance` date NULL DEFAULT NULL COMMENT '三保时间',
  `realFirstMaintenance` date NULL DEFAULT NULL COMMENT '实际首保时间',
  `realSecondMaintenance` date NULL DEFAULT NULL COMMENT '实际二保时间',
  `realThirdMaintenance` date NULL DEFAULT NULL COMMENT '实际三保时间',
  `guarantyMiles` int(11) NULL DEFAULT NULL COMMENT '质保里程',
  `vehicleGuaranteeDate` date NULL DEFAULT NULL COMMENT '整车质保时间',
  `motorGuaranteeDate` date NULL DEFAULT NULL COMMENT '发动机质保时间',
  `gearboxGuaranteeDate` date NULL DEFAULT NULL COMMENT '变速箱质保时间',
  `busGuaranteeDate` date NULL DEFAULT NULL COMMENT '总线质保时间',
  `tierGuaranteeDate` date NULL DEFAULT NULL COMMENT '轮胎质保时间',
  `doorpumprGuaranteeDate` date NULL DEFAULT NULL COMMENT '门泵质保时间',
  `elecmotorGuaranteeDate` date NULL DEFAULT NULL COMMENT '电机质保时间',
  `absGuaranteeDate` date NULL DEFAULT NULL COMMENT 'abs质保时间',
  `chairGuaranteeDate` date NULL DEFAULT NULL COMMENT '座椅质保时间',
  `firstGuarantyMiles` int(11) NULL DEFAULT NULL COMMENT '一保里程数',
  `secondGuarantyMiles` int(11) NULL DEFAULT NULL COMMENT '二保里程数',
  `thirdGuarantyMiles` int(11) NULL DEFAULT NULL COMMENT '三保里程数',
  `compulsoryInsurance` date NULL DEFAULT NULL COMMENT '交强险到期时间',
  `licenses` date NULL DEFAULT NULL COMMENT '运营证到期时间',
  `oilChange` date NULL DEFAULT NULL COMMENT '机油更换日期',
  `lightCombinationSwitch` date NULL DEFAULT NULL COMMENT '灯光组合开关到期日期',
  `feeExpire` date NULL DEFAULT NULL COMMENT '费用到期',
  `loanExpire` date NULL DEFAULT NULL COMMENT '贷款截止到期日期',
  `insuranceExpiredDate` date NULL DEFAULT NULL COMMENT '首保到期日期',
  PRIMARY KEY (`vehicleMaintainId`) USING BTREE,
  UNIQUE INDEX `vehicleNo`(`vehicleNo`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 799 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆维护' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclemiles
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclemiles`;
CREATE TABLE `t_vehiclemiles`  (
  `vehicledeviceid` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备号',
  `vehicleNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `accruedmiles` int(11) NULL DEFAULT NULL COMMENT '累计里程',
  `shortmiles` int(11) NULL DEFAULT NULL COMMENT '短里程',
  `gpsstatus` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'gps状态',
  `vehicleAge` int(11) NULL DEFAULT NULL COMMENT '车龄（自购买至今的月数）',
  `updatetime` datetime(0) NULL DEFAULT NULL,
  `stat_date` date NULL DEFAULT NULL COMMENT '统计日期',
  `adjustDate` date NULL DEFAULT NULL COMMENT '校准日期',
  INDEX `idx_vehiclevid`(`vehicledeviceid`, `stat_date`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2363424 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleproalarmtype
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleproalarmtype`;
CREATE TABLE `t_vehicleproalarmtype`  (
  `proalarmtypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `proalarmtypename` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预警类型中文名称',
  `proalarmname` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预警类型英文名',
  `key` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预警类型key',
  `type` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '预警所属系统类型',
  `parenttype` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统类型所属主类',
  PRIMARY KEY (`proalarmtypeid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '预警类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleremindconfig
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleremindconfig`;
CREATE TABLE `t_vehicleremindconfig`  (
  `recordid` int(11) NOT NULL AUTO_INCREMENT,
  `companyDeptId` int(11) NULL DEFAULT NULL COMMENT '总公司deptid',
  `remindtypeid` int(11) NULL DEFAULT NULL COMMENT '提醒类型，t_vehicleremindtype主键',
  `remindDays` int(11) NULL DEFAULT NULL COMMENT '提前多少天开始提醒',
  PRIMARY KEY (`recordid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7112 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '提醒设置，以公司作为单位整体设置' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleremindtype
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleremindtype`;
CREATE TABLE `t_vehicleremindtype`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `remindType` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '提醒类型',
  `remindTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '提醒类型描述',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '提醒类型表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleservice
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleservice`;
CREATE TABLE `t_vehicleservice`  (
  `vehicleServiceId` int(11) NOT NULL AUTO_INCREMENT,
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `partsName` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '更换的配件名称',
  `reason` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '更换原因',
  `supplier` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '供应商',
  `partsNum` int(11) NULL DEFAULT NULL COMMENT '更换的配件数量',
  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT '配件单价',
  `serviceMan` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '更换人姓名',
  `repairDate` datetime(0) NULL DEFAULT NULL COMMENT '更换时间',
  `driver` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机姓名',
  `applyDate` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '报修时间',
  `expectFinishDate` datetime(0) NULL DEFAULT NULL COMMENT '预计完成时间',
  `realFinishDate` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '实际完成时间',
  `applyMan` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报修人',
  `repairMan` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '维修人',
  `costTime` int(11) NULL DEFAULT NULL COMMENT '维修工时',
  PRIMARY KEY (`vehicleServiceId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 617 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆维修' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclestateinfo1
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclestateinfo1`;
CREATE TABLE `t_vehiclestateinfo1`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NOT NULL COMMENT '车辆状态信息1编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `frontdooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门开',
  `middledooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门开',
  `middledoor2open` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门开2',
  `reardooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后门开',
  `leftfrontdooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门开',
  `leftmiddledooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门开',
  `leftreardooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门开',
  `rightfrontdooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门开',
  `rightmiddledooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门开',
  `rightreardooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门开',
  `alldooropen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '所有门开',
  `alldoorshut` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '所有门关',
  `frontdoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门开提示灯',
  `middledoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门开提示灯',
  `middledoor2notify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2开提示灯',
  `reardoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后门开提示灯',
  `leftfrontdoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门开提示灯',
  `leftmiddledoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门开提示灯',
  `leftreardoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门开提示灯',
  `rightfrontdoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门开提示灯',
  `rightmiddledoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门开提示灯',
  `rightreardoornotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门开提示灯',
  `pgear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'P档',
  `rgear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'R档',
  `ngear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'N档',
  `dgear` varchar(4) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'D档（1-6档）',
  `handbrake` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '手刹',
  `brake` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动',
  `abs` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ABS工作',
  `ebs` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'EBS工作',
  `middledoorbell` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门下车铃',
  `retardnotify` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '缓速器工作指示',
  `lightfar` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '远光灯',
  `lightnear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '近光灯',
  `foglightfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前雾灯',
  `foglightrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后雾灯',
  `lightsmall` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '小灯（位置灯）',
  `spotlightfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门射灯',
  `spotlightmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门射灯',
  `spotlightmiddle2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2射灯',
  `spotlightleftfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门射灯',
  `spotlightleftmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门射灯',
  `spotlightrightfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门射灯',
  `spotlightrightmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门射灯',
  `spotlightrightrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门射灯',
  `leftlamp` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左日光灯',
  `rightlamp` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右日光灯',
  `turnlampleft` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左转向灯',
  `turnlampright` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右转向灯',
  `brakelight` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '刹车灯',
  `reverselight` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '倒车灯',
  `hornelect` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电喇叭',
  `hornair` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气喇叭',
  `wiperhigh` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮高速',
  `wiperlow` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮低速',
  `wipergap1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮间隙1',
  `wipergap2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮间隙2',
  `wipergap3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮间隙3',
  `wipergap4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮间隙4',
  `wiperpower` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮电源',
  `wiper` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮喷淋',
  `wiperwheel` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雨刮凸轮',
  `clutchfan` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '离合器风扇',
  `panelhign` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '自动踏板高端位',
  `panellow` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '自动踏板低端位',
  `panelout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '自动踏步伸出',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `brakepedaltestoutput` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '刹车踏板检测输出',
  `fire_extinguisher_1_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '灭火器1号设备状态',
  `vehicle_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆状态',
  `oilpump_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵状态',
  `gaspump_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵状态',
  `DCDC_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DCDC状态已弃用',
  `insulation_grade` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '绝缘等级',
  `d1_d6` varchar(3) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'D1-6档',
  `dgear_v13` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'D档',
  `driverSignInfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驾驶员签到信息',
  `fire_extinguisher_2_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '灭火器2号设备状态',
  `fire_extinguisher_3_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '灭火器3号设备状态',
  `centralization_lubrication_fuel_pressure` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑油压状态',
  `centralization_lubrication_fuel_level` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑油位状态',
  `centralization_lubrication_motor_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑电机状态',
  `centralization_lubrication_work_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑工作状态',
  `centralization_lubrication_fuel_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑油箱状态',
  `centralization_lubrication_pressure_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑压力状态',
  `centralization_lubrication_temp_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑温度状态',
  `centralization_lubrication_current_state` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑电流状态',
  `DCDCFaultStateCode` varchar(10) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'DC-DC故障状态',
  `ATSSensorState` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ATS传感器状态',
  `highvoltageserviceswitch` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高压维修开关',
  `climbingmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '爬坡模式',
  `chargingheartbeat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电检测信号',
  `gpseffective` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'GPS有效',
  `pureelectricmodesignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '纯电模式信号',
  `electricheatingswitchsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电加热开关信号',
  `electricdefrostswitchsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电除霜开关信号',
  `batteryplumbingheatingvalve` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池水暖加热阀',
  `maincontactor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '主接触器',
  `prechargedcontactors` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '预充电接触器',
  `controllerfanstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '控制器风扇启动',
  `batteryfanstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池风扇启动',
  `midcoolerfanstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中冷器风扇启动',
  `enginefanstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机水温风扇启动',
  `motorpumpsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机水泵信号',
  `controllerpumps` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '控制器水泵',
  `batterypumps` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池水泵',
  `engineprestartsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机预启动信号',
  `electriccontrolsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电除霜接触器控制信号',
  `electricheatingcontactorsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电加热接触器控制信号',
  `powerbatterychargingsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '功率电池充电接触器控制信号',
  `energybatterychargingsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '能量电池充电接触器控制信号',
  `capacitorprechargedsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '功率电池（电容）预充电触器控制信号',
  `capacitorchargedsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '功率电池（电容）接触器控制信号',
  `energybatteryprechargesignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '能量电池预充电触器控制信号',
  `energybatterymaincontrolsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '能量电池主接触器控制信号',
  `enginefan1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机风扇1',
  `enginefan2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机风扇2',
  `batterythermostatoncommand` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池温控器开启指令',
  `batterythermostatgear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池温控器档位',
  `aircompressorstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空压机启动',
  `airconditionproblem` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调故障 ',
  `airconditionready` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调READY',
  `vinreceivestatus` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'VIN接收状态',
  `batteryallowsbreaksign` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池允许断开标识',
  `enginecontrolmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机控制模式',
  `forcefanenablesignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '强制风扇使能信号',
  `msdstate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'MSD状态',
  `wirelesschargingsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '无线充电连接确认信号',
  `dooropenidlereleaseswitch` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '门开怠速解除',
  `leftpushwindowopen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左外推窗打开',
  `rightpushwindowopen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右外推窗打开',
  `fancontrolsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '设备仓风扇控制信号',
  `condenserdrainagecondenserdrainage` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '冷凝器排水',
  `powerupprocess` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '上电过程',
  `limppreparation` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '跛行准备',
  `chargingpreparation` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电准备',
  `chargingend` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电结束',
  `highvoltagebreakswitch` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高压急断开关',
  `energyrecoverymode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '能量回收模式',
  `autoparking` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '自动驻车功能',
  `steeringpowerpumpstatus` varchar(4) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力油泵状态',
  `electronichandbrakefunction` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电子手刹功能',
  `downhillassistfunction` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '下坡辅助功能',
  `settospeedcruiseon` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '定速巡航功能开启',
  `settospeedcruiseoneffect` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '定速巡航功能生效',
  `throttleantimisstepfunction` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油门防误踩功能',
  `driveantislipfunction` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '驱动防滑功能',
  `snowmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '雪地模式',
  `emergencybrakeassistfunction` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '紧急制动辅助功能',
  `collisionmitigationbraking` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '碰撞缓解制动功能',
  `tmsworkstatus` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'TMS工作状态',
  PRIMARY KEY (`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels1`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '车辆状态信息表1' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_vehiclestateinfo2
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclestateinfo2`;
CREATE TABLE `t_vehiclestateinfo2`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆状态信息2编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `leftcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左舱门开',
  `rightcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右舱门开',
  `rearcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后舱门状态',
  `safedoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '安全门开',
  `enginemaintain` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机维护',
  `enginediagnosis` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机诊断',
  `engineawaitstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机等待启动',
  `enginediagnosisrequest` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机诊断请求',
  `alternatorcharge` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示',
  `alternatorcharge2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示2',
  `alternatorcharge3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示3',
  `lubricate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑',
  `asr` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ASR',
  `bridgelock` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '随动桥锁止',
  `conditioncooling` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调制冷',
  `conditionair` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调换气',
  `conditionclutch` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调离合器',
  `motorpreheat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机预热指示',
  `lightguide` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '路牌灯',
  `lightshoulder` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '路肩灯',
  `lightreading` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '阅读灯',
  `lightticketsfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前售票灯',
  `lightticketsrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后售票灯',
  `lightdaytime` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '昼行灯',
  `lightdriver` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机灯',
  `cruiseboost` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '巡航提升',
  `cruiserecover` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '巡航恢复',
  `requeststop` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '请求停车',
  `ventilatorfrontin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前换气扇入',
  `ventilatorfrontout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前换气扇出',
  `ventilatormiddlein` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中换气扇入',
  `ventilatormiddleout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中换气扇出',
  `ventilatorrearin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后换气扇入',
  `ventilatorrearout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后换气扇出',
  `defroster1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '除霜器1',
  `defroster2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '除霜器2',
  `rearviewheating` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后视镜加热',
  `radiator1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器1',
  `radiator2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器2',
  `airsuspensionup` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架上升',
  `airsuspensiondown` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架下降',
  `airsuspensionreset` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架复位',
  `ecasheel` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS侧倾',
  `ecasheight` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS高度',
  `ecasworking` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS工作',
  `lighterpower` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '点烟器电源',
  `driverfan1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机风扇1',
  `powerslot` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '投币机电源',
  `powermonitor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '监视器电源',
  `powerincarmonitor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车内显示屏电源',
  `powerreceiver` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '收放机电源',
  `powercondition` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调照明电源',
  `tvpowerfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前电视电源',
  `tvpowerrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后电视电源',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `obligate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '预留',
  `conditioneron` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调开关',
  `conditoncooling` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制冷模式',
  `conditionheating` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制热模式',
  `conditionfreshing` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '新风模式',
  `heatpdefostmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '热泵除霜模式',
  `coolingdefostmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制冷除霜模式',
  `bactericidalmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '杀菌模式',
  `ptcheatingmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'PTC加热模式',
  `hybridstopmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '混合动力停机模式',
  `highspeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高速',
  `middlespeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中速',
  `lowspeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '低速',
  `chargeworkstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充放电状态',
  `runstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '运行状态',
  `allowhighvolt` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '允许上高压',
  `powerdownstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '下电状态',
  `lowtempstatus` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '低温状态',
  `rampstartstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '坡道起步工作状态',
  `brakepanelsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动踏板信号',
  `motorenergyfeedback` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机能量回收反馈',
  `oilpumpstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电动空压机油泵状态',
  `airpumpstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电动空压机气泵状态',
  `tyresensorstat1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态1',
  `tyresensorstat2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态2',
  `tyresensorstat3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态3',
  `tyresensorstat4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态4',
  `tyresensorstat5` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态5',
  `tyresensorstat6` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态6',
  `tyresensorstat7` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态7',
  `tyresensorstat8` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态8',
  `tyresensorstat9` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态9',
  `tyresensorstat10` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态10',
  `tyresensorstat11` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态11',
  `tyresensorstat12` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态12',
  `tyresensorstat13` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态13',
  `tyresensorstat14` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态14',
  `tyresensorstat15` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态15',
  `tyresensorstat16` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态16',
  `tyrestatus1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态1',
  `tyrestatus2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态2',
  `tyrestatus3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态3',
  `tyrestatus4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态4',
  `tyrestatus5` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态5',
  `tyrestatus6` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态6',
  `tyrestatus7` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态7',
  `tyrestatus8` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态8',
  `tyrestatus9` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态9',
  `tyrestatus10` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态10',
  `tyrestatus11` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态11',
  `tyrestatus12` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态12',
  `tyrestatus13` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态13',
  `tyrestatus14` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态14',
  `tyrestatus15` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态15',
  `tyrestatus16` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态16',
  `brakePressureSensorPowerupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动气压传感器电源',
  `ventilatorPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '换气扇电源',
  `ledElectronicCircuitBoardPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'LED电子路牌电源',
  `retarderPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '缓速器电源',
  `airConditioningPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调电源',
  `chargerPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电器电源',
  `infraredDevicePowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '红外装置电源',
  `atsThermalManagementSystemPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ATS热管理系统电源',
  `dryerPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '干燥器电源',
  `rearBootBoxPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后启动盒电源',
  `absPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ABS电源',
  `electroniclockPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电子钟电源',
  `airconditioningfaultcode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调故障码',
  `airconditioningoperatingmode` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调工作模式',
  UNIQUE INDEX `uix_devid_time_sta2`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels1`(`time`) USING BTREE,
  INDEX `idx_conditioneron_time`(`conditioneron`) USING BTREE,
  INDEX `idx_vid_conditioneron_time`(`vehicledeviceid`, `conditioneron`, `time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '车辆状态信息表2' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_vehiclestateinfo3
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclestateinfo3`;
CREATE TABLE `t_vehiclestateinfo3`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆状态信息3编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `antipfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门防夹',
  `antipmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门防夹',
  `antipmiddle2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2防夹',
  `antiprear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后门防夹',
  `antipleftfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门防夹',
  `antipleftmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门防夹',
  `antipleftrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门防夹',
  `antiprightfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门防夹',
  `antiprightmiddle` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门防夹',
  `antiprightrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门防夹',
  `reliefrotate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '安全阀旋转',
  `reliefopen` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '安全阀打开',
  `emecapout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车外应急阀盖打开',
  `emergencyout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车外应急阀打开',
  `emecapin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车内应急阀盖打开',
  `emergencyin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车内应急阀打开',
  `emecapfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门内应急阀盖打开',
  `emergencyfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门内应急阀打开',
  `emecapfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门外应急阀盖打开',
  `emergencyfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门外应急阀打开',
  `emecapmi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门内应急阀盖打开',
  `emergencymi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门内应急阀打开',
  `emecapmo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门外应急阀盖打开',
  `emergencymo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门外应急阀打开',
  `emecapm2i` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2内应急阀盖打开',
  `emergencym2i` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2内应急阀打开',
  `emecapm2o` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2外应急阀盖打开',
  `emergencym2o` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门2外应急阀打开',
  `emecapri` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后门内应急阀盖打开',
  `emecapro` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后门外应急阀盖打开',
  `emecaplfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门内应急阀盖打开',
  `emergencylfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门内应急阀打开',
  `emecaplfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门外应急阀盖打开',
  `emergencylfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左前门外应急阀打开',
  `emecaplmi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门内应急阀盖打开',
  `emergencylmi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门内应急阀打开',
  `emecaplmo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门外应急阀盖打开',
  `emergencylmo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左中门外应急阀打开',
  `emecaplri` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门内应急阀盖打开',
  `emergencylri` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门内应急阀打开',
  `emecaplro` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门外应急阀盖打开',
  `emergencylro` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左后门外应急阀打开',
  `emecaprfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门内应急阀盖打开',
  `emergencyrfi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门内应急阀打开',
  `emecaprfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门外应急阀盖打开',
  `emergencyrfo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右前门外应急阀打开',
  `emecaprmi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门内应急阀盖打开',
  `emergencyrmi` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门内应急阀打开',
  `emecaprmo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门外应急阀盖打开',
  `emergencyrmo` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右中门外应急阀打开',
  `emecaprri` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门内应急阀盖打开',
  `emergencyrri` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门内应急阀打开',
  `emecaprro` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门外应急阀盖打开',
  `emergencyrro` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右后门外应急阀打开',
  `absdiagnosisrequest` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ABS诊断请求',
  `disabledhelp` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '残疾人求助',
  `accelstatus` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油门状态',
  `conditionon` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调启动',
  `contackbuzzer` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '接触蜂鸣报警',
  `lightcorridor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '走廊照明灯',
  `lightluggage` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '行李仓灯',
  `wheelchairout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮椅不在位',
  `wheelchairbelt` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮椅安全带',
  `safebelt` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '安全带',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `keyacc` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '钥匙1（ACC）',
  `keyon` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '钥匙2(ON)',
  `keystart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '钥匙3（START）',
  `front_door_closed` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门关',
  `middle_door_closed` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门关',
  `door_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '门电源',
  `charging_bin_door` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电仓门状态',
  `air_pump_power_supply_backup_2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵电源备用2',
  `battery_compartment_fan_power_supply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电池舱风扇电源',
  `shutdown_delay_output_1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '关断延时输出1',
  `get_off_the_bell_at_the_middle_gate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门下车铃（删除，留作备用）',
  `disabled_help` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '残疾人求助（删除，留作备用）',
  `auxiliary_current_1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '目前为备用',
  `vehicle_interlock` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆互锁',
  `forced_parking_mode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '强制停车模式',
  `forced_power_reduction_mode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '强制降功率模式',
  `oil_pump_input_cut_off` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输入切断',
  `oil_pump_output_cut_off` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '油泵输出切断',
  `air_pump_input_cut_off` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输入切断',
  `air_pump_output_cut_off` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '气泵输出切断',
  `abs_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ABS电源',
  `front_door_pedal_light` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前门踏步灯',
  `middle_door_pedal_light` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中门踏步灯',
  `water_pressure_sensor_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '水压传感器电源',
  `find_alarm_appear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '探测到报警信息',
  `indicator_light_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '指示灯电源',
  `absence_switch_indicator_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '翘板开关指示灯电源',
  `fatigue_driving_control_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '疲劳驾驶控制电源',
  `reverse_radar_control_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '倒车雷达控制电源',
  `ACC_Relay_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ACC继电器电源',
  `assist_driving_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '辅助驾驶电源',
  `smog_alarm` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器',
  `new_energy_monitor_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '新能源监控电源',
  `intelligence_drain_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '智能排水电源',
  `maintenance_light_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '维修灯电源',
  `USB_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'USB电源',
  `dry_bottle_pressure_power` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '干燥瓶压力开关',
  `right_lane_departure` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右侧车道偏离',
  `left_lane_departure` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左侧车道偏离',
  `front_collision` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前碰撞',
  `system_inter_status_1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '系统内部状态1',
  `system_inter_status_2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '系统内部状态2',
  `system_inter_status_3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '系统内部状态3',
  `front_car_collision` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前车碰撞',
  `pedestrian_collision` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '行人碰撞',
  `k1_heat_relay_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'K1加热继电器状态',
  `k2_charge_2_relay_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'K2充电2继电器状态',
  `k3_charge_1_relay_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'K3充电1继电器状态',
  `k4_main_loop_relay_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'K4主回路继电器状态',
  `turn_assist_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '转向助力工作状态',
  `fog_monitor_status` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态1',
  `fog_monitor_status_2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态2',
  `fog_monitor_status_3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态3',
  `fog_monitor_status_4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态4',
  `fog_monitor_status_5` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态5',
  `fog_monitor_status_6` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态6',
  `fog_monitor_status_7` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态7',
  `fog_monitor_status_8` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '烟雾报警器工作状态8',
  UNIQUE INDEX `uix_devid_time_sta3`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels3`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = ascii COLLATE = ascii_bin COMMENT = '车辆状态信息表3' KEY_BLOCK_SIZE = 8 ROW_FORMAT = Compressed PARTITION BY RANGE (unix_timestamp(time))
PARTITIONS 3
(PARTITION `p_20200901` VALUES LESS THAN (1598976000) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200902` VALUES LESS THAN (1599062400) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 ,
PARTITION `p_20200903` VALUES LESS THAN (1599148800) ENGINE = InnoDB MAX_ROWS = 0 MIN_ROWS = 0 )
;

-- ----------------------------
-- Table structure for t_vehiclesystemtypeinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclesystemtypeinfo`;
CREATE TABLE `t_vehiclesystemtypeinfo`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parentSystemEn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '父级系统英文',
  `parentSystemCn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '父级系统中文',
  `subSystemEn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '子级系统英文',
  `subSystemCn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '子级系统中文',
  `systemAlias` varchar(300) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '系统名称别名（多个逗号分隔）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 77 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '车身系统表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehiclevariableinfo
-- ----------------------------
DROP TABLE IF EXISTS `t_vehiclevariableinfo`;
CREATE TABLE `t_vehiclevariableinfo`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `data` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '数据来自0123456789php-socket-transfer',
  `type` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '变量类型 analog/state/alarm',
  `systemId` int(11) NULL DEFAULT NULL COMMENT '所属系统',
  `varEn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '变量英文',
  `varCn` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '变量中文',
  `config` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '字段配置信息json（模拟量对应偏移量，状态量对应状态码）',
  `sign` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '字段标识  ABCDE',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2047 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '系统变量表-zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_vehicleviolationrecord
-- ----------------------------
DROP TABLE IF EXISTS `t_vehicleviolationrecord`;
CREATE TABLE `t_vehicleviolationrecord`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `violationName` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '违规名称',
  `vehicleid` int(11) NULL DEFAULT NULL COMMENT '车辆id，关联t_vichleinfo得到车牌号、车辆类型和设备号',
  `vehicleNo` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `driverName` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `driverid` int(11) NULL DEFAULT NULL COMMENT '驾驶员ID，关联t_driverinfo得到姓名',
  `content` varchar(200) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '违章内容',
  `violationdate` datetime(0) NULL DEFAULT NULL COMMENT '违章时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_driverid_idx`(`driverid`) USING BTREE,
  CONSTRAINT `t_vehicleviolationrecord_ibfk_1` FOREIGN KEY (`driverid`) REFERENCES `t_driverinfo` (`driverid`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 583 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆违章记录' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_version_to_system
-- ----------------------------
DROP TABLE IF EXISTS `t_version_to_system`;
CREATE TABLE `t_version_to_system`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `versionId` int(11) NULL DEFAULT NULL COMMENT 'can协议版本主键',
  `systemId` int(11) NULL DEFAULT NULL COMMENT '系统表主键',
  `orderBy` int(11) NULL DEFAULT NULL COMMENT '系统排序(预留字段)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 507 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'can协议-系统中间表-zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_version_to_variable
-- ----------------------------
DROP TABLE IF EXISTS `t_version_to_variable`;
CREATE TABLE `t_version_to_variable`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `versionId` int(11) NULL DEFAULT NULL COMMENT 'can协议版本主键',
  `variableId` int(11) NULL DEFAULT NULL COMMENT '系统变量表主键',
  `orderBy` int(11) NULL DEFAULT NULL COMMENT '系统排序(预留字段)',
  `drivingCurveShow` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '行车曲线是否显示此量 0否 1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13361 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'can协议-系统变量中间表-zzf' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for t_wechat_map
-- ----------------------------
DROP TABLE IF EXISTS `t_wechat_map`;
CREATE TABLE `t_wechat_map`  (
  `openId` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户微信唯一标识',
  `iphone` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '微信绑定手机',
  PRIMARY KEY (`openId`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp
-- ----------------------------
DROP TABLE IF EXISTS `temp`;
CREATE TABLE `temp`  (
  `log` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp1
-- ----------------------------
DROP TABLE IF EXISTS `temp1`;
CREATE TABLE `temp1`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `soc` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOC',
  `buscurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线电流',
  `chargercurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线充电电流',
  `mcvoltagefront` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器前段电压',
  `mcvoltagerear` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器后端电压',
  `mccurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器电流',
  `bcvoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电压',
  `bccurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电流',
  `bccurentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输入电流',
  `bctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机温度',
  `motorspeed` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机转速',
  `mctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器温度',
  `opivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输入电流',
  `opitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器温度',
  `apivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输入电流',
  `apitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机制动踏板位置',
  `batteryentemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱内环境最高温度',
  `bmvoltagehigh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低电压',
  `bmtemplow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低温度',
  `wiremesh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线网单次累计耗电量',
  `currentrecycle` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '回收电流',
  `motortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机温度',
  `batterycount` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包总数N',
  `batterysn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包包号',
  `batterymaxtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最高温度',
  `batterymintemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压电池电流',
  `remainenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '剩余能量',
  `batterytotalvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池总电压',
  `singlehightemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高温度',
  `singlelowtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低温度',
  `singlehighvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高电压',
  `singlelowvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低电压',
  `insulresisvalue` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '液体燃料消耗量',
  `vin` varchar(17) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `cpcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电流',
  `cpvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电压',
  `cptemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电温度',
  `cpcheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩故障代码',
  `chargecardinfo` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电卡信息',
  `chargeduration` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电持续时间',
  `motorbusbarcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机母线电流',
  `busbaroutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（电池）总线放电电流',
  `consumeperday` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '日总电耗',
  `bmslifesignal` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMSlife信号',
  `singlemaxvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1节数',
  `singlemaxvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2',
  `singlemaxvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2箱号',
  `singlemaxvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2节数',
  `singlemaxvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3',
  `singlemaxvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3箱号',
  `singlemaxvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3节数',
  `singlemaxvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4',
  `singlemaxvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4箱号',
  `singlemaxvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4节数',
  `singleminvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1',
  `singleminvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1节数',
  `singleminvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2',
  `singleminvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2箱号',
  `singleminvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2节数',
  `singleminvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3',
  `singleminvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3箱号',
  `singleminvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3节数',
  `singleminvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4',
  `singleminvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4箱号',
  `singleminvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4节数',
  `singlemaxtemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1箱号',
  `singlemaxtemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2',
  `singlemaxtemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2箱号',
  `singlemaxtemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3',
  `singlemaxtemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3箱号',
  `singlemaxtemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4',
  `singlemaxtemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4箱号',
  `singlemintemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1箱号',
  `singlemintemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2',
  `singlemintemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2箱号',
  `singlemintemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3',
  `singlemintemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3箱号',
  `singlemintemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4',
  `singlemintemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4箱号',
  `bmstotalconsume` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)总电耗',
  `batchargevolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池充电电压',
  `batchargemaxvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最高单体电压',
  `batchargeminvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最低单体电压',
  `vcucode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU系统故障码',
  `controllerlife` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车控制器life',
  `cursingdistance` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '续航里程',
  `transducerbusvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动变频器母线电压',
  `motortorque` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机扭矩',
  `motorpower` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机功率',
  `motorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机电流',
  `dcstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC启动指令',
  `acstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/AC（空压机）启动指令',
  `dcoutvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电压',
  `dcoutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电流',
  `dcinvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输入电压',
  `dcradiatortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC散热器温度',
  `dccheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC故障代码',
  `mcucheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU系统故障代码',
  `soerelayeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOE电容电量',
  `chargeeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电电量',
  `generatorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机电流',
  `pdbtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '配电盒温度',
  `cumulativechargtime` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计充电时间',
  `outputenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '输出能量',
  `vehiclestate` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车状态',
  `startuptime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有启动时间',
  `shutdowntime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有熄火时间',
  UNIQUE INDEX `uix_devid_time_elecana`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE,
  INDEX `idx_time_devid_eanlog`(`vehicledeviceid`, `time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车模拟量信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_analoginfo
-- ----------------------------
DROP TABLE IF EXISTS `temp_analoginfo`;
CREATE TABLE `temp_analoginfo`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `datatypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0),
  `speed` int(11) NULL DEFAULT NULL COMMENT '车速',
  `engine` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机转速',
  `batteryvoltage` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '蓄电池电压',
  `oilpressure` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '机油压力',
  `coolanttemper` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '冷却液温度',
  `pressure1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气压1',
  `pressure2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气压2',
  `pressure3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气压3',
  `pressure4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气压4',
  `enginecompartmenttemper` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机舱温度',
  `insidetemper` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车内温度',
  `outsidetemper` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车外温度',
  `residualfuel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '剩余油量',
  `fullfuel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '满箱油量',
  `tyrelayout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎布局',
  `tyreposition` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎位置',
  `tyretemper` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎温度',
  `tyrepressurehigh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎压力高4位',
  `tyrepressurelow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎压力低8位',
  `shortmileage` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '短累计里程',
  `mileage` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计里程',
  `cumulativeenginerevolution` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计发动机转数',
  `fuelconsumptrate` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '燃料使用率',
  `fueleconomy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '瞬时燃料经济性',
  `totalfueluse` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '平均燃油经济性',
  `urealevel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '尿素液位',
  `longitudedegree` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `longitudeminute` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `longitudesecond` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `longitudedecimals` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `latitudedegree` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `latitudeminute` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `latitudesecond` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `latitudedecimals` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `angleinteger` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `angledecimals` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `sim` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SIM',
  `io` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'IO量',
  `singletotalgasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '平均百公里气耗',
  `totalgasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总气耗',
  `realtimegasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '瞬时气耗',
  `averagegasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '未找到对应的中文名称',
  `allgasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计燃气消耗量',
  `gpsx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gpsy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `gpsangle` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPX-Angel',
  `gpsx1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X1',
  `gpsy1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y1',
  `gpsangle1` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Angle1',
  `singletotalfueluse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '平均百公里油耗',
  `hundredfueluse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '百公里油耗',
  `realhundredfueluse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '瞬时百公里油耗',
  `realtimegfueluse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '瞬时油耗',
  `hundredgasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '百公里气耗',
  `realhundredgasuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '瞬时百公里气耗',
  `residualgas` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '剩余气量',
  `totalfuelcost` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总油耗',
  `totalenergyuse` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总能耗',
  UNIQUE INDEX `uix_devid_time_analoginfo`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `IDX_VE_MI_TI`(`vehicledeviceid`, `mileage`, `time`) USING BTREE,
  INDEX `idx_time_vellog`(`time`) USING BTREE,
  INDEX `idx_vid_speed_analog`(`vehicledeviceid`, `speed`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_config
-- ----------------------------
DROP TABLE IF EXISTS `temp_config`;
CREATE TABLE `temp_config`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type_desc` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `engine_speed` int(11) NULL DEFAULT NULL,
  `score` int(11) NULL DEFAULT NULL,
  `min_engine_speed` int(11) NULL DEFAULT NULL,
  `max_engine_speed` int(11) NULL DEFAULT NULL,
  `speed` int(11) NULL DEFAULT NULL,
  `va_speed` int(11) NULL DEFAULT NULL,
  `time_interval` int(11) NULL DEFAULT NULL,
  `finished` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_electric02
-- ----------------------------
DROP TABLE IF EXISTS `temp_electric02`;
CREATE TABLE `temp_electric02`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `soc` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOC',
  `buscurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线电流',
  `chargercurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线充电电流',
  `mcvoltagefront` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器前段电压',
  `mcvoltagerear` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器后端电压',
  `mccurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器电流',
  `bcvoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电压',
  `bccurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电流',
  `bccurentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输入电流',
  `bctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机温度',
  `motorspeed` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机转速',
  `mctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器温度',
  `opivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输入电流',
  `opitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器温度',
  `apivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输入电流',
  `apitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机制动踏板位置',
  `batteryentemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱内环境最高温度',
  `bmvoltagehigh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低电压',
  `bmtemplow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低温度',
  `wiremesh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线网单次累计耗电量',
  `currentrecycle` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '回收电流',
  `motortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机温度',
  `batterycount` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包总数N',
  `batterysn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包包号',
  `batterymaxtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最高温度',
  `batterymintemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压电池电流',
  `remainenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '剩余能量',
  `batterytotalvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池总电压',
  `singlehightemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高温度',
  `singlelowtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低温度',
  `singlehighvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高电压',
  `singlelowvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低电压',
  `insulresisvalue` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '液体燃料消耗量',
  `vin` varchar(17) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `cpcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电流',
  `cpvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电压',
  `cptemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电温度',
  `cpcheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩故障代码',
  `chargecardinfo` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电卡信息',
  `chargeduration` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电持续时间',
  `motorbusbarcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机母线电流',
  `busbaroutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（电池）总线放电电流',
  `consumeperday` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '日总电耗',
  `bmslifesignal` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMSlife信号',
  `singlemaxvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1节数',
  `singlemaxvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2',
  `singlemaxvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2箱号',
  `singlemaxvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2节数',
  `singlemaxvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3',
  `singlemaxvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3箱号',
  `singlemaxvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3节数',
  `singlemaxvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4',
  `singlemaxvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4箱号',
  `singlemaxvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4节数',
  `singleminvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1',
  `singleminvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1节数',
  `singleminvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2',
  `singleminvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2箱号',
  `singleminvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2节数',
  `singleminvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3',
  `singleminvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3箱号',
  `singleminvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3节数',
  `singleminvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4',
  `singleminvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4箱号',
  `singleminvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4节数',
  `singlemaxtemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1箱号',
  `singlemaxtemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2',
  `singlemaxtemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2箱号',
  `singlemaxtemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3',
  `singlemaxtemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3箱号',
  `singlemaxtemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4',
  `singlemaxtemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4箱号',
  `singlemintemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1箱号',
  `singlemintemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2',
  `singlemintemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2箱号',
  `singlemintemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3',
  `singlemintemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3箱号',
  `singlemintemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4',
  `singlemintemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4箱号',
  `bmstotalconsume` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)总电耗',
  `batchargevolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池充电电压',
  `batchargemaxvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最高单体电压',
  `batchargeminvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最低单体电压',
  `vcucode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU系统故障码',
  `controllerlife` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车控制器life',
  `cursingdistance` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '续航里程',
  `transducerbusvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动变频器母线电压',
  `motortorque` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机扭矩',
  `motorpower` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机功率',
  `motorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机电流',
  `dcstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC启动指令',
  `acstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/AC（空压机）启动指令',
  `dcoutvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电压',
  `dcoutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电流',
  `dcinvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输入电压',
  `dcradiatortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC散热器温度',
  `dccheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC故障代码',
  `mcucheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU系统故障代码',
  `soerelayeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOE电容电量',
  `chargeeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电电量',
  `generatorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机电流',
  `pdbtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '配电盒温度',
  `cumulativechargtime` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计充电时间',
  `outputenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '输出能量',
  `vehiclestate` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车状态',
  `startuptime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有启动时间',
  `shutdowntime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有熄火时间',
  UNIQUE INDEX `uix_devid_time_elecana`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE,
  INDEX `idx_time_devid_eanlog`(`vehicledeviceid`, `time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车模拟量信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_electricstate
-- ----------------------------
DROP TABLE IF EXISTS `temp_electricstate`;
CREATE TABLE `temp_electricstate`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车载终端设备号',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0),
  `electricbrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电制动',
  `resistancebrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电阻制动',
  `networkmode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线网模式',
  `auxiliarymode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅源模式',
  `limpstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '跛行状态',
  `offstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '脱网状态',
  `drive` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动',
  `motorreversal` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机反转',
  `work` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '运行',
  `halt` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '停机',
  `motormontrolfanopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器风扇开',
  `motorfanopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机风扇开',
  `highpressurecharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '高压充电',
  `chargeconnectindicate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电连接器指示',
  `breakstate` varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '制动踏板状态',
  `engineready` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力系统就绪',
  `emergencypoweroff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '紧急下电请求状态',
  `ecarcurrentstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电车当前状态',
  `balancestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '均衡状态',
  `batterycoolstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池冷却状态',
  `bmsstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS状态',
  `mcucheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU自检状态',
  `bmscheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS自检状态',
  `bmschargestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS充电状态',
  `bmsplugstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS充电插头连接状态',
  `ecarwholestat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆当前状态',
  `ecarctrlmutexstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车控制器系统互锁状态',
  `vcucheckstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU自检状态',
  `bmsdismissstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS解除状态命令',
  `oilpumpenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵使能',
  `airpumpenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵使能',
  `dcdcenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC使能',
  `acenable` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调使能',
  `chargerelaystat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电继电器状态',
  `mainmotorrelaystat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '主电机继电器状态',
  `batteryheatstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池加热状态',
  `dcdcstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-DC状态',
  `dcacctrlstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC-AC控制器工作状态',
  `bmsp1olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第1箱在线状态',
  `bmsp2olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第2箱在线状态',
  `bmsp3olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第3箱在线状态',
  `bmsp4olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第4箱在线状态',
  `bmsp5olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第5箱在线状态',
  `bmsp6olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第6箱在线状态',
  `bmsp7olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第7箱在线状态',
  `bmsp8olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第8箱在线状态',
  `bmsp9olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第9箱在线状态',
  `bmsp10olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第10箱在线状态',
  `bmsp11olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第11箱在线状态',
  `bmsp12olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第12箱在线状态',
  `bmsp13olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第13箱在线状态',
  `bmsp14olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第14箱在线状态',
  `bmsp15olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第15箱在线状态',
  `bmsp16olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第16箱在线状态',
  `bmsp17olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第17箱在线状态',
  `bmsp18olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第18箱在线状态',
  `bmsp19olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第19箱在线状态',
  `bmsp20olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第20箱在线状态',
  `bmsp21olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第21箱在线状态',
  `bmsp22olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第22箱在线状态',
  `bmsp23olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第23箱在线状态',
  `bmsp24olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第24箱在线状态',
  `bmsp25olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第25箱在线状态',
  `bmsp26olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第26箱在线状态',
  `bmsp27olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第27箱在线状态',
  `bmsp28olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第28箱在线状态',
  `bmsp29olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第29箱在线状态',
  `bmsp30olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第30箱在线状态',
  `bmsp31olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第31箱在线状态',
  `bmsp32olstat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（BMS）第32箱在线状态',
  `vin` varchar(17) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VIN码',
  `bmsSbAverageOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS电池均衡激活',
  `bmsReady` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS准备就绪',
  `dischargeToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '放电接触器已闭合',
  `highVolToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压接触器闭合',
  `highVolToucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压接触器断开',
  `toucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '接触器吸合',
  `toucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '接触器断开',
  `chargeToucherOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电接触器断开',
  `chargeToucherOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电接触器闭合',
  `powerSbCharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力蓄电池充电',
  `bmsPassiveControlMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS被动控制模式',
  `chargeTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电指示',
  `evSwitch` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'EV开关',
  `highVolPreCharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压预充电',
  `assiChargerOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅助充电机开启',
  `assiChargerOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '辅助充电机闭合',
  `highVolPowerOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压电源接通',
  `turnAssi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '转向助力',
  `powerModeTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '动力模式指示',
  `bmsOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMS掉线',
  `vcuOff` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU掉线',
  `inverterModuleOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '逆变模块起机',
  `choppingModuleOn` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '斩波模块起机',
  `dischargeRelayConnected` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '放电继电器粘连',
  `turnInputOverVol` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '转向输入过压',
  `detectorBonding` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '检测仪搭铁',
  `increaseMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '增程模式',
  `capTouchActive` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电容接触器有效',
  `eqKeepMode` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电量保持模式',
  `chargeError` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电错误',
  `checkTip` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '诊断指示',
  `highVolInterLock` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压互锁状态',
  `impactSignal` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '碰撞信号状态',
  `obligate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预留',
  PRIMARY KEY (`id`, `time`) USING BTREE,
  UNIQUE INDEX `uix_devid_time_elesta`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elevst`(`time`) USING BTREE,
  INDEX `idx_time_devid_es`(`vehicledeviceid`, `time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1176637609 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车专有状态信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_state1
-- ----------------------------
DROP TABLE IF EXISTS `temp_state1`;
CREATE TABLE `temp_state1`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆状态信息1编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `frontdooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门开',
  `middledooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门开',
  `middledoor2open` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2开',
  `reardooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门开',
  `leftfrontdooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门开',
  `leftmiddledooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门开',
  `leftreardooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门开',
  `rightfrontdooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门开',
  `rightmiddledooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门开',
  `rightreardooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门开',
  `leftdoorallopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左侧门全开',
  `rightdoorallopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右侧门全开',
  `alldooropen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '所有门开',
  `disabledoor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '禁止所有门开',
  `leftdoorallshut` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左侧门全关',
  `rightdoorallshut` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右侧门全关',
  `alldoorshut` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '所有门关',
  `frontdoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门开提示灯',
  `middledoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门开提示灯',
  `middledoor2notify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2开提示灯',
  `reardoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门开提示灯',
  `leftfrontdoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门开提示灯',
  `leftmiddledoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门开提示灯',
  `leftreardoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门开提示灯',
  `rightfrontdoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门开提示灯',
  `rightmiddledoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门开提示灯',
  `rightreardoornotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门开提示灯',
  `pgear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'P档',
  `rgear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'R档',
  `ngear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'N档',
  `dgear` varchar(4) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'D档(1-6档）',
  `handbrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '手刹',
  `brake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '制动',
  `abs` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ABS工作',
  `ebs` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'EBS工作',
  `frontdoorbell` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门下车铃',
  `middledoorbell` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门下车铃',
  `reardoorbell` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门下车铃',
  `retardnotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器工作指示',
  `retardrear1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器1档',
  `retardrear2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器2档',
  `retardrear3` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器3档',
  `retardrear4` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器4档',
  `hingestop` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '铰接停止',
  `hingework` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '铰接工作',
  `hingebrake` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '铰接制动',
  `lightfar` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '远光灯',
  `lightnear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '近光灯',
  `foglightfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前雾灯',
  `foglightrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后雾灯',
  `lightsmall` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '小灯（位置灯）',
  `spotlightfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门开射灯',
  `spotlightmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门开射灯',
  `spotlightmiddle2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2开射灯',
  `spotlightrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门开射灯',
  `spotlightleftfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门开射灯',
  `spotlightleftmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门开射灯',
  `spotlightleftrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门开射灯',
  `spotlightrightfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门开射灯',
  `spotlightrightmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门开射灯',
  `spotlightrightrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门开射灯',
  `leftlamp` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左日光灯',
  `rightlamp` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右日光灯',
  `turnlampleft` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左转向灯',
  `turnlampright` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右转向灯',
  `brakelight` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '刹车灯',
  `reverselight` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '倒车灯',
  `hornelect` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电喇叭',
  `hornair` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气喇叭',
  `wiperhigh` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮高速',
  `wiperlow` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮低速',
  `wipergap1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮间隙1',
  `wipergap2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮间隙2',
  `wipergap3` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮间隙3',
  `wipergap4` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮间隙4',
  `wiperpower` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮电源',
  `wiper` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮喷淋',
  `wiperwheel` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮凸轮',
  `clutch` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '离合器',
  `clutchfan` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '离合器风扇',
  `panelhign` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '自动踏板高端位',
  `panellow` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '自动踏板低端位',
  `panelpower` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '自动踏步供电',
  `panelout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '自动踏步伸出',
  `counterpower` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '投币机翻板电源',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `obligate1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预留',
  `obligate2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预留',
  UNIQUE INDEX `uix_devid_time_sta1`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels1`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆状态信息表1' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_state2
-- ----------------------------
DROP TABLE IF EXISTS `temp_state2`;
CREATE TABLE `temp_state2`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆状态信息2编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `leftcabindoor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左舱门开',
  `rightcabindoor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右舱门开',
  `rearcabindoor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后舱门状态',
  `safedoor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '安全门开',
  `enginestop` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机停止',
  `enginemaintain` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机维护',
  `enginediagnosis` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机诊断',
  `engineawaitstart` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机等待启动',
  `enginediagnosisrequest` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机诊断请求',
  `alternatorcharge` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机充电指示',
  `alternatorcharge2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机充电指示2',
  `alternatorcharge3` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机充电指示3',
  `lubricate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '集中润滑',
  `asr` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ASR闪码',
  `retarderoperate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '缓速器使能',
  `bridgelock` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '随动桥锁止',
  `wheeldifferential` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮间差速锁指示',
  `axisdifferential` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轴间差速锁指示',
  `conditioncooling` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调制冷',
  `conditionair` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调换气',
  `conditionclutch` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调离合器',
  `dryernotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '干燥器工作指示',
  `motorpreheat` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机预热指示',
  `lightguide` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '路牌灯',
  `lightshoulder` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '路肩灯',
  `lightreading` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '阅读灯',
  `lightticketsfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前售票灯',
  `lightticketsmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中售票灯',
  `lightticketsrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后售票灯',
  `lightdaytime` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '昼行灯',
  `lightdriver` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机灯',
  `cruisework` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '巡航工作',
  `cruiseset` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '巡航设置',
  `cruiseboost` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '巡航提升',
  `cruisedrop` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '巡航下降',
  `cruiserecover` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '巡航恢复',
  `requestservice` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '请求服务',
  `requeststop` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '请求停车',
  `idlingboost` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '怠速提升',
  `idlingdrop` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '怠速下降',
  `ventilatorfrontin` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前换气扇入',
  `ventilatorfrontout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前换气扇出',
  `ventilatormiddlein` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中换气扇入',
  `ventilatormiddleout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中换气扇出',
  `ventilatorrearin` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后换气扇入',
  `ventilatorrearout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后换气扇出',
  `defroster1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '除霜器1',
  `defroster2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '除霜器2',
  `rearviewheating` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后视镜加热',
  `radiator1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '散热器1',
  `radiator2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '散热器2',
  `heater` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '加热器',
  `airsuspensionup` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空气悬架上升',
  `airsuspensiondown` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空气悬架下降',
  `airsuspensionreset` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空气悬架复位',
  `ecasheel` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ECAS侧倾',
  `ecasheight` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ECAS高度',
  `ecasworking` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ECAS工作',
  `lighterpower` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '点烟器电源',
  `driverfan1` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机风扇1',
  `driverfan2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机风扇2',
  `curtainup` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '窗帘上升',
  `curtaindown` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '窗帘下降',
  `powerslot` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '投币机电源',
  `powerwc` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'WC电源开关',
  `powermonitor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '监视器电源',
  `powerincarmonitor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车内显示屏电源',
  `powerreceiver` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '收放机电源',
  `powercondition` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调照明电源',
  `tvpowerfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前电视电源',
  `tvpowerrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后电视电源',
  `tvpackfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前电视收起',
  `tvpackrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后电视收起',
  `tvpopupfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前电视弹出',
  `tvpopuprear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后电视弹出',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `obligate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '预留',
  UNIQUE INDEX `uix_devid_time_sta2`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels1`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆状态信息表2' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for temp_state3
-- ----------------------------
DROP TABLE IF EXISTS `temp_state3`;
CREATE TABLE `temp_state3`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆状态信息3编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `antipfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门防夹',
  `antipmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门防夹',
  `antipmiddle2` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2防夹',
  `antiprear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门防夹',
  `antipleftfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门防夹',
  `antipleftmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门防夹',
  `antipleftrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门防夹',
  `antiprightfront` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门防夹',
  `antiprightmiddle` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门防夹',
  `antiprightrear` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门防夹',
  `reliefrotate` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '安全阀旋转',
  `reliefopen` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '安全阀打开',
  `emecapout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车外应急阀盖打开',
  `emergencyout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车外应急阀打开',
  `emecapin` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车内应急阀盖打开',
  `emergencyin` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车内应急阀打开',
  `emecapfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门内应急阀盖打开',
  `emergencyfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门内应急阀打开',
  `emecapfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门外应急阀盖打开',
  `emergencyfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '前门外应急阀打开',
  `emecapmi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门内应急阀盖打开',
  `emergencymi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门内应急阀打开',
  `emecapmo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门外应急阀盖打开',
  `emergencymo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门外应急阀打开',
  `emecapm2i` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2内应急阀盖打开',
  `emergencym2i` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2内应急阀打开',
  `emecapm2o` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2外应急阀盖打开',
  `emergencym2o` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '中门2外应急阀打开',
  `emecapri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门内应急阀盖打开',
  `emergencyri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门内应急阀打开',
  `emecapro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门外应急阀盖打开',
  `emergencyro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '后门外应急阀打开',
  `emecaplfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门内应急阀盖打开',
  `emergencylfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门内应急阀打开',
  `emecaplfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门外应急阀盖打开',
  `emergencylfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左前门外应急阀打开',
  `emecaplmi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门内应急阀盖打开',
  `emergencylmi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门内应急阀打开',
  `emecaplmo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门外应急阀盖打开',
  `emergencylmo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左中门外应急阀打开',
  `emecaplri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门内应急阀盖打开',
  `emergencylri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门内应急阀打开',
  `emecaplro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门外应急阀盖打开',
  `emergencylro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '左后门外应急阀打开',
  `emecaprfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门内应急阀盖打开',
  `emergencyrfi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门内应急阀打开',
  `emecaprfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门外应急阀盖打开',
  `emergencyrfo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右前门外应急阀打开',
  `emecaprmi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门内应急阀盖打开',
  `emergencyrmi` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门内应急阀打开',
  `emecaprmo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门外应急阀盖打开',
  `emergencyrmo` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右中门外应急阀打开',
  `emecaprri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门内应急阀盖打开',
  `emergencyrri` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门内应急阀打开',
  `emecaprro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门外应急阀盖打开',
  `emergencyrro` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '右后门外应急阀打开',
  `absdiagnosisrequest` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ABS诊断请求',
  `disabledhelp` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '残疾人求助',
  `ptonotify` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '取力器指示',
  `ptonotifyhigh` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '取力器高档指示',
  `ptonotifylow` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '取力器低档指示',
  `accelstatus` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油门状态',
  `conditionon` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调启动',
  `conditionmegpower` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调励磁电源',
  `conditionidlingboost` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '空调怠速提升',
  `contackbuzzer` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '接触蜂鸣报警',
  `lightcorridor` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '走廊照明灯',
  `lightsterilize` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '消毒灯',
  `lightluggage` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '行李仓灯',
  `lightnight` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '夜间照明灯',
  `wheelchairout` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮椅不在位',
  `wheelchairbelt` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮椅安全带',
  `safebelt` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '安全带',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `keyacc` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '钥匙1（ACC）',
  `keyon` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '钥匙2(ON)',
  `keystart` varchar(2) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '钥匙3（START）',
  UNIQUE INDEX `uix_devid_time_sta3`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_vels3`(`time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '车辆状态信息表3' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app`;
CREATE TABLE `terminal_app`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `device_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备id',
  `app_type_id` bigint(11) NOT NULL COMMENT 'app类型id',
  `app_name` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'app名称-appTypeName',
  `running_state` tinyint(3) NOT NULL DEFAULT 0 COMMENT '终端运行状态0-正常，1-异常',
  `running_state_name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '正常运行' COMMENT '终端运行状态名称',
  `target_version_id` bigint(255) UNSIGNED NULL DEFAULT NULL COMMENT '目标版本',
  `target_version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version_state` tinyint(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '版本管理状态 0-未设置目标版本，10-未设置目标已收到确认，20-已设置未确认，30-一致，40-不一致',
  `version_id` bigint(20) NULL DEFAULT NULL,
  `version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `protocol_id` bigint(20) NULL DEFAULT NULL COMMENT '协议',
  `protocol_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '协议名称',
  `update_state` int(10) NOT NULL DEFAULT 190 COMMENT '升级状态-0-下载完成，10-正在进行MD5校验，20-MD5校验失败，30-MD5校验成功，40-准备安装，50-开始安装，60-安装中，70-安装失败，80-安装完成，90-尝试启动主程序，100-程序启动中，110-启动失败，120-启动成功，130-正在验证主程序状态，140-验证成功，150-验证失败，160-监测程序是否可以上传数据，170-通过上传数据监测，180-未通过上传数据监测，190-通过所有验证升级完成，200-尝试重新安装，210-尝试回滚版本',
  `activity_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应最新升级状态日志id',
  `version_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应的最新version日志id',
  `is_lock` tinyint(4) NOT NULL DEFAULT 0 COMMENT '这个App应用是否处于一个升级任务中，0-没有，1-有',
  `create_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '更新用户',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  `ts` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '时间戳',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `unin_app_id`(`device_id`, `app_type_id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_running_state`(`running_state`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 18656 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '被管理的终端app列表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_activity_log
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_activity_log`;
CREATE TABLE `terminal_app_activity_log`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `version_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '版本日志id',
  `app_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app id',
  `app_name` varchar(80) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `version_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '当前版本',
  `version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `target_version_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `target_version` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `last_update_state` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `update_state` varchar(30) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `log` varchar(2048) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '终端错误日志描述或是摘要',
  `log_type` tinyint(3) UNSIGNED NULL DEFAULT 0 COMMENT '日志类型，0-文本，1-文件',
  `log_url` varchar(200) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '日志下载地址',
  `ts` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27610 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '应用分为两种日志，版本变更日志，版本变更日志包含的版本活动日志\r\n这个表描述版本活动日志' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_copy
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_copy`;
CREATE TABLE `terminal_app_copy`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `device_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备id',
  `app_type_id` bigint(11) NOT NULL COMMENT 'app类型id',
  `app_name` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'app名称-appTypeName',
  `running_state` tinyint(3) NOT NULL DEFAULT 0 COMMENT '终端运行状态0-正常，1-异常',
  `running_state_name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '正常运行' COMMENT '终端运行状态名称',
  `target_version_id` bigint(255) UNSIGNED NULL DEFAULT NULL COMMENT '目标版本',
  `target_version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version_state` tinyint(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '版本管理状态 0-未设置目标版本，10-未设置目标已收到确认，20-已设置未确认，30-一致，40-不一致',
  `version_id` bigint(20) NULL DEFAULT NULL,
  `version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `protocol_id` bigint(20) NULL DEFAULT NULL COMMENT '协议',
  `protocol_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '协议名称',
  `update_state` int(10) NOT NULL DEFAULT 190 COMMENT '升级状态-0-下载完成，10-正在进行MD5校验，20-MD5校验失败，30-MD5校验成功，40-准备安装，50-开始安装，60-安装中，70-安装失败，80-安装完成，90-尝试启动主程序，100-程序启动中，110-启动失败，120-启动成功，130-正在验证主程序状态，140-验证成功，150-验证失败，160-监测程序是否可以上传数据，170-通过上传数据监测，180-未通过上传数据监测，190-通过所有验证升级完成，200-尝试重新安装，210-尝试回滚版本',
  `activity_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应最新升级状态日志id',
  `version_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应的最新version日志id',
  `is_lock` tinyint(4) NOT NULL DEFAULT 0 COMMENT '这个App应用是否处于一个升级任务中，0-没有，1-有',
  `create_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '更新用户',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  `ts` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '时间戳',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `unin_app_id`(`device_id`, `app_type_id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_running_state`(`running_state`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11850 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '被管理的终端app列表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_old
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_old`;
CREATE TABLE `terminal_app_old`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `device_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备id',
  `app_type_id` bigint(11) NOT NULL COMMENT 'app类型id',
  `app_name` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'app名称-appTypeName',
  `running_state` tinyint(3) NOT NULL DEFAULT 0 COMMENT '终端运行状态0-正常，1-异常',
  `running_state_name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '正常运行' COMMENT '终端运行状态名称',
  `target_version_id` bigint(255) UNSIGNED NULL DEFAULT NULL COMMENT '目标版本',
  `target_version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version_state` tinyint(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '版本管理状态 0-未设置目标版本，10-未设置目标已收到确认，20-已设置未确认，30-一致，40-不一致',
  `version_id` bigint(20) NULL DEFAULT NULL,
  `version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `protocol_id` bigint(20) NULL DEFAULT NULL COMMENT '协议',
  `protocol_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '协议名称',
  `update_state` int(10) NOT NULL DEFAULT 190 COMMENT '升级状态-0-下载完成，10-正在进行MD5校验，20-MD5校验失败，30-MD5校验成功，40-准备安装，50-开始安装，60-安装中，70-安装失败，80-安装完成，90-尝试启动主程序，100-程序启动中，110-启动失败，120-启动成功，130-正在验证主程序状态，140-验证成功，150-验证失败，160-监测程序是否可以上传数据，170-通过上传数据监测，180-未通过上传数据监测，190-通过所有验证升级完成，200-尝试重新安装，210-尝试回滚版本',
  `activity_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应最新升级状态日志id',
  `version_log_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT 'app对应的最新version日志id',
  `is_lock` tinyint(4) NOT NULL DEFAULT 0 COMMENT '这个App应用是否处于一个升级任务中，0-没有，1-有',
  `create_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '更新用户',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  `ts` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '时间戳',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `unin_app_id`(`device_id`, `app_type_id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_running_state`(`running_state`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11536 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '被管理的终端app列表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_state_log
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_state_log`;
CREATE TABLE `terminal_app_state_log`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `app_id` bigint(20) UNSIGNED NOT NULL,
  `app_name` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `protocol_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `protocol_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `last_state` tinyint(4) NOT NULL DEFAULT 0 COMMENT '上一个状态',
  `current_state` tinyint(4) NOT NULL DEFAULT 0 COMMENT '当前状态',
  `ts` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0),
  `log` varchar(2048) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '异常时，写入的日志',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `pk_app_id`(`app_id`) USING BTREE,
  INDEX `pk_version_id`(`version_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 697724 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '终端运行状态日志表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_type
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_type`;
CREATE TABLE `terminal_app_type`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `app_key` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `type_name` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型名称',
  `remark` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`, `app_key`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  UNIQUE INDEX `pk_app_key`(`app_key`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_app_version_log
-- ----------------------------
DROP TABLE IF EXISTS `terminal_app_version_log`;
CREATE TABLE `terminal_app_version_log`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `app_id` bigint(20) UNSIGNED NOT NULL,
  `app_name` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号+应用名称',
  `version_id` bigint(20) UNSIGNED NULL DEFAULT NULL COMMENT '当前版本id',
  `version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '当前版本名称',
  `target_version_id` bigint(20) UNSIGNED NOT NULL COMMENT '目标版本id',
  `target_version` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '目标升级版本',
  `state` tinyint(4) UNSIGNED NOT NULL DEFAULT 0 COMMENT '版本变更状态0-升级中，1-升级完成，2-升级失败',
  `state_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `ts` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_app_id`(`app_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17841 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '描述app曾经发生的版本变更历史' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_authorities
-- ----------------------------
DROP TABLE IF EXISTS `terminal_authorities`;
CREATE TABLE `terminal_authorities`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `authority` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `tag` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0-admin,1-user',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `ix_auth_username`(`username`, `authority`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_sys_log
-- ----------------------------
DROP TABLE IF EXISTS `terminal_sys_log`;
CREATE TABLE `terminal_sys_log`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `operation` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户操作',
  `time` int(11) NULL DEFAULT NULL COMMENT '响应时间',
  `method` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '请求方法',
  `params` varchar(5000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `ip` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'IP地址',
  `gmt_create` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19338 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '系统日志' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_task
-- ----------------------------
DROP TABLE IF EXISTS `terminal_task`;
CREATE TABLE `terminal_task`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `task_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '任务名称',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `app_number` int(10) UNSIGNED NOT NULL COMMENT '任务涉及的app数量',
  `departments` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '任务涉及的所有机构',
  `finished_number` int(11) UNSIGNED NULL DEFAULT NULL,
  `percent` float NULL DEFAULT NULL COMMENT '任务完成比例',
  `state` tinyint(4) NOT NULL DEFAULT 0 COMMENT '任务状态 0-正在进行，1-已经删除，2-已经完成',
  `create_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  `ts` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `pk_id`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 40 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_task_detail
-- ----------------------------
DROP TABLE IF EXISTS `terminal_task_detail`;
CREATE TABLE `terminal_task_detail`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `task_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  `app_id` bigint(20) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`id`) USING BTREE,
  INDEX `idx_task_id`(`task_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 107 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_users
-- ----------------------------
DROP TABLE IF EXISTS `terminal_users`;
CREATE TABLE `terminal_users`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `enabled` tinyint(1) UNSIGNED NOT NULL DEFAULT 1 COMMENT '1-开启，0-关闭',
  `real_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `picture` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `pk_id`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for terminal_version
-- ----------------------------
DROP TABLE IF EXISTS `terminal_version`;
CREATE TABLE `terminal_version`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `file_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文件真实名称',
  `md5_code` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '对文件的md5校验码',
  `version_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述名称',
  `app_type_id` bigint(20) NULL DEFAULT NULL,
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `url` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文件的下载地址',
  `md5_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '存储在服务器上的名称',
  `file_size` double UNSIGNED NULL DEFAULT NULL COMMENT '文件大小 单位：MB',
  `type` tinyint(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '0-安装程序，1-协议',
  `create_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `update_user` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `ts` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `is_delete` tinyint(4) NULL DEFAULT 0 COMMENT '是否删除 0-存在 1-删除不存在',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `pk_id`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 295 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '上传的文件' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test
-- ----------------------------
DROP TABLE IF EXISTS `test`;
CREATE TABLE `test`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车载设备id',
  `vehicletypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆类型编号',
  `datatypeid` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '数据类型',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `soc` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOC',
  `buscurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线电流',
  `chargercurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线充电电流',
  `mcvoltagefront` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器前段电压',
  `mcvoltagerear` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器后端电压',
  `mccurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器电流',
  `bcvoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电压',
  `bccurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输出电流',
  `bccurentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机输入电流',
  `bctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电机温度',
  `motorspeed` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机转速',
  `mctemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机控制器温度',
  `opivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电压',
  `opicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输出电流',
  `opicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器输入电流',
  `opitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '油泵逆变器温度',
  `apivoltageout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电压',
  `apicurrentout` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输出电流',
  `apicurrentin` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器输入电流',
  `apitemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '气泵逆变器温度',
  `driveraccelpanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机加速踏板位置',
  `driverbrakepanel` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '司机制动踏板位置',
  `batteryentemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池箱内环境最高温度',
  `bmvoltagehigh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最高电压',
  `bmvoltagelow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低电压',
  `bmtemplow` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池模块最低温度',
  `wiremesh` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '线网单次累计耗电量',
  `currentrecycle` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '回收电流',
  `motortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机温度',
  `batterycount` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包总数N',
  `batterysn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包包号',
  `batterymaxtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最高温度',
  `batterymintemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池包最低温度',
  `highvoltbatcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '高压电池电流',
  `remainenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '剩余能量',
  `batterytotalvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池总电压',
  `singlehightemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高温度',
  `singlelowtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低温度',
  `singlehighvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最高电压',
  `singlelowvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '单体最低电压',
  `insulresisvalue` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '绝缘电阻值',
  `liquidconsumeval` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '液体燃料消耗量',
  `vin` varchar(17) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆VIN号',
  `cpcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电流',
  `cpvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电电压',
  `cptemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩充电温度',
  `cpcheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电桩故障代码',
  `chargecardinfo` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电卡信息',
  `chargeduration` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电持续时间',
  `motorbusbarcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机母线电流',
  `busbaroutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（电池）总线放电电流',
  `consumeperday` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '日总电耗',
  `bmslifesignal` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'BMSlife信号',
  `singlemaxvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1',
  `singlemaxvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1箱号',
  `singlemaxvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压1节数',
  `singlemaxvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2',
  `singlemaxvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2箱号',
  `singlemaxvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压2节数',
  `singlemaxvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3',
  `singlemaxvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3箱号',
  `singlemaxvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压3节数',
  `singlemaxvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4',
  `singlemaxvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4箱号',
  `singlemaxvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最高单体电压4节数',
  `singleminvolt1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1',
  `singleminvolt1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1箱号',
  `singleminvolt1count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压1节数',
  `singleminvolt2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2',
  `singleminvolt2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2箱号',
  `singleminvolt2count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压2节数',
  `singleminvolt3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3',
  `singleminvolt3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3箱号',
  `singleminvolt3count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压3节数',
  `singleminvolt4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4',
  `singleminvolt4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4箱号',
  `singleminvolt4count` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '最低单体电压4节数',
  `singlemaxtemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1',
  `singlemaxtemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度1箱号',
  `singlemaxtemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2',
  `singlemaxtemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度2箱号',
  `singlemaxtemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3',
  `singlemaxtemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度3箱号',
  `singlemaxtemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4',
  `singlemaxtemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最高温度4箱号',
  `singlemintemp1` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1',
  `singlemintemp1sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度1箱号',
  `singlemintemp2` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2',
  `singlemintemp2sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度2箱号',
  `singlemintemp3` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3',
  `singlemintemp3sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度3箱号',
  `singlemintemp4` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4',
  `singlemintemp4sn` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池组最低温度4箱号',
  `bmstotalconsume` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '(BMS)总电耗',
  `batchargevolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池充电电压',
  `batchargemaxvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最高单体电压',
  `batchargeminvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '（充电时）最低单体电压',
  `vcucode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'VCU系统故障码',
  `controllerlife` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车控制器life',
  `cursingdistance` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '续航里程',
  `transducerbusvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动变频器母线电压',
  `motortorque` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机扭矩',
  `motorpower` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机功率',
  `motorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '驱动电机电流',
  `dcstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC启动指令',
  `acstartcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/AC（空压机）启动指令',
  `dcoutvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电压',
  `dcoutcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输出电流',
  `dcinvolt` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC输入电压',
  `dcradiatortemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC散热器温度',
  `dccheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'DC/DC故障代码',
  `mcucheckcode` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'MCU系统故障代码',
  `soerelayeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'SOE电容电量',
  `chargeeq` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '充电电量',
  `generatorcurrent` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机电流',
  `pdbtemp` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '配电盒温度',
  `cumulativechargtime` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '累计充电时间',
  `outputenergy` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '输出能量',
  `vehiclestate` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '整车状态',
  `startuptime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有启动时间',
  `shutdowntime` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'V0电车模拟量专有熄火时间',
  UNIQUE INDEX `uix_devid_time_elecana`(`vehicledeviceid`, `time`) USING BTREE,
  INDEX `idx_time_elev`(`time`) USING BTREE,
  INDEX `idx_time_devid_eanlog`(`vehicledeviceid`, `time`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '电车模拟量信息表' ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_1
-- ----------------------------
DROP TABLE IF EXISTS `test_1`;
CREATE TABLE `test_1`  (
  `vehicle_no` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 4766 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_2
-- ----------------------------
DROP TABLE IF EXISTS `test_2`;
CREATE TABLE `test_2`  (
  `a` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `b` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `c` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_execution
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_execution`;
CREATE TABLE `test_batch_job_execution`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NULL DEFAULT NULL,
  `JOB_INSTANCE_ID` bigint(20) NOT NULL,
  `CREATE_TIME` datetime(0) NOT NULL,
  `START_TIME` datetime(0) NULL DEFAULT NULL,
  `END_TIME` datetime(0) NULL DEFAULT NULL,
  `STATUS` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_CODE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_MESSAGE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `LAST_UPDATED` datetime(0) NULL DEFAULT NULL,
  `JOB_CONFIGURATION_LOCATION` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`JOB_EXECUTION_ID`) USING BTREE,
  INDEX `JOB_INST_EXEC_FK`(`JOB_INSTANCE_ID`) USING BTREE,
  CONSTRAINT `test_batch_job_execution_ibfk_1` FOREIGN KEY (`JOB_INSTANCE_ID`) REFERENCES `test_batch_job_instance` (`JOB_INSTANCE_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_execution_context
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_execution_context`;
CREATE TABLE `test_batch_job_execution_context`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `SHORT_CONTEXT` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `SERIALIZED_CONTEXT` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `test_batch_job_execution_context_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `test_batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_execution_params
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_execution_params`;
CREATE TABLE `test_batch_job_execution_params`  (
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `TYPE_CD` varchar(6) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `KEY_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `STRING_VAL` varchar(250) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `DATE_VAL` datetime(0) NULL DEFAULT NULL,
  `LONG_VAL` bigint(20) NULL DEFAULT NULL,
  `DOUBLE_VAL` double NULL DEFAULT NULL,
  `IDENTIFYING` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  INDEX `JOB_EXEC_PARAMS_FK`(`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `test_batch_job_execution_params_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `test_batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1061 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_execution_seq
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_execution_seq`;
CREATE TABLE `test_batch_job_execution_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_instance
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_instance`;
CREATE TABLE `test_batch_job_instance`  (
  `JOB_INSTANCE_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NULL DEFAULT NULL,
  `JOB_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `JOB_KEY` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`JOB_INSTANCE_ID`) USING BTREE,
  UNIQUE INDEX `JOB_INST_UN`(`JOB_NAME`, `JOB_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_job_seq
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_job_seq`;
CREATE TABLE `test_batch_job_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_step_execution
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_step_execution`;
CREATE TABLE `test_batch_step_execution`  (
  `STEP_EXECUTION_ID` bigint(20) NOT NULL,
  `VERSION` bigint(20) NOT NULL,
  `STEP_NAME` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `JOB_EXECUTION_ID` bigint(20) NOT NULL,
  `START_TIME` datetime(0) NOT NULL,
  `END_TIME` datetime(0) NULL DEFAULT NULL,
  `STATUS` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `COMMIT_COUNT` bigint(20) NULL DEFAULT NULL,
  `READ_COUNT` bigint(20) NULL DEFAULT NULL,
  `FILTER_COUNT` bigint(20) NULL DEFAULT NULL,
  `WRITE_COUNT` bigint(20) NULL DEFAULT NULL,
  `READ_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `WRITE_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `PROCESS_SKIP_COUNT` bigint(20) NULL DEFAULT NULL,
  `ROLLBACK_COUNT` bigint(20) NULL DEFAULT NULL,
  `EXIT_CODE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `EXIT_MESSAGE` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `LAST_UPDATED` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`STEP_EXECUTION_ID`) USING BTREE,
  INDEX `JOB_EXEC_STEP_FK`(`JOB_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `test_batch_step_execution_ibfk_1` FOREIGN KEY (`JOB_EXECUTION_ID`) REFERENCES `test_batch_job_execution` (`JOB_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_step_execution_context
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_step_execution_context`;
CREATE TABLE `test_batch_step_execution_context`  (
  `STEP_EXECUTION_ID` bigint(20) NOT NULL,
  `SHORT_CONTEXT` varchar(2500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `SERIALIZED_CONTEXT` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`STEP_EXECUTION_ID`) USING BTREE,
  CONSTRAINT `test_batch_step_execution_context_ibfk_1` FOREIGN KEY (`STEP_EXECUTION_ID`) REFERENCES `test_batch_step_execution` (`STEP_EXECUTION_ID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_batch_step_execution_seq
-- ----------------------------
DROP TABLE IF EXISTS `test_batch_step_execution_seq`;
CREATE TABLE `test_batch_step_execution_seq`  (
  `ID` bigint(20) NOT NULL,
  `UNIQUE_KEY` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `UNIQUE_KEY_UN`(`UNIQUE_KEY`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for test_time
-- ----------------------------
DROP TABLE IF EXISTS `test_time`;
CREATE TABLE `test_time`  (
  `time` datetime(0) NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 2159349 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp2
-- ----------------------------
DROP TABLE IF EXISTS `tmp2`;
CREATE TABLE `tmp2`  (
  `vehicledeviceid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车辆状态信息2编号',
  `time` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '系统时间',
  `leftcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '左舱门开',
  `rightcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '右舱门开',
  `rearcabindoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后舱门状态',
  `safedoor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '安全门开',
  `enginemaintain` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机维护',
  `enginediagnosis` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机诊断',
  `engineawaitstart` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机等待启动',
  `enginediagnosisrequest` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机诊断请求',
  `alternatorcharge` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示',
  `alternatorcharge2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示2',
  `alternatorcharge3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发电机充电指示3',
  `lubricate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '集中润滑',
  `asr` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ASR',
  `bridgelock` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '随动桥锁止',
  `conditioncooling` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调制冷',
  `conditionair` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调换气',
  `conditionclutch` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调离合器',
  `motorpreheat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '发动机预热指示',
  `lightguide` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '路牌灯',
  `lightshoulder` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '路肩灯',
  `lightreading` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '阅读灯',
  `lightticketsfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前售票灯',
  `lightticketsrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后售票灯',
  `lightdaytime` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '昼行灯',
  `lightdriver` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机灯',
  `cruiseboost` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '巡航提升',
  `cruiserecover` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '巡航恢复',
  `requeststop` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '请求停车',
  `ventilatorfrontin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前换气扇入',
  `ventilatorfrontout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前换气扇出',
  `ventilatormiddlein` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中换气扇入',
  `ventilatormiddleout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中换气扇出',
  `ventilatorrearin` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后换气扇入',
  `ventilatorrearout` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后换气扇出',
  `defroster1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '除霜器1',
  `defroster2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '除霜器2',
  `rearviewheating` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后视镜加热',
  `radiator1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器1',
  `radiator2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '散热器2',
  `airsuspensionup` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架上升',
  `airsuspensiondown` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架下降',
  `airsuspensionreset` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空气悬架复位',
  `ecasheel` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS侧倾',
  `ecasheight` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS高度',
  `ecasworking` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ECAS工作',
  `lighterpower` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '点烟器电源',
  `driverfan1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '司机风扇1',
  `powerslot` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '投币机电源',
  `powermonitor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '监视器电源',
  `powerincarmonitor` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车内显示屏电源',
  `powerreceiver` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '收放机电源',
  `powercondition` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调照明电源',
  `tvpowerfront` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '前电视电源',
  `tvpowerrear` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后电视电源',
  `vehicletypeid` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `datatypeid` varchar(16) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL,
  `obligate` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '预留',
  `conditioneron` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调开关',
  `conditoncooling` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制冷模式',
  `conditionheating` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制热模式',
  `conditionfreshing` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '新风模式',
  `heatpdefostmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '热泵除霜模式',
  `coolingdefostmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制冷除霜模式',
  `bactericidalmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '杀菌模式',
  `ptcheatingmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'PTC加热模式',
  `hybridstopmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '混合动力停机模式',
  `highspeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '高速',
  `middlespeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '中速',
  `lowspeedmode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '低速',
  `chargeworkstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充放电状态',
  `runstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '运行状态',
  `allowhighvolt` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '允许上高压',
  `powerdownstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '下电状态',
  `lowtempstatus` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '低温状态',
  `rampstartstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '坡道起步工作状态',
  `brakepanelsignal` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动踏板信号',
  `motorenergyfeedback` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电机能量回收反馈',
  `oilpumpstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电动空压机油泵状态',
  `airpumpstat` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电动空压机气泵状态',
  `tyresensorstat1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态1',
  `tyresensorstat2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态2',
  `tyresensorstat3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态3',
  `tyresensorstat4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态4',
  `tyresensorstat5` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态5',
  `tyresensorstat6` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态6',
  `tyresensorstat7` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态7',
  `tyresensorstat8` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态8',
  `tyresensorstat9` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态9',
  `tyresensorstat10` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态10',
  `tyresensorstat11` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态11',
  `tyresensorstat12` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态12',
  `tyresensorstat13` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态13',
  `tyresensorstat14` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态14',
  `tyresensorstat15` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态15',
  `tyresensorstat16` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '车轮传感器状态16',
  `tyrestatus1` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态1',
  `tyrestatus2` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态2',
  `tyrestatus3` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态3',
  `tyrestatus4` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态4',
  `tyrestatus5` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态5',
  `tyrestatus6` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态6',
  `tyrestatus7` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态7',
  `tyrestatus8` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态8',
  `tyrestatus9` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态9',
  `tyrestatus10` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态10',
  `tyrestatus11` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态11',
  `tyrestatus12` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态12',
  `tyrestatus13` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态13',
  `tyrestatus14` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态14',
  `tyrestatus15` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态15',
  `tyrestatus16` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '轮胎状态16',
  `brakePressureSensorPowerupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '制动气压传感器电源',
  `ventilatorPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '换气扇电源',
  `ledElectronicCircuitBoardPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'LED电子路牌电源',
  `retarderPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '缓速器电源',
  `airConditioningPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调电源',
  `chargerPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '充电器电源',
  `infraredDevicePowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '红外装置电源',
  `atsThermalManagementSystemPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ATS热管理系统电源',
  `dryerPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '干燥器电源',
  `rearBootBoxPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '后启动盒电源',
  `absPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT 'ABS电源',
  `electroniclockPowerSupply` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '电子钟电源',
  `airconditioningfaultcode` varchar(2) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调故障码',
  `airconditioningoperatingmode` varchar(8) CHARACTER SET ascii COLLATE ascii_bin NULL DEFAULT NULL COMMENT '空调工作模式'
) ENGINE = InnoDB AUTO_INCREMENT = 65536 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_12121
-- ----------------------------
DROP TABLE IF EXISTS `tmp_12121`;
CREATE TABLE `tmp_12121`  (
  `vehicleId` int(11) NOT NULL DEFAULT 0 COMMENT '主键ID',
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deptId` int(11) NULL DEFAULT NULL COMMENT '所属线路编号',
  `vehicleType` varchar(30) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车型',
  `motorType` enum('1','2','3','4','5') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '车辆类型：\n1- 燃油车\n，2- 电车\n，3- 油电混合动力车\n，4- 燃气车\n，5- 气电混合动力车',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '设备号',
  `lineInfo` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '班线',
  `deviceFactoryNo` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '主机厂车辆自编号',
  `engineVinNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机VIN码',
  `oilBoxCap` int(11) NULL DEFAULT NULL COMMENT '油箱容量',
  `dayRunTime` int(11) NULL DEFAULT NULL COMMENT '每日行驶时间',
  `airBottleCap` int(11) NULL DEFAULT NULL COMMENT '气瓶容量',
  `batteryCap` int(11) NULL DEFAULT NULL COMMENT '电池电量',
  `eleCost` int(11) NULL DEFAULT NULL COMMENT '标准电耗',
  `gasCost` int(11) NULL DEFAULT NULL COMMENT '标准气耗',
  `oilCost` int(11) NULL DEFAULT NULL COMMENT '标准油耗',
  `engineModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发动机型号/厂家',
  `gearBoxModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '变速箱型号/厂家',
  `batteryModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电池型号/厂家',
  `dynamoModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '发电机型号/厂家',
  `tireModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '轮胎型号/厂家',
  `wheelaxlesModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车桥型号/厂家',
  `doorpumpModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '门泵型号/厂家',
  `fsbSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '总线厂家',
  `heaterSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '暖风厂家',
  `wiperSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '雨刮系统厂家',
  `lightswitchsupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '灯光组合开关厂家',
  `seatSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '座椅厂家',
  `tirepressureSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '胎压型号/厂家',
  `motorSupplier` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电机型号/厂家',
  `electricboxModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '电器盒型号/厂家',
  `absModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'ABS 型号/厂家',
  `brakeshoreModel` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '刹车蹄片型号/厂家',
  `isReparing` varchar(1) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT 'N' COMMENT '是否正在维修。改信息根据“车辆维护”信息，通过触发器自动修改',
  `expireDate` date NULL DEFAULT NULL COMMENT '车辆到期日期',
  `producer` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆生产厂家',
  `purchaseDate` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购买日期',
  `status` int(11) NOT NULL DEFAULT 1 COMMENT '汽车状态：1-正常    2-故障   3-维修',
  `paymentExpiredDate` date NULL DEFAULT NULL COMMENT '缴费到期时间',
  `online` tinyint(1) NULL DEFAULT 0,
  `paymentStatus` tinyint(1) NULL DEFAULT 1 COMMENT '是否欠费',
  `sim` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'sim卡信息',
  `vehicleSN` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆编号',
  `lastDataUpTime` int(11) NULL DEFAULT 0 COMMENT '数据最后更新时间',
  `alarm` tinyint(1) NULL DEFAULT 0 COMMENT '是否报警',
  `lastAlarmTime` int(11) NULL DEFAULT 0 COMMENT '报警最后更新时间',
  `vehicleManufacturer` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆厂商',
  `vin` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'vin',
  `vehicleNoColor` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车牌颜色',
  `vehicleConfig` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆配置名称',
  `productBatch` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'productBatch',
  `vehicleUse` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆用途\n',
  `puchaseField` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购车领域',
  `vehicleOperator` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '运营单位',
  `buyer` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '购买车主/购买单位',
  `manufactureDate` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '出厂日期',
  `protocolVersion` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '车辆应用协议版本',
  `createTime` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '录入时间',
  `offsetId` bigint(20) NULL DEFAULT -1 COMMENT '偏移量主键'
) ENGINE = InnoDB AUTO_INCREMENT = 2796 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm01
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm01`;
CREATE TABLE `tmp_alarm01`  (
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `alarmTypeId` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `alarmLevel` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警等级',
  `alarmtime` timestamp(0) NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '报警开始时间',
  `stime` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `ltime` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `etime` varchar(19) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `is_new` char(1) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 437 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm02
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm02`;
CREATE TABLE `tmp_alarm02`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `motortype` enum('1','2','3','4','5') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '车辆类型：\n1- 燃油车\n，2- 电车\n，3- 油电混合动力车\n，4- 燃气车\n，5- 气电混合动力车',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `stime` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `ltime` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `eTime` varchar(19) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `alarmLevel` bigint(21) UNSIGNED NULL DEFAULT NULL,
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `alarmtypeid` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `alarmflag` int(1) NOT NULL DEFAULT 0,
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `companyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `subCompanyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `groupDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `lineDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `is_new` char(1) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL
) ENGINE = InnoDB AUTO_INCREMENT = 117 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm03
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm03`;
CREATE TABLE `tmp_alarm03`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `motortype` enum('1','2','3','4','5') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '车辆类型：\n1- 燃油车\n，2- 电车\n，3- 油电混合动力车\n，4- 燃气车\n，5- 气电混合动力车',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmtime` datetime(0) NULL DEFAULT NULL,
  `duration` bigint(21) NULL DEFAULT NULL,
  `dismissTime` datetime(0) NULL DEFAULT NULL,
  `alarmLevel` bigint(21) UNSIGNED NULL DEFAULT NULL,
  `p_start` datetime(0) NULL DEFAULT NULL,
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL,
  `alarmtypeid` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型ID',
  `alarmflag` int(1) NOT NULL DEFAULT 0,
  `deptid` int(11) NULL DEFAULT NULL COMMENT '所属线路编号'
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm04
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm04`;
CREATE TABLE `tmp_alarm04`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `motortype` enum('1','2','3','4','5') CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '1' COMMENT '车辆类型：\n1- 燃油车\n，2- 电车\n，3- 油电混合动力车\n，4- 燃气车\n，5- 气电混合动力车',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmtime` datetime(0) NULL DEFAULT NULL,
  `duration` bigint(21) NULL DEFAULT NULL,
  `dismissTime` datetime(0) NULL DEFAULT NULL,
  `alarmLevel` bigint(21) UNSIGNED NULL DEFAULT NULL,
  `p_start` datetime(0) NULL DEFAULT NULL,
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL,
  `alarmtypeid` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型ID',
  `alarmflag` int(1) NOT NULL DEFAULT 0,
  `deptid` int(11) NULL DEFAULT NULL COMMENT '所属线路编号',
  `alarmlocation` binary(255) NULL DEFAULT NULL,
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `companyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `subCompanyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `groupDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称'
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm2
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm2`;
CREATE TABLE `tmp_alarm2`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `motortype` tinyint(1) NULL DEFAULT 4 COMMENT '车辆类型\n1 燃油车\n2 电车\n3 油电混合动力车\n4 燃气车\n5 气电混合动力车',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmtime` datetime(0) NULL DEFAULT NULL,
  `duration` bigint(21) NULL DEFAULT NULL,
  `dismissTime` datetime(0) NULL DEFAULT NULL,
  `alarmLevel` bigint(21) UNSIGNED NULL DEFAULT NULL,
  `p_start` datetime(0) NULL DEFAULT NULL,
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y',
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL,
  `alarmtypeid` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型ID',
  `alarmflag` int(1) NOT NULL DEFAULT 0,
  `companyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `companyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `subCompanyName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `subCompanyDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `groupName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '机构名称',
  `groupDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键',
  `lineName` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '线路名称',
  `lineDeptId` int(11) NOT NULL DEFAULT 0 COMMENT '机构主键'
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_alarm3
-- ----------------------------
DROP TABLE IF EXISTS `tmp_alarm3`;
CREATE TABLE `tmp_alarm3`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '车牌号',
  `deviceId` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备号',
  `driverName` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `motortype` tinyint(1) NULL DEFAULT 4 COMMENT '车辆类型\n1 燃油车\n2 电车\n3 油电混合动力车\n4 燃气车\n5 气电混合动力车',
  `alarmTypeName` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '报警类型中文名称',
  `alarmtime` datetime(0) NULL DEFAULT NULL COMMENT '报警开始时间',
  `duration` bigint(21) NULL DEFAULT NULL,
  `dismissTime` datetime(0) NULL DEFAULT NULL COMMENT '警报解除时间',
  `alarmLevel` bigint(21) UNSIGNED NULL DEFAULT NULL,
  `now()` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `gx` binary(255) NULL DEFAULT NULL,
  `gy` binary(255) NULL DEFAULT NULL,
  `lastAlarmTime` datetime(0) NULL DEFAULT NULL COMMENT '最后一次警报时间',
  `alarmtypeid` varchar(45) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '报警类型',
  `alarmflag` int(1) NOT NULL DEFAULT 0
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_driver_attendance
-- ----------------------------
DROP TABLE IF EXISTS `tmp_driver_attendance`;
CREATE TABLE `tmp_driver_attendance`  (
  `vehicleNo` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车牌号',
  `deviceid` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '车载设备id',
  `drivername` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '司机姓名',
  `driverid` int(11) NULL DEFAULT NULL COMMENT '司机id',
  `lineDeptid` int(11) NULL DEFAULT NULL COMMENT '线路id',
  `signintime` datetime(0) NULL DEFAULT NULL COMMENT '签到时间'
) ENGINE = InnoDB AUTO_INCREMENT = 172 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for tmp_gps
-- ----------------------------
DROP TABLE IF EXISTS `tmp_gps`;
CREATE TABLE `tmp_gps`  (
  `vehicledeviceid` varchar(16) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gx` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-X',
  `gy` varchar(45) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'GPS-Y'
) ENGINE = InnoDB AUTO_INCREMENT = 199 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for upareatable
-- ----------------------------
DROP TABLE IF EXISTS `upareatable`;
CREATE TABLE `upareatable`  (
  `upareaid` int(11) NOT NULL,
  `uptype` int(11) NULL DEFAULT NULL,
  `relateid` bigint(20) NULL DEFAULT NULL,
  `upareaname` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `upcorpname` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `flag` varchar(8) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `taskflag` bigint(20) NULL DEFAULT NULL,
  `listorder` bigint(20) NULL DEFAULT NULL,
  `remarkstr` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  INDEX `idx_upidtyp_upareatable`(`upareaid`, `uptype`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10582 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Compact;

-- ----------------------------
-- View structure for v_alarmlevelandname_line
-- ----------------------------
DROP VIEW IF EXISTS `v_alarmlevelandname_line`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_alarmlevelandname_line` AS select `a`.`alarmtypename` AS `alarmtypename`,`b`.`alarmLevel` AS `alarmLevel`,`b`.`deptId` AS `deptid` from (`t_vehiclealarmtype` `a` join `t_alarmlevelinfo` `b` on((`a`.`alarmname` = `b`.`alarmTypeName`))) union select `a`.`alarmtypename` AS `alarmtypename`,`b`.`alarmLevel` AS `alarmLevel`,`b`.`deptId` AS `deptid` from (`t_vehiclealarmtype2` `a` join `t_alarmlevelinfo` `b` on((`a`.`alarmname` = `b`.`alarmTypeName`)));

-- ----------------------------
-- View structure for v_alarmsummary
-- ----------------------------
DROP VIEW IF EXISTS `v_alarmsummary`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_alarmsummary` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`name` AS `lineName`,`line`.`dept_id` AS `lineDeptId`,`a`.`id` AS `id`,`a`.`vehicleNo` AS `vehicleNo`,`a`.`deviceId` AS `deviceId`,`a`.`driverName` AS `driverName`,`a`.`alarmType` AS `alarmType`,`a`.`alarmstarttime` AS `alarmstarttime`,`a`.`duration` AS `duration`,`a`.`alarmlocation` AS `alarmlocation`,`a`.`motorType` AS `motorType`,`a`.`dismissTime` AS `dismissTime`,`a`.`alarmLevel` AS `alarmLevel`,`a`.`statTime` AS `statTime`,`a`.`gx` AS `gx`,`a`.`gy` AS `gy`,`a`.`lastAlarmTime` AS `lastAlarmTime` from (((((`mauth_dept` `company` join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) join `t_vehicleinfo` `v` on((`line`.`dept_id` = `v`.`deptId`))) join `t_alarmsummary` `a` on((`v`.`vehicleNo` = `a`.`vehicleNo`))) where ((`company`.`level` = 1) and (`a`.`alarmstarttime` < (now() - interval '5:00' day_second))) order by `a`.`vehicleNo`;

-- ----------------------------
-- View structure for v_alarmtype
-- ----------------------------
DROP VIEW IF EXISTS `v_alarmtype`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_alarmtype` AS select `t_vehiclealarmtype`.`alarmtypeid` AS `alarmtypeid`,`t_vehiclealarmtype`.`alarmtypename` AS `alarmtypename`,`t_vehiclealarmtype`.`alarmname` AS `alarmname`,`t_vehiclealarmtype`.`key` AS `key`,`t_vehiclealarmtype`.`type` AS `type`,`t_vehiclealarmtype`.`parenttype` AS `parenttype`,1 AS `alarmNameId` from `t_vehiclealarmtype` union all select `t_vehiclealarmtype2`.`alarmtypeid` AS `alarmtypeid`,`t_vehiclealarmtype2`.`alarmtypename` AS `alarmtypename`,`t_vehiclealarmtype2`.`alarmname` AS `alarmname`,`t_vehiclealarmtype2`.`key` AS `key`,`t_vehiclealarmtype2`.`type` AS `type`,`t_vehiclealarmtype2`.`parenttype` AS `parenttype`,2 AS `alarmNameId` from `t_vehiclealarmtype2` union all select `t_vehiclealarmtype3`.`alarmtypeid` AS `alarmtypeid`,`t_vehiclealarmtype3`.`alarmtypename` AS `alarmtypename`,`t_vehiclealarmtype3`.`alarmname` AS `alarmname`,`t_vehiclealarmtype3`.`key` AS `key`,`t_vehiclealarmtype3`.`type` AS `type`,`t_vehiclealarmtype3`.`parenttype` AS `parenttype`,3 AS `alarmNameId` from `t_vehiclealarmtype3`;

-- ----------------------------
-- View structure for v_all_alarmtype
-- ----------------------------
DROP VIEW IF EXISTS `v_all_alarmtype`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_all_alarmtype` AS select `t_vehiclealarmtype`.`alarmtypename` AS `alarmtypename`,`t_vehiclealarmtype`.`alarmname` AS `alarmname`,`t_vehiclealarmtype`.`type` AS `type`,`t_vehiclealarmtype`.`parenttype` AS `parenttype` from `t_vehiclealarmtype` union all select `t_vehiclealarmtype2`.`alarmtypename` AS `alarmtypename`,`t_vehiclealarmtype2`.`alarmname` AS `alarmname`,`t_vehiclealarmtype2`.`type` AS `type`,`t_vehiclealarmtype2`.`parenttype` AS `parenttype` from `t_vehiclealarmtype2`;

-- ----------------------------
-- View structure for v_company
-- ----------------------------
DROP VIEW IF EXISTS `v_company`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_company` AS select `mauth_dept`.`dept_id` AS `dept_id`,`mauth_dept`.`name` AS `name`,`mauth_dept`.`code` AS `code`,`mauth_dept`.`area_number` AS `area_number`,`mauth_dept`.`lft` AS `lft`,`mauth_dept`.`rgt` AS `rgt`,`mauth_dept`.`remark` AS `remark`,`mauth_dept`.`created_at` AS `created_at`,`mauth_dept`.`updated_at` AS `updated_at`,`mauth_dept`.`level` AS `level` from `mauth_dept` where (`mauth_dept`.`level` = 1);

-- ----------------------------
-- View structure for v_companyinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_companyinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_companyinfo` AS (select `h`.`companyId` AS `companyId`,`h`.`companyName` AS `companyName`,`h`.`companyAddr` AS `companyAddr`,`h`.`adminName` AS `adminName`,`h`.`adminTel` AS `adminTel`,`h`.`deptId` AS `deptId`,`h`.`operatorName` AS `operatorName`,`h`.`unifiedSocialCreditCode` AS `unifiedSocialCreditCode`,`h`.`operatorAddr` AS `operatorAddr`,`h`.`operatorTel` AS `operatorTel` from (`mauth_dept` `head` join `t_companyinfo` `h` on(((`h`.`deptId` = `head`.`dept_id`) and (`h`.`level` = 1)))) where (`head`.`level` = 1));

-- ----------------------------
-- View structure for v_departplaninfo
-- ----------------------------
DROP VIEW IF EXISTS `v_departplaninfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_departplaninfo` AS select `tmd`.`companyName` AS `companyName`,`tmd`.`subCompanyName` AS `subCompanyName`,`tmd`.`groupName` AS `groupName`,`tmd`.`lineName` AS `lineName`,`d`.`id` AS `id`,`d`.`vehicleid` AS `vehicleid`,`d`.`shiftNo` AS `shiftNo`,`d`.`lineid` AS `lineid`,`d`.`startstop` AS `startstop`,`d`.`endstop` AS `endstop`,`d`.`planDepartTime` AS `planDepartTime`,`d`.`planArrivalTime` AS `planArrivalTime`,`d`.`runtime` AS `runtime`,`d`.`planman` AS `planman`,`d`.`plantime` AS `plantime`,`d`.`vehicleNo` AS `vehicleNo`,`d`.`actualDepartTime` AS `actualDepartTime`,`d`.`actualArrivalTime` AS `actualArrivalTime` from ((`t_departplan` `d` join `t_vehicleinfo` `v` on((`d`.`vehicleid` = `v`.`vehicleId`))) left join `t_mauth_dept` `tmd` on((`v`.`deptId` = `tmd`.`lineDeptId`)));

-- ----------------------------
-- View structure for v_driverinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_driverinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_driverinfo` AS select `tm`.`companyName` AS `companyName`,`tm`.`companyDeptId` AS `companyDeptId`,`tm`.`subCompanyName` AS `subCompanyName`,`tm`.`subCompanyDeptId` AS `subCompanyDeptId`,`tm`.`groupName` AS `groupName`,`tm`.`groupDeptId` AS `groupDeptId`,`tm`.`lineName` AS `lineName`,`tm`.`lineDeptId` AS `lineDeptId`,`driver`.`driverid` AS `driverid`,`driver`.`drivername` AS `drivername`,`driver`.`drivercard` AS `drivercard`,`driver`.`licensedate` AS `licensedate`,`driver`.`entrantdate` AS `entrantdate`,`driver`.`vehicleid` AS `vehicleid`,`driver`.`weixinbind` AS `weixinbind`,`driver`.`safedrivetime` AS `safedrivetime`,`driver`.`drivingyears` AS `drivingyears`,`driver`.`accidentonce` AS `accidentonce`,`driver`.`deptid` AS `deptid`,`driver`.`drivertel` AS `drivertel`,`driver`.`drivercid` AS `drivercid`,`driver`.`empNo` AS `empNo` from (`t_mauth_dept` `tm` join `t_driverinfo` `driver` on((`tm`.`lineDeptId` = `driver`.`deptid`)));

-- ----------------------------
-- View structure for v_driverinfo_all
-- ----------------------------
DROP VIEW IF EXISTS `v_driverinfo_all`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_driverinfo_all` AS select `tm`.`companyName` AS `companyName`,`tm`.`companyDeptId` AS `companyDeptId`,`tm`.`subCompanyName` AS `subCompanyName`,`tm`.`subCompanyDeptId` AS `subCompanyDeptId`,`tm`.`groupName` AS `groupName`,`tm`.`groupDeptId` AS `groupDeptId`,`tm`.`lineName` AS `lineName`,`tm`.`lineDeptId` AS `lineDeptId`,`driver`.`driverid` AS `driverid`,`driver`.`drivername` AS `drivername`,`driver`.`drivercard` AS `drivercard`,`driver`.`licensedate` AS `licensedate`,`driver`.`entrantdate` AS `entrantdate`,`driver`.`vehicleid` AS `vehicleid`,`driver`.`weixinbind` AS `weixinbind`,`driver`.`safedrivetime` AS `safedrivetime`,`driver`.`drivingyears` AS `drivingyears`,`driver`.`accidentonce` AS `accidentonce`,`driver`.`deptid` AS `deptid`,`driver`.`drivertel` AS `drivertel`,`driver`.`drivercid` AS `drivercid`,`driver`.`empNo` AS `empNo` from (`t_mauth_dept` `tm` left join `t_driverinfo` `driver` on((`tm`.`lineDeptId` = `driver`.`deptid`)));

-- ----------------------------
-- View structure for v_driver_attendance
-- ----------------------------
DROP VIEW IF EXISTS `v_driver_attendance`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_driver_attendance` AS select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineName` AS `lineName`,`a`.`lineDeptId` AS `linedeptId`,`attendance`.`id` AS `id`,`attendance`.`driverId` AS `driverId`,`attendance`.`driverName` AS `driverName`,`attendance`.`vehicleNo` AS `vehicleNo`,`attendance`.`deviceId` AS `deviceId`,`attendance`.`lineId` AS `lineId`,`attendance`.`empno` AS `empno`,`attendance`.`signInTime` AS `signInTime`,`attendance`.`signOutTime` AS `signOutTime`,`attendance`.`workHours` AS `workHours`,`attendance`.`created_at` AS `created_at`,`attendance`.`updated_at` AS `updated_at` from ((`t_mauth_dept` `a` join `t_driverinfo` `driver` on((`a`.`lineDeptId` = `driver`.`deptid`))) join `driver_attendance` `attendance` on((`attendance`.`driverId` = `driver`.`driverid`)));

-- ----------------------------
-- View structure for v_driver_attendance_new
-- ----------------------------
DROP VIEW IF EXISTS `v_driver_attendance_new`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_driver_attendance_new` AS (select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineName` AS `lineName`,`a`.`lineDeptId` AS `linedeptId`,`attendance`.`id` AS `id`,`attendance`.`driverId` AS `driverId`,`attendance`.`driverName` AS `driverName`,`attendance`.`vehicleNo` AS `vehicleNo`,`attendance`.`deviceId` AS `deviceId`,`attendance`.`lineId` AS `lineId`,`attendance`.`empno` AS `empno`,`attendance`.`signInTime` AS `signInTime`,`attendance`.`signOutTime` AS `signOutTime`,`attendance`.`workHours` AS `workHours`,`attendance`.`created_at` AS `created_at`,`attendance`.`updated_at` AS `updated_at`,`vehicle`.`deptId` AS `deptId` from (((`t_mauth_dept` `a` join `t_driverinfo` `driver` on((`a`.`lineDeptId` = `driver`.`deptid`))) join `driver_attendance` `attendance` on((`attendance`.`driverId` = `driver`.`driverid`))) join `t_vehicleinfo` `vehicle` on((`vehicle`.`deviceId` = `attendance`.`deviceId`))));

-- ----------------------------
-- View structure for v_drivingconfig
-- ----------------------------
DROP VIEW IF EXISTS `v_drivingconfig`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_drivingconfig` AS select `stat_drivingconfig`.`type` AS `type`,group_concat(concat(`stat_drivingconfig`.`para_value`,':',`stat_drivingconfig`.`remark`) order by `stat_drivingconfig`.`dept_id` ASC separator ';') AS `remark`,`stat_drivingconfig`.`dept_id` AS `dept_id` from `stat_drivingconfig` where ((`stat_drivingconfig`.`parameter` <> 'score') and (`stat_drivingconfig`.`dept_id` is not null)) group by `stat_drivingconfig`.`dept_id`,`stat_drivingconfig`.`type`;

-- ----------------------------
-- View structure for v_energyinfo_sum
-- ----------------------------
DROP VIEW IF EXISTS `v_energyinfo_sum`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_energyinfo_sum` AS select `t_energyinfo`.`vehicleNo` AS `vehicleNo`,sum((case `t_energyinfo`.`energyType` when 'oil' then `t_energyinfo`.`energyVolume` else 0 end)) AS `oilSum`,sum((case `t_energyinfo`.`energyType` when 'gas' then `t_energyinfo`.`energyVolume` else 0 end)) AS `gasSum`,sum((case `t_energyinfo`.`energyType` when 'ele' then `t_energyinfo`.`energyVolume` else 0 end)) AS `eleSum` from `t_energyinfo` group by `t_energyinfo`.`vehicleNo`;

-- ----------------------------
-- View structure for v_groupinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_groupinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_groupinfo` AS (select `head`.`name` AS `companyName`,`head`.`dept_id` AS `companyDeptId`,`branch`.`name` AS `subCompanyName`,`branch`.`dept_id` AS `subCompanyDeptId`,`g`.`groupId` AS `groupId`,`g`.`groupNo` AS `groupNo`,`g`.`groupName` AS `groupName`,`g`.`groupAddr` AS `groupAddr`,`g`.`vehicleNum` AS `vehicleNum`,`g`.`lineNum` AS `lineNum`,`g`.`driverNum` AS `driverNum`,`g`.`repareFactory` AS `repareFactory`,`g`.`deptId` AS `deptId`,`g`.`ownerNo` AS `ownerNo` from (((`mauth_dept` `head` join `mauth_dept` `branch` on(((`branch`.`lft` > `head`.`lft`) and (`branch`.`rgt` < `head`.`rgt`) and (`branch`.`level` = 2)))) join `mauth_dept` `grp` on(((`grp`.`lft` > `branch`.`lft`) and (`grp`.`rgt` < `branch`.`rgt`) and (`grp`.`level` = 3)))) join `t_vehiclegroup` `g` on((`grp`.`dept_id` = `g`.`deptId`))) where (`head`.`level` = 1));

-- ----------------------------
-- View structure for v_line
-- ----------------------------
DROP VIEW IF EXISTS `v_line`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_line` AS select `mauth_dept`.`dept_id` AS `dept_id`,`mauth_dept`.`name` AS `name`,`mauth_dept`.`code` AS `code`,`mauth_dept`.`area_number` AS `area_number`,`mauth_dept`.`lft` AS `lft`,`mauth_dept`.`rgt` AS `rgt`,`mauth_dept`.`remark` AS `remark`,`mauth_dept`.`created_at` AS `created_at`,`mauth_dept`.`updated_at` AS `updated_at`,`mauth_dept`.`level` AS `level` from `mauth_dept` where (`mauth_dept`.`level` = 4);

-- ----------------------------
-- View structure for v_lineinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_lineinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_lineinfo` AS select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineDeptId` AS `lineDeptId`,`l`.`lineId` AS `lineId`,`l`.`lineName` AS `lineName`,`l`.`lineAddr` AS `lineAddr`,`l`.`lineAdmin` AS `lineAdmin`,`l`.`siteNum` AS `siteNum`,`l`.`adminTel` AS `adminTel`,`l`.`lineType` AS `lineType`,`l`.`onPrice` AS `onPrice`,`l`.`upDistance` AS `upDistance`,`l`.`downDistance` AS `downDistance`,`l`.`upSiteNum` AS `upSiteNum`,`l`.`downSiteNum` AS `downSiteNum`,`l`.`parkLotGPSX` AS `parkLotGPSX`,`l`.`parkLotGPSY` AS `parkLotGPSY`,`l`.`deptId` AS `deptId` from (`t_mauth_dept` `a` join `t_lineinfo` `l` on((`a`.`lineDeptId` = `l`.`deptId`)));

-- ----------------------------
-- View structure for v_mauth
-- ----------------------------
DROP VIEW IF EXISTS `v_mauth`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_mauth` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`name` AS `lineName`,`line`.`dept_id` AS `lineDeptId` from (((`mauth_dept` `company` join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) where (`company`.`level` = 1);

-- ----------------------------
-- View structure for v_mauthdept_deviceinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_mauthdept_deviceinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_mauthdept_deviceinfo` AS (select `t_mauth_dept`.`companyName` AS `companyName`,`t_mauth_dept`.`companyDeptId` AS `companyDeptId`,`t_mauth_dept`.`subCompanyName` AS `subCompanyName`,`t_mauth_dept`.`subCompanyDeptId` AS `subCompanyDeptId`,`t_mauth_dept`.`groupName` AS `groupName`,`t_mauth_dept`.`groupDeptId` AS `groupDeptId`,`t_mauth_dept`.`lineName` AS `lineName`,`t_mauth_dept`.`lineDeptId` AS `lineDeptId`,`mauth_dept`.`company_sign` AS `company_sign`,`t_vehicleinfo`.`vehicleNo` AS `vehicleno`,`t_vehicleinfo`.`deviceId` AS `deviceid`,`t_vehicleinfo`.`vehicleId` AS `vehicleId`,`t_vehicleinfo`.`protocolVersion` AS `protocolVersion` from ((`t_vehicleinfo` left join `t_mauth_dept` on((`t_mauth_dept`.`lineDeptId` = `t_vehicleinfo`.`deptId`))) left join `mauth_dept` on((`t_mauth_dept`.`companyDeptId` = `mauth_dept`.`dept_id`))));

-- ----------------------------
-- View structure for v_mauth_fortree
-- ----------------------------
DROP VIEW IF EXISTS `v_mauth_fortree`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_mauth_fortree` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`company`.`company_sign` AS `companySign`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`name` AS `lineName`,`line`.`dept_id` AS `lineDeptId` from (((`mauth_dept` `company` left join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) left join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) left join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) where (`company`.`level` = 1);

-- ----------------------------
-- View structure for v_payinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_payinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_payinfo` AS select `t_payinfo`.`id` AS `id`,`t_payinfo`.`companyId` AS `companyId`,`t_payinfo`.`companyName` AS `companyName`,`t_payinfo`.`payTime` AS `payTime`,`t_payinfo`.`payAmount` AS `payAmount`,`t_payinfo`.`payUnit` AS `payUnit`,`t_payinfo`.`payDiscount` AS `payDiscount`,`t_payinfo`.`receiveUnit` AS `ReceiveUnit`,`t_payinfo`.`payee` AS `payee` from `t_payinfo`;

-- ----------------------------
-- View structure for v_paymentvehicles
-- ----------------------------
DROP VIEW IF EXISTS `v_paymentvehicles`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_paymentvehicles` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`name` AS `lineName`,`line`.`dept_id` AS `lineDeptId`,`pv`.`id` AS `id`,`pv`.`paymentId` AS `paymentId`,`pv`.`vehicleNo` AS `vehicleNo`,`pv`.`lastTime` AS `lastTime`,`pv`.`newTime` AS `newTime` from (((((`mauth_dept` `company` join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) join `t_vehicleinfo` `v` on((`line`.`dept_id` = `v`.`deptId`))) join `t_paymentvehicles` `pv` on((`pv`.`vehicleNo` = `v`.`vehicleNo`))) where (`company`.`level` = 1);

-- ----------------------------
-- View structure for v_simple_vehicleinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_simple_vehicleinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_simple_vehicleinfo` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`name` AS `lineName`,`line`.`dept_id` AS `lineDeptId`,`v`.`vehicleId` AS `vehicleId`,`v`.`vehicleNo` AS `vehicleNo`,`v`.`deviceId` AS `deviceId` from ((((`mauth_dept` `company` join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) join `t_vehicleinfo` `v` on((`line`.`dept_id` = `v`.`deptId`))) where (`company`.`level` = 1);

-- ----------------------------
-- View structure for v_stat_driving_violation_detail
-- ----------------------------
DROP VIEW IF EXISTS `v_stat_driving_violation_detail`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_stat_driving_violation_detail` AS select `b`.`driverId` AS `driverId`,`b`.`driverName` AS `driverName`,`b`.`vehicleNo` AS `vehicleNo`,`a`.`vehicledeviceid` AS `vehicledeviceid`,`a`.`actiontype` AS `actiontype`,`a`.`actiontypeDesc` AS `actiontypeDesc`,`a`.`stat_date` AS `stat_date`,`a`.`begin_time` AS `begin_time`,`a`.`end_time` AS `end_time`,`a`.`score` AS `score` from (`stat_driving_violation_detail` `a` left join `driver_attendance` `b` on(((`a`.`vehicledeviceid` = `b`.`deviceId`) and (`b`.`signInTime` >= `a`.`stat_date`) and (`b`.`signInTime` < (`a`.`stat_date` + interval 1 day)))));

-- ----------------------------
-- View structure for v_stat_driving_violation_times
-- ----------------------------
DROP VIEW IF EXISTS `v_stat_driving_violation_times`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_stat_driving_violation_times` AS select `stat_driving_violation_summary`.`stat_date` AS `stat_date`,`stat_driving_violation_summary`.`driverId` AS `driverId`,`stat_driving_violation_summary`.`driverName` AS `drivername`,`stat_driving_violation_summary`.`deviceId` AS `deviceId`,`stat_driving_violation_summary`.`lineId` AS `lineId`,`stat_driving_violation_summary`.`lineName` AS `lineName`,`stat_driving_violation_summary`.`groupId` AS `groupId`,`stat_driving_violation_summary`.`groupName` AS `groupName`,`stat_driving_violation_summary`.`subCompanyId` AS `subCompanyId`,`stat_driving_violation_summary`.`subCompanyName` AS `subCompanyName`,`stat_driving_violation_summary`.`CompanyId` AS `companyId`,`stat_driving_violation_summary`.`CompanyName` AS `companyName`,sum(`stat_driving_violation_summary`.`scores`) AS `scores`,sum((case `stat_driving_violation_summary`.`actionType` when 'suddenlyBraking' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `suddenlyBraking`,sum((case `stat_driving_violation_summary`.`actionType` when 'suddenlySpeedUp' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `suddenlySpeedUp`,sum((case `stat_driving_violation_summary`.`actionType` when 'coastingWithEngineOff' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `coastingWithEngineOff`,sum((case `stat_driving_violation_summary`.`actionType` when 'coasting' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `coasting`,sum((case `stat_driving_violation_summary`.`actionType` when 'startAccelerationRapidly' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startAccelerationRapidly`,sum((case `stat_driving_violation_summary`.`actionType` when 'headLightOffAtNight' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `headLightOffAtNight`,sum((case `stat_driving_violation_summary`.`actionType` when 'overspeed' then `stat_driving_violation_summary`.`total_seconds` else 0 end)) AS `overspeed`,sum((case `stat_driving_violation_summary`.`actionType` when 'startWithDoorOpen' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startWithDoorOpen`,sum((case `stat_driving_violation_summary`.`actionType` when 'openDoorNotStopYet' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `openDoorNotStopYet`,sum((case `stat_driving_violation_summary`.`actionType` when 'longIdling' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `longIdling`,sum((case `stat_driving_violation_summary`.`actionType` when 'idlingWithAirConditionerOpen' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `idlingWithAirConditionerOpen`,sum((case `stat_driving_violation_summary`.`actionType` when 'engineOverspeed' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `engineOverspeed`,sum((case `stat_driving_violation_summary`.`actionType` when 'driveInNight' then `stat_driving_violation_summary`.`total_seconds` else 0 end)) AS `driveInNight`,sum((case `stat_driving_violation_summary`.`actionType` when 'startWithoutBrake' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startWithoutBrake`,sum((case `stat_driving_violation_summary`.`actionType` when 'fatigueDriving' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `fatigueDriving` from `stat_driving_violation_summary` group by `stat_driving_violation_summary`.`stat_date`,`stat_driving_violation_summary`.`driverId`,`stat_driving_violation_summary`.`driverName`,`stat_driving_violation_summary`.`deviceId`;

-- ----------------------------
-- View structure for v_stat_driving_violation_times_forbeijing
-- ----------------------------
DROP VIEW IF EXISTS `v_stat_driving_violation_times_forbeijing`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_stat_driving_violation_times_forbeijing` AS select `stat_driving_violation_summary`.`stat_date` AS `stat_date`,`stat_driving_violation_summary`.`driverId` AS `driverId`,`stat_driving_violation_summary`.`driverName` AS `driverName`,`t_vehicleinfo`.`vehicleNo` AS `vehicleNo`,`t_vehicleinfo`.`vehicleSN` AS `vin`,`stat_driving_violation_summary`.`deviceId` AS `deviceId`,`stat_driving_violation_summary`.`lineId` AS `lineId`,`stat_driving_violation_summary`.`lineName` AS `lineName`,`stat_driving_violation_summary`.`groupId` AS `groupId`,`stat_driving_violation_summary`.`groupName` AS `groupName`,`stat_driving_violation_summary`.`subCompanyId` AS `subCompanyId`,`stat_driving_violation_summary`.`subCompanyName` AS `subCompanyName`,`stat_driving_violation_summary`.`CompanyId` AS `companyId`,`stat_driving_violation_summary`.`CompanyName` AS `companyName`,sum(`stat_driving_violation_summary`.`scores`) AS `scores`,sum((case `stat_driving_violation_summary`.`actionType` when 'suddenlyBraking' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `suddenlyBraking`,sum((case `stat_driving_violation_summary`.`actionType` when 'suddenlySpeedUp' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `suddenlySpeedUp`,sum((case `stat_driving_violation_summary`.`actionType` when 'coastingWithEngineOff' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `coastingWithEngineOff`,sum((case `stat_driving_violation_summary`.`actionType` when 'coasting' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `coasting`,sum((case `stat_driving_violation_summary`.`actionType` when 'startAccelerationRapidly' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startAccelerationRapidly`,sum((case `stat_driving_violation_summary`.`actionType` when 'headLightOffAtNight' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `headLightOffAtNight`,sum((case `stat_driving_violation_summary`.`actionType` when 'overspeed' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `overspeed`,sum((case `stat_driving_violation_summary`.`actionType` when 'startWithDoorOpen' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startWithDoorOpen`,sum((case `stat_driving_violation_summary`.`actionType` when 'openDoorNotStopYet' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `openDoorNotStopYet`,sum((case `stat_driving_violation_summary`.`actionType` when 'longIdling' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `longIdling`,sum((case `stat_driving_violation_summary`.`actionType` when 'idlingWithAirConditionerOpen' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `idlingWithAirConditionerOpen`,sum((case `stat_driving_violation_summary`.`actionType` when 'engineOverspeed' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `engineOverspeed`,sum((case `stat_driving_violation_summary`.`actionType` when 'driveInNight' then `stat_driving_violation_summary`.`total_seconds` else 0 end)) AS `driveInNight`,sum((case `stat_driving_violation_summary`.`actionType` when 'startWithoutBrake' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `startWithoutBrake`,sum((case `stat_driving_violation_summary`.`actionType` when 'fatigueDriving' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `fatigueDriving`,sum((case `stat_driving_violation_summary`.`actionType` when 'smokingAlarm' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `smokingAlarm`,sum((case `stat_driving_violation_summary`.`actionType` when 'lookLeftAndRight' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `lookLeftAndRight`,sum((case `stat_driving_violation_summary`.`actionType` when 'calling' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `calling`,sum((case `stat_driving_violation_summary`.`actionType` when 'danger' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `danger`,sum((case `stat_driving_violation_summary`.`actionType` when 'beSleepy' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `beSleepy`,sum((case `stat_driving_violation_summary`.`actionType` when 'blockCamera' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `blockCamera`,sum((case `stat_driving_violation_summary`.`actionType` when 'wrongTrumpet' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `wrongTrumpet`,sum((case `stat_driving_violation_summary`.`actionType` when 'overSpeedonBanma' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `overSpeedonBanma`,sum((case `stat_driving_violation_summary`.`actionType` when 'leftOnLine' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `leftOnLine`,sum((case `stat_driving_violation_summary`.`actionType` when 'RightOnLine' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `RightOnLine`,sum((case `stat_driving_violation_summary`.`actionType` when 'lowSpeedCrash' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `lowSpeedCrash`,sum((case `stat_driving_violation_summary`.`actionType` when 'shortDistance' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `shortDistance`,sum((case `stat_driving_violation_summary`.`actionType` when 'wrongInSite' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `wrongInSite`,sum((case `stat_driving_violation_summary`.`actionType` when 'wrongTurnAround' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `wrongTurnAround`,sum((case `stat_driving_violation_summary`.`actionType` when 'routeKeepAbilityDown' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `routeKeepAbilityDown`,sum((case `stat_driving_violation_summary`.`actionType` when 'areaOverSpeed' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `areaOverSpeed`,sum((case `stat_driving_violation_summary`.`actionType` when 'jumpSite' then `stat_driving_violation_summary`.`totalNum` else 0 end)) AS `jumpSite` from (`stat_driving_violation_summary` join `t_vehicleinfo` on((`stat_driving_violation_summary`.`deviceId` = `t_vehicleinfo`.`deviceId`))) group by `stat_driving_violation_summary`.`stat_date`,`stat_driving_violation_summary`.`driverId`,`stat_driving_violation_summary`.`driverName`,`stat_driving_violation_summary`.`deviceId`;

-- ----------------------------
-- View structure for v_stat_driving_violation_times_forbeijing_byday
-- ----------------------------
DROP VIEW IF EXISTS `v_stat_driving_violation_times_forbeijing_byday`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_stat_driving_violation_times_forbeijing_byday` AS select `stat_driving_violation_day`.`stat_date` AS `stat_date`,`stat_driving_violation_day`.`driverId` AS `driverId`,`stat_driving_violation_day`.`driverName` AS `driverName`,`t_vehicleinfo`.`vehicleNo` AS `vehicleNo`,`t_vehicleinfo`.`vehicleSN` AS `vin`,`stat_driving_violation_day`.`deviceId` AS `deviceId`,`stat_driving_violation_day`.`lineId` AS `lineId`,`stat_driving_violation_day`.`lineName` AS `lineName`,`stat_driving_violation_day`.`groupId` AS `groupId`,`stat_driving_violation_day`.`groupName` AS `groupName`,`stat_driving_violation_day`.`subCompanyId` AS `subCompanyId`,`stat_driving_violation_day`.`subCompanyName` AS `subCompanyName`,`stat_driving_violation_day`.`CompanyId` AS `companyId`,`stat_driving_violation_day`.`CompanyName` AS `companyName`,sum(`stat_driving_violation_day`.`scores`) AS `scores`,sum((case `stat_driving_violation_day`.`actionType` when 'suddenlyBraking' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `suddenlyBraking`,sum((case `stat_driving_violation_day`.`actionType` when 'suddenlySpeedUp' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `suddenlySpeedUp`,sum((case `stat_driving_violation_day`.`actionType` when 'coastingWithEngineOff' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `coastingWithEngineOff`,sum((case `stat_driving_violation_day`.`actionType` when 'coasting' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `coasting`,sum((case `stat_driving_violation_day`.`actionType` when 'startAccelerationRapidly' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `startAccelerationRapidly`,sum((case `stat_driving_violation_day`.`actionType` when 'headLightOffAtNight' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `headLightOffAtNight`,sum((case `stat_driving_violation_day`.`actionType` when 'overspeed' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `overspeed`,sum((case `stat_driving_violation_day`.`actionType` when 'startWithDoorOpen' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `startWithDoorOpen`,sum((case `stat_driving_violation_day`.`actionType` when 'openDoorNotStopYet' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `openDoorNotStopYet`,sum((case `stat_driving_violation_day`.`actionType` when 'longIdling' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `longIdling`,sum((case `stat_driving_violation_day`.`actionType` when 'idlingWithAirConditionerOpen' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `idlingWithAirConditionerOpen`,sum((case `stat_driving_violation_day`.`actionType` when 'engineOverspeed' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `engineOverspeed`,sum((case `stat_driving_violation_day`.`actionType` when 'driveInNight' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `driveInNight`,sum((case `stat_driving_violation_day`.`actionType` when 'startWithoutBrake' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `startWithoutBrake`,sum((case `stat_driving_violation_day`.`actionType` when 'fatigueDriving' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `fatigueDriving`,sum((case `stat_driving_violation_day`.`actionType` when 'smokingAlarm' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `smokingAlarm`,sum((case `stat_driving_violation_day`.`actionType` when 'lookLeftAndRight' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `lookLeftAndRight`,sum((case `stat_driving_violation_day`.`actionType` when 'calling' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `calling`,sum((case `stat_driving_violation_day`.`actionType` when 'danger' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `danger`,sum((case `stat_driving_violation_day`.`actionType` when 'beSleepy' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `beSleepy`,sum((case `stat_driving_violation_day`.`actionType` when 'blockCamera' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `blockCamera`,sum((case `stat_driving_violation_day`.`actionType` when 'wrongTrumpet' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `wrongTrumpet`,sum((case `stat_driving_violation_day`.`actionType` when 'overSpeedonBanma' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `overSpeedonBanma`,sum((case `stat_driving_violation_day`.`actionType` when 'leftOnLine' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `leftOnLine`,sum((case `stat_driving_violation_day`.`actionType` when 'RightOnLine' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `RightOnLine`,sum((case `stat_driving_violation_day`.`actionType` when 'lowSpeedCrash' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `lowSpeedCrash`,sum((case `stat_driving_violation_day`.`actionType` when 'shortDistance' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `shortDistance`,sum((case `stat_driving_violation_day`.`actionType` when 'wrongInSite' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `wrongInSite`,sum((case `stat_driving_violation_day`.`actionType` when 'wrongTurnAround' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `wrongTurnAround`,sum((case `stat_driving_violation_day`.`actionType` when 'routeKeepAbilityDown' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `routeKeepAbilityDown`,sum((case `stat_driving_violation_day`.`actionType` when 'areaOverSpeed' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `areaOverSpeed`,sum((case `stat_driving_violation_day`.`actionType` when 'jumpSite' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `jumpSite`,sum((case `stat_driving_violation_day`.`actionType` when 'noTurnLampOnSite' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `noTurnLampOnSite`,sum((case `stat_driving_violation_day`.`actionType` when 'outLine' then `stat_driving_violation_day`.`totalNum` else 0 end)) AS `outLine` from (`stat_driving_violation_day` join `t_vehicleinfo` on((`stat_driving_violation_day`.`deviceId` = `t_vehicleinfo`.`deviceId`))) group by `stat_driving_violation_day`.`stat_date`,`stat_driving_violation_day`.`driverId`,`stat_driving_violation_day`.`driverName`,`stat_driving_violation_day`.`deviceId`;

-- ----------------------------
-- View structure for v_stat_energy_saving_summary
-- ----------------------------
DROP VIEW IF EXISTS `v_stat_energy_saving_summary`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_stat_energy_saving_summary` AS select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineDeptId` AS `lineDeptId`,`a`.`lineName` AS `lineName`,`n`.`id` AS `id`,`n`.`vehicleNo` AS `vehicleNo`,`n`.`stat_date` AS `stat_date`,`n`.`idleTime` AS `idleTime`,`n`.`heaterTime` AS `heaterTime`,`n`.`conditionTime` AS `conditionTime`,`n`.`efficientSpeed` AS `efficientSpeed`,`n`.`efficientSpeedTime` AS `efficientSpeedTime`,`n`.`NotRunconditionTime` AS `NotRunconditionTime`,`n`.`greenRunTime` AS `greenRunTime`,`n`.`runTime` AS `runTime`,`n`.`engineOverRunTime` AS `engineOverRunTime`,`n`.`vehicledeviceid` AS `vehicledeviceid` from (((`t_mauth_dept` `a` join `t_lineinfo` `l` on((`a`.`lineDeptId` = `l`.`deptId`))) join `t_vehicleinfo` `v` on((`l`.`deptId` = `v`.`deptId`))) join `stat_energy_saving_summary` `n` on((`v`.`vehicleNo` = `n`.`vehicleNo`)));

-- ----------------------------
-- View structure for v_subcompany
-- ----------------------------
DROP VIEW IF EXISTS `v_subcompany`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_subcompany` AS select `mauth_dept`.`dept_id` AS `dept_id`,`mauth_dept`.`name` AS `name`,`mauth_dept`.`code` AS `code`,`mauth_dept`.`area_number` AS `area_number`,`mauth_dept`.`lft` AS `lft`,`mauth_dept`.`rgt` AS `rgt`,`mauth_dept`.`remark` AS `remark`,`mauth_dept`.`created_at` AS `created_at`,`mauth_dept`.`updated_at` AS `updated_at`,`mauth_dept`.`level` AS `level` from `mauth_dept` where (`mauth_dept`.`level` = 2);

-- ----------------------------
-- View structure for v_subcompanyinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_subcompanyinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_subcompanyinfo` AS (select `head`.`name` AS `companyName`,`head`.`dept_id` AS `companyDeptId`,`b`.`companyId` AS `companyId`,`b`.`companyName` AS `subCompanyName`,`b`.`companyAddr` AS `companyAddr`,`b`.`adminName` AS `adminName`,`b`.`adminTel` AS `adminTel`,`b`.`deptId` AS `deptId` from ((`mauth_dept` `head` join `mauth_dept` `branch` on(((`branch`.`lft` > `head`.`lft`) and (`branch`.`rgt` < `head`.`rgt`) and (`branch`.`level` = 2)))) join `t_companyinfo` `b` on(((`b`.`deptId` = `branch`.`dept_id`) and (`b`.`level` = 2)))) where (`head`.`level` = 1));

-- ----------------------------
-- View structure for v_table_rows
-- ----------------------------
DROP VIEW IF EXISTS `v_table_rows`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_table_rows` AS select `information_schema`.`tables`.`TABLE_NAME` AS `table_name`,`information_schema`.`tables`.`TABLE_ROWS` AS `table_rows`,round((((`information_schema`.`tables`.`DATA_LENGTH` / 1024) / 1024) / 1024),1) AS `data_GB`,round((((`information_schema`.`tables`.`INDEX_LENGTH` / 1024) / 1024) / 1024),1) AS `index_GB` from `information_schema`.`tables` where (`information_schema`.`tables`.`TABLE_SCHEMA` = 'chezai') having (`data_GB` >= 0.1) order by `information_schema`.`tables`.`DATA_LENGTH` desc;

-- ----------------------------
-- View structure for v_test
-- ----------------------------
DROP VIEW IF EXISTS `v_test`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_test` AS select `v_mauth`.`companyName` AS `companyName`,`v_mauth`.`companyDeptId` AS `companyDeptId`,`v_mauth`.`subCompanyName` AS `subCompanyName`,`v_mauth`.`subCompanyDeptId` AS `subCompanyDeptId`,`v_mauth`.`groupName` AS `groupName`,`v_mauth`.`groupDeptId` AS `groupDeptId`,`v_mauth`.`lineName` AS `lineName`,`v_mauth`.`lineDeptId` AS `lineDeptId` from `v_mauth`;

-- ----------------------------
-- View structure for v_vehicleanaloginfo_offset
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleanaloginfo_offset`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleanaloginfo_offset` AS select `t_vehicleanaloginfo_offset`.`vehicleid` AS `vehicleid`,`t_vehicleanaloginfo_offset`.`speed` AS `speed`,`t_vehicleanaloginfo_offset`.`engine` AS `engine`,`t_vehicleanaloginfo_offset`.`batteryvoltage` AS `batteryvoltage`,`t_vehicleanaloginfo_offset`.`oilpressure` AS `oilpressure`,`t_vehicleanaloginfo_offset`.`coolanttemper` AS `coolanttemper`,`t_vehicleanaloginfo_offset`.`pressure1` AS `pressure1`,`t_vehicleanaloginfo_offset`.`pressure2` AS `pressure2`,`t_vehicleanaloginfo_offset`.`pressure3` AS `pressure3`,`t_vehicleanaloginfo_offset`.`pressure4` AS `pressure4`,`t_vehicleanaloginfo_offset`.`enginecompartmenttemper` AS `enginecompartmenttemper`,`t_vehicleanaloginfo_offset`.`insidetemper` AS `insidetemper`,`t_vehicleanaloginfo_offset`.`outsidetemper` AS `outsidetemper`,`t_vehicleanaloginfo_offset`.`residualfuel` AS `residualfuel`,`t_vehicleanaloginfo_offset`.`fullfuel` AS `fullfuel`,`t_vehicleanaloginfo_offset`.`tyrelayout` AS `tyrelayout`,`t_vehicleanaloginfo_offset`.`tyreposition` AS `tyreposition`,`t_vehicleanaloginfo_offset`.`tyretemper` AS `tyretemper`,`t_vehicleanaloginfo_offset`.`tyrepressurehigh` AS `tyrepressurehigh`,`t_vehicleanaloginfo_offset`.`tyrepressurelow` AS `tyrepressurelow`,`t_vehicleanaloginfo_offset`.`shortmileage` AS `shortmileage`,`t_vehicleanaloginfo_offset`.`mileage` AS `mileage`,`t_vehicleanaloginfo_offset`.`cumulativeenginerevolution` AS `cumulativeenginerevolution`,`t_vehicleanaloginfo_offset`.`fuelconsumptrate` AS `fuelconsumptrate`,`t_vehicleanaloginfo_offset`.`fueleconomy` AS `fueleconomy`,`t_vehicleanaloginfo_offset`.`totalfueluse` AS `totalfueluse`,`t_vehicleanaloginfo_offset`.`urealevel` AS `urealevel`,`t_vehicleanaloginfo_offset`.`singletotalfueluse` AS `singletotalfueluse`,`t_vehicleanaloginfo_offset`.`hundredfueluse` AS `hundredfueluse`,`t_vehicleanaloginfo_offset`.`realhundredfueluse` AS `realhundredfueluse`,`t_vehicleanaloginfo_offset`.`realtimegfueluse` AS `realtimegfueluse`,`t_vehicleanaloginfo_offset`.`allgasuse` AS `allgasuse`,`t_vehicleanaloginfo_offset`.`singletotalgasuse` AS `singletotalgasuse`,`t_vehicleanaloginfo_offset`.`hundredgasuse` AS `hundredgasuse`,`t_vehicleanaloginfo_offset`.`realtimegasuse` AS `realtimegasuse`,`t_vehicleanaloginfo_offset`.`realhundredgasuse` AS `realhundredgasuse`,`t_vehicleanaloginfo_offset`.`residualgas` AS `residualgas`,`t_vehicleanaloginfo_offset`.`totalgasuse` AS `totalgasuse`,`t_vehicleanaloginfo_offset`.`totalfuelcost` AS `totalfuelcost`,`t_vehicleanaloginfo_offset`.`totalenergyuse` AS `totalenergyuse`,`t_vehicleanaloginfo_offset`.`soc` AS `soc`,`t_vehicleanaloginfo_offset`.`buscurrent` AS `buscurrent`,`t_vehicleanaloginfo_offset`.`chargercurrent` AS `chargercurrent`,`t_vehicleanaloginfo_offset`.`mcvoltagefront` AS `mcvoltagefront`,`t_vehicleanaloginfo_offset`.`mcvoltagerear` AS `mcvoltagerear`,`t_vehicleanaloginfo_offset`.`mccurrent` AS `mccurrent`,`t_vehicleanaloginfo_offset`.`bcvoltageout` AS `bcvoltageout`,`t_vehicleanaloginfo_offset`.`bccurrentout` AS `bccurrentout`,`t_vehicleanaloginfo_offset`.`bccurentin` AS `bccurentin`,`t_vehicleanaloginfo_offset`.`bctemp` AS `bctemp`,`t_vehicleanaloginfo_offset`.`motorspeed` AS `motorspeed`,`t_vehicleanaloginfo_offset`.`mctemp` AS `mctemp`,`t_vehicleanaloginfo_offset`.`opivoltageout` AS `opivoltageout`,`t_vehicleanaloginfo_offset`.`opicurrentout` AS `opicurrentout`,`t_vehicleanaloginfo_offset`.`opicurrentin` AS `opicurrentin`,`t_vehicleanaloginfo_offset`.`opitemp` AS `opitemp`,`t_vehicleanaloginfo_offset`.`apivoltageout` AS `apivoltageout`,`t_vehicleanaloginfo_offset`.`apicurrentout` AS `apicurrentout`,`t_vehicleanaloginfo_offset`.`apicurrentin` AS `apicurrentin`,`t_vehicleanaloginfo_offset`.`apitemp` AS `apitemp`,`t_vehicleanaloginfo_offset`.`driveraccelpanel` AS `driveraccelpanel`,`t_vehicleanaloginfo_offset`.`driverbrakepanel` AS `driverbrakepanel`,`t_vehicleanaloginfo_offset`.`batteryentemp` AS `batteryentemp`,`t_vehicleanaloginfo_offset`.`bmvoltagehigh` AS `bmvoltagehigh`,`t_vehicleanaloginfo_offset`.`bmvoltagelow` AS `bmvoltagelow`,`t_vehicleanaloginfo_offset`.`bmtemplow` AS `bmtemplow`,`t_vehicleanaloginfo_offset`.`wiremesh` AS `wiremesh`,`t_vehicleanaloginfo_offset`.`currentrecycle` AS `currentrecycle`,`t_vehicleanaloginfo_offset`.`motortemp` AS `motortemp`,`t_vehicleanaloginfo_offset`.`batterycount` AS `batterycount`,`t_vehicleanaloginfo_offset`.`batterysn` AS `batterysn`,`t_vehicleanaloginfo_offset`.`batterymaxtemp` AS `batterymaxtemp`,`t_vehicleanaloginfo_offset`.`batterymintemp` AS `batterymintemp`,`t_vehicleanaloginfo_offset`.`highvoltbatcurrent` AS `highvoltbatcurrent`,`t_vehicleanaloginfo_offset`.`remainenergy` AS `remainenergy`,`t_vehicleanaloginfo_offset`.`batterytotalvolt` AS `batterytotalvolt`,`t_vehicleanaloginfo_offset`.`singlehightemp` AS `singlehightemp`,`t_vehicleanaloginfo_offset`.`singlelowtemp` AS `singlelowtemp`,`t_vehicleanaloginfo_offset`.`singlehighvolt` AS `singlehighvolt`,`t_vehicleanaloginfo_offset`.`singlelowvolt` AS `singlelowvolt`,`t_vehicleanaloginfo_offset`.`insulresisvalue` AS `insulresisvalue`,`t_vehicleanaloginfo_offset`.`liquidconsumeval` AS `liquidconsumeval`,`t_vehicleanaloginfo_offset`.`vin` AS `vin`,`t_vehicleanaloginfo_offset`.`cpcurrent` AS `cpcurrent`,`t_vehicleanaloginfo_offset`.`cpvolt` AS `cpvolt`,`t_vehicleanaloginfo_offset`.`cptemp` AS `cptemp`,`t_vehicleanaloginfo_offset`.`cpcheckcode` AS `cpcheckcode`,`t_vehicleanaloginfo_offset`.`chargecardinfo` AS `chargecardinfo`,`t_vehicleanaloginfo_offset`.`chargeduration` AS `chargeduration`,`t_vehicleanaloginfo_offset`.`motorbusbarcurrent` AS `motorbusbarcurrent`,`t_vehicleanaloginfo_offset`.`busbaroutcurrent` AS `busbaroutcurrent`,`t_vehicleanaloginfo_offset`.`consumeperday` AS `consumeperday`,`t_vehicleanaloginfo_offset`.`bmslifesignal` AS `bmslifesignal`,`t_vehicleanaloginfo_offset`.`singlemaxvolt1` AS `singlemaxvolt1`,`t_vehicleanaloginfo_offset`.`singlemaxvolt1sn` AS `singlemaxvolt1sn`,`t_vehicleanaloginfo_offset`.`singlemaxvolt1count` AS `singlemaxvolt1count`,`t_vehicleanaloginfo_offset`.`singlemaxvolt2` AS `singlemaxvolt2`,`t_vehicleanaloginfo_offset`.`singlemaxvolt2sn` AS `singlemaxvolt2sn`,`t_vehicleanaloginfo_offset`.`singlemaxvolt2count` AS `singlemaxvolt2count`,`t_vehicleanaloginfo_offset`.`singlemaxvolt3` AS `singlemaxvolt3`,`t_vehicleanaloginfo_offset`.`singlemaxvolt3sn` AS `singlemaxvolt3sn`,`t_vehicleanaloginfo_offset`.`singlemaxvolt3count` AS `singlemaxvolt3count`,`t_vehicleanaloginfo_offset`.`singlemaxvolt4` AS `singlemaxvolt4`,`t_vehicleanaloginfo_offset`.`singlemaxvolt4sn` AS `singlemaxvolt4sn`,`t_vehicleanaloginfo_offset`.`singlemaxvolt4count` AS `singlemaxvolt4count`,`t_vehicleanaloginfo_offset`.`singleminvolt1` AS `singleminvolt1`,`t_vehicleanaloginfo_offset`.`singleminvolt1sn` AS `singleminvolt1sn`,`t_vehicleanaloginfo_offset`.`singleminvolt1count` AS `singleminvolt1count`,`t_vehicleanaloginfo_offset`.`singleminvolt2` AS `singleminvolt2`,`t_vehicleanaloginfo_offset`.`singleminvolt2sn` AS `singleminvolt2sn`,`t_vehicleanaloginfo_offset`.`singleminvolt2count` AS `singleminvolt2count`,`t_vehicleanaloginfo_offset`.`singleminvolt3` AS `singleminvolt3`,`t_vehicleanaloginfo_offset`.`singleminvolt3sn` AS `singleminvolt3sn`,`t_vehicleanaloginfo_offset`.`singleminvolt3count` AS `singleminvolt3count`,`t_vehicleanaloginfo_offset`.`singleminvolt4` AS `singleminvolt4`,`t_vehicleanaloginfo_offset`.`singleminvolt4sn` AS `singleminvolt4sn`,`t_vehicleanaloginfo_offset`.`singleminvolt4count` AS `singleminvolt4count`,`t_vehicleanaloginfo_offset`.`singlemaxtemp1` AS `singlemaxtemp1`,`t_vehicleanaloginfo_offset`.`singlemaxtemp1sn` AS `singlemaxtemp1sn`,`t_vehicleanaloginfo_offset`.`singlemaxtemp2` AS `singlemaxtemp2`,`t_vehicleanaloginfo_offset`.`singlemaxtemp2sn` AS `singlemaxtemp2sn`,`t_vehicleanaloginfo_offset`.`singlemaxtemp3` AS `singlemaxtemp3`,`t_vehicleanaloginfo_offset`.`singlemaxtemp3sn` AS `singlemaxtemp3sn`,`t_vehicleanaloginfo_offset`.`singlemaxtemp4` AS `singlemaxtemp4`,`t_vehicleanaloginfo_offset`.`singlemaxtemp4sn` AS `singlemaxtemp4sn`,`t_vehicleanaloginfo_offset`.`singlemintemp1` AS `singlemintemp1`,`t_vehicleanaloginfo_offset`.`singlemintemp1sn` AS `singlemintemp1sn`,`t_vehicleanaloginfo_offset`.`singlemintemp2` AS `singlemintemp2`,`t_vehicleanaloginfo_offset`.`singlemintemp2sn` AS `singlemintemp2sn`,`t_vehicleanaloginfo_offset`.`singlemintemp3` AS `singlemintemp3`,`t_vehicleanaloginfo_offset`.`singlemintemp3sn` AS `singlemintemp3sn`,`t_vehicleanaloginfo_offset`.`singlemintemp4` AS `singlemintemp4`,`t_vehicleanaloginfo_offset`.`singlemintemp4sn` AS `singlemintemp4sn`,`t_vehicleanaloginfo_offset`.`bmstotalconsume` AS `bmstotalconsume`,`t_vehicleanaloginfo_offset`.`batchargevolt` AS `batchargevolt`,`t_vehicleanaloginfo_offset`.`batchargemaxvolt` AS `batchargemaxvolt`,`t_vehicleanaloginfo_offset`.`batchargeminvolt` AS `batchargeminvolt`,`t_vehicleanaloginfo_offset`.`vcucode` AS `vcucode`,`t_vehicleanaloginfo_offset`.`controllerlife` AS `controllerlife`,`t_vehicleanaloginfo_offset`.`cursingdistance` AS `cursingdistance`,`t_vehicleanaloginfo_offset`.`transducerbusvolt` AS `transducerbusvolt`,`t_vehicleanaloginfo_offset`.`motortorque` AS `motortorque`,`t_vehicleanaloginfo_offset`.`motorpower` AS `motorpower`,`t_vehicleanaloginfo_offset`.`motorcurrent` AS `motorcurrent`,`t_vehicleanaloginfo_offset`.`dcstartcode` AS `dcstartcode`,`t_vehicleanaloginfo_offset`.`acstartcode` AS `acstartcode`,`t_vehicleanaloginfo_offset`.`dcoutvolt` AS `dcoutvolt`,`t_vehicleanaloginfo_offset`.`dcoutcurrent` AS `dcoutcurrent`,`t_vehicleanaloginfo_offset`.`dcinvolt` AS `dcinvolt`,`t_vehicleanaloginfo_offset`.`dcradiatortemp` AS `dcradiatortemp`,`t_vehicleanaloginfo_offset`.`dccheckcode` AS `dccheckcode`,`t_vehicleanaloginfo_offset`.`mcucheckcode` AS `mcucheckcode`,`t_vehicleanaloginfo_offset`.`soerelayeq` AS `soerelayeq`,`t_vehicleanaloginfo_offset`.`chargeeq` AS `chargeeq`,`t_vehicleanaloginfo_offset`.`generatorcurrent` AS `generatorcurrent`,`t_vehicleanaloginfo_offset`.`pdbtemp` AS `pdbtemp`,`t_vehicleanaloginfo_offset`.`cumulativechargtime` AS `cumulativechargtime`,`t_vehicleanaloginfo_offset`.`outputenergy` AS `outputenergy`,`t_vehicleanaloginfo_offset`.`vehiclestate` AS `vehiclestate` from `t_vehicleanaloginfo_offset`;

-- ----------------------------
-- View structure for v_vehicleinfo
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleinfo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleinfo` AS select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineName` AS `lineName`,`a`.`lineDeptId` AS `lineDeptId`,`v`.`vehicleId` AS `vehicleId`,`v`.`vehicleNo` AS `vehicleNo`,`v`.`deptId` AS `deptId`,`v`.`vehicleType` AS `vehicleType`,`v`.`motorType` AS `motorType`,`v`.`deviceId` AS `deviceId`,`v`.`lineInfo` AS `lineInfo`,`v`.`deviceFactoryNo` AS `deviceFactoryNo`,`v`.`engineVinNo` AS `engineVinNo`,`v`.`oilBoxCap` AS `oilBoxCap`,`v`.`dayRunTime` AS `dayRunTime`,`v`.`airBottleCap` AS `airBottleCap`,`v`.`batteryCap` AS `batteryCap`,`v`.`eleCost` AS `eleCost`,`v`.`gasCost` AS `gasCost`,`v`.`oilCost` AS `oilCost`,`v`.`engineModel` AS `engineModel`,`v`.`gearBoxModel` AS `gearBoxModel`,`v`.`batteryModel` AS `batteryModel`,`v`.`dynamoModel` AS `dynamoModel`,`v`.`tireModel` AS `tireModel`,`v`.`wheelaxlesModel` AS `wheelaxlesModel`,`v`.`doorpumpModel` AS `doorpumpModel`,`v`.`fsbSupplier` AS `fsbSupplier`,`v`.`heaterSupplier` AS `heaterSupplier`,`v`.`wiperSupplier` AS `wiperSupplier`,`v`.`lightswitchsupplier` AS `lightswitchsupplier`,`v`.`seatSupplier` AS `seatSupplier`,`v`.`tirepressureSupplier` AS `tirepressureSupplier`,`v`.`motorSupplier` AS `motorSupplier`,`v`.`electricboxModel` AS `electricboxModel`,`v`.`absModel` AS `absModel`,`v`.`brakeshoreModel` AS `brakeshoreModel`,`v`.`isReparing` AS `isReparing`,`v`.`expireDate` AS `expireDate`,`v`.`producer` AS `producer`,`v`.`purchaseDate` AS `purchaseDate`,`v`.`status` AS `status`,`v`.`paymentExpiredDate` AS `paymentExpiredDate`,`v`.`online` AS `online`,`v`.`paymentStatus` AS `paymentStatus`,`v`.`vehicleSN` AS `vehicleSN`,`v`.`lastDataUpTime` AS `lastDataUpTime`,`v`.`alarm` AS `alarm`,`v`.`lastAlarmTime` AS `lastAlarmTime`,`v`.`sim` AS `sim`,`v`.`vin` AS `vin`,`v`.`vehicleNoColor` AS `vehicleNoColor`,`v`.`vehicleConfig` AS `vehicleConfig`,`v`.`productBatch` AS `productBatch`,`v`.`vehicleUse` AS `vehicleUse`,`v`.`puchaseField` AS `puchaseField`,`v`.`vehicleOperator` AS `vehicleOperator`,`v`.`buyer` AS `buyer`,`v`.`vehicleManufacturer` AS `vehicleManufacturer`,`v`.`manufactureDate` AS `manufactureDate`,`v`.`protocolVersion` AS `protocolVersion`,`v`.`createTime` AS `createTime`,`v`.`offsetId` AS `offsetId`,`t_vehicleanalog_offset`.`offset_name` AS `offsetName` from ((`t_mauth_dept` `a` join `t_vehicleinfo` `v` on((`a`.`lineDeptId` = `v`.`deptId`))) join `t_vehicleanalog_offset` on((`t_vehicleanalog_offset`.`id` = `v`.`offsetId`)));

-- ----------------------------
-- View structure for v_vehicleenergy
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleenergy`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleenergy` AS select `tmd`.`companyName` AS `companyName`,`tmd`.`companyDeptId` AS `companyDeptId`,`tmd`.`subCompanyName` AS `subCompanyName`,`tmd`.`subCompanyDeptId` AS `subCompanyDeptId`,`tmd`.`groupName` AS `groupName`,`tmd`.`groupDeptId` AS `groupDeptId`,`tmd`.`lineName` AS `lineName`,`tmd`.`lineDeptId` AS `deptId`,`energy`.`id` AS `id`,`energy`.`vehicleNo` AS `vehicleNo`,(case when (`energy`.`energyType` = 'ele') then '电' when (`energy`.`energyType` = 'oil') then '燃油' when (`energy`.`energyType` = 'gas') then '燃气' else '未知' end) AS `energyType`,`energy`.`subType` AS `subType`,`energy`.`energyVolume` AS `energyVolume`,`energy`.`energyCarNo` AS `energyCarNo`,`energy`.`balance` AS `balance` from ((`t_energyinfo` `energy` join `t_vehicleinfo` `vehicle` on((`energy`.`vehicleNo` = `vehicle`.`vehicleNo`))) join `t_mauth_dept` `tmd` on((`vehicle`.`deptId` = `tmd`.`lineDeptId`))) where ((`vehicle`.`vehicleNo` is not null) and (`vehicle`.`vehicleNo` <> ''));

-- ----------------------------
-- View structure for v_vehicleenerysum
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleenerysum`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleenerysum` AS select `v`.`companyName` AS `companyName`,`v`.`subCompanyName` AS `subCompanyName`,`v`.`groupName` AS `groupName`,`v`.`lineName` AS `lineName`,`n`.`id` AS `id`,`n`.`deviceId` AS `deviceId`,`n`.`vehicleNo` AS `vehicleNo`,`n`.`motorType` AS `motorType`,`n`.`vehicleType` AS `vehicleType`,`n`.`gasStandard` AS `gasStandard`,`n`.`gasAvg` AS `gasAverage`,`n`.`gasInstant` AS `gasInstant`,`n`.`gasHundredMiles` AS `gasHundredMiles`,`n`.`gasTotal` AS `gasTotal`,`n`.`gasSumAll` AS `gasSumAll`,`n`.`fuleStandard` AS `fuleStandard`,`n`.`fuleAvg` AS `fuleAverage`,`n`.`fuleInstant` AS `fuleInstant`,`n`.`fuleHundredMiles` AS `fuleHundredMiles`,`n`.`fuleTotal` AS `fuleTotal`,`n`.`fuleSumAll` AS `fuleSumAll`,`n`.`elecStandard` AS `elecStandard`,`n`.`elecAvg` AS `elecAverage`,`n`.`elecPerDay` AS `elecPerDay`,`n`.`elecHundredMiles` AS `elecHundredMiles`,`n`.`elecTotal` AS `elecTotal`,`n`.`elecSumAll` AS `elecSumAll`,`n`.`energyStandard` AS `energyStandard`,`n`.`deptId` AS `deptId`,`n`.`stat_date` AS `stat_date` from (`stat_vehicleenergy` `n` join `v_vehicleinfo` `v`) where (`n`.`vehicleNo` = `v`.`vehicleNo`);

-- ----------------------------
-- View structure for v_vehicleenerysum_new
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleenerysum_new`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleenerysum_new` AS (select `t`.`companyName` AS `companyName`,`t`.`subCompanyName` AS `subCompanyName`,`t`.`subCompanyDeptId` AS `subCompanyDeptId`,`t`.`groupName` AS `groupName`,`t`.`groupDeptId` AS `groupDeptId`,`t`.`lineName` AS `lineName`,`n`.`id` AS `id`,`n`.`deviceId` AS `deviceId`,`n`.`vehicleNo` AS `vehicleNo`,`n`.`motorType` AS `motorType`,`n`.`vehicleType` AS `vehicleType`,`n`.`gasStandard` AS `gasStandard`,`n`.`gasAvg` AS `gasAvg`,`n`.`gasInstant` AS `gasInstant`,`n`.`gasHundredMiles` AS `gasHundredMiles`,`n`.`gasTotal` AS `gasTotal`,`n`.`gasSumAll` AS `gasSumAll`,`n`.`fuleStandard` AS `fuleStandard`,`n`.`fuleAvg` AS `fuleAvg`,`n`.`fuleInstant` AS `fuleInstant`,`n`.`fuleHundredMiles` AS `fuleHundredMiles`,`n`.`fuleTotal` AS `fuleTotal`,`n`.`fuleSumAll` AS `fuleSumAll`,`n`.`elecStandard` AS `elecStandard`,`n`.`elecAvg` AS `elecAvg`,`n`.`elecPerDay` AS `elecPerDay`,`n`.`elecHundredMiles` AS `elecHundredMiles`,`n`.`elecTotal` AS `elecTotal`,`n`.`elecSumAll` AS `elecSumAll`,`n`.`deptId` AS `deptId`,`n`.`stat_date` AS `stat_date`,`n`.`energyStandard` AS `energyStandard` from (`stat_vehicleenergy` `n` join `t_mauth_dept` `t` on((`t`.`lineDeptId` = `n`.`deptId`))));

-- ----------------------------
-- View structure for v_vehiclegroup
-- ----------------------------
DROP VIEW IF EXISTS `v_vehiclegroup`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehiclegroup` AS select `mauth_dept`.`dept_id` AS `dept_id`,`mauth_dept`.`name` AS `name`,`mauth_dept`.`code` AS `code`,`mauth_dept`.`area_number` AS `area_number`,`mauth_dept`.`lft` AS `lft`,`mauth_dept`.`rgt` AS `rgt`,`mauth_dept`.`remark` AS `remark`,`mauth_dept`.`created_at` AS `created_at`,`mauth_dept`.`updated_at` AS `updated_at`,`mauth_dept`.`level` AS `level` from `mauth_dept` where (`mauth_dept`.`level` = 3);

-- ----------------------------
-- View structure for v_vehicleinfo_all
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleinfo_all`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleinfo_all` AS select `a`.`companyName` AS `companyName`,`a`.`companyDeptId` AS `companyDeptId`,`a`.`subCompanyName` AS `subCompanyName`,`a`.`subCompanyDeptId` AS `subCompanyDeptId`,`a`.`groupName` AS `groupName`,`a`.`groupDeptId` AS `groupDeptId`,`a`.`lineName` AS `lineName`,`a`.`lineDeptId` AS `lineDeptId`,`v`.`vehicleId` AS `vehicleId`,`v`.`vehicleNo` AS `vehicleNo`,`v`.`deptId` AS `deptId`,`v`.`vehicleType` AS `vehicleType`,`v`.`motorType` AS `motorType`,`v`.`deviceId` AS `deviceId`,`v`.`lineInfo` AS `lineInfo`,`v`.`deviceFactoryNo` AS `deviceFactoryNo`,`v`.`engineVinNo` AS `engineVinNo`,`v`.`oilBoxCap` AS `oilBoxCap`,`v`.`dayRunTime` AS `dayRunTime`,`v`.`airBottleCap` AS `airBottleCap`,`v`.`batteryCap` AS `batteryCap`,`v`.`eleCost` AS `eleCost`,`v`.`gasCost` AS `gasCost`,`v`.`oilCost` AS `oilCost`,`v`.`engineModel` AS `engineModel`,`v`.`gearBoxModel` AS `gearBoxModel`,`v`.`batteryModel` AS `batteryModel`,`v`.`dynamoModel` AS `dynamoModel`,`v`.`tireModel` AS `tireModel`,`v`.`wheelaxlesModel` AS `wheelaxlesModel`,`v`.`doorpumpModel` AS `doorpumpModel`,`v`.`fsbSupplier` AS `fsbSupplier`,`v`.`heaterSupplier` AS `heaterSupplier`,`v`.`wiperSupplier` AS `wiperSupplier`,`v`.`lightswitchsupplier` AS `lightswitchsupplier`,`v`.`seatSupplier` AS `seatSupplier`,`v`.`tirepressureSupplier` AS `tirepressureSupplier`,`v`.`motorSupplier` AS `motorSupplier`,`v`.`electricboxModel` AS `electricboxModel`,`v`.`absModel` AS `absModel`,`v`.`brakeshoreModel` AS `brakeshoreModel`,`v`.`isReparing` AS `isReparing`,`v`.`expireDate` AS `expireDate`,`v`.`producer` AS `producer`,`v`.`purchaseDate` AS `purchaseDate`,`v`.`status` AS `status`,`v`.`paymentExpiredDate` AS `paymentExpiredDate`,`v`.`online` AS `online`,`v`.`paymentStatus` AS `paymentStatus`,`v`.`vehicleSN` AS `vehicleSN`,`v`.`lastDataUpTime` AS `lastDataUpTime`,`v`.`alarm` AS `alarm`,`v`.`lastAlarmTime` AS `lastAlarmTime`,`v`.`sim` AS `sim`,`v`.`vin` AS `vin`,`v`.`vehicleNoColor` AS `vehicleNoColor`,`v`.`vehicleConfig` AS `vehicleConfig`,`v`.`productBatch` AS `productBatch`,`v`.`vehicleUse` AS `vehicleUse`,`v`.`puchaseField` AS `puchaseField`,`v`.`vehicleOperator` AS `vehicleOperator`,`v`.`buyer` AS `buyer`,`v`.`vehicleManufacturer` AS `vehicleManufacturer`,`v`.`manufactureDate` AS `manufactureDate`,`v`.`protocolVersion` AS `protocolVersion`,`v`.`createTime` AS `createTime`,`v`.`offsetId` AS `offsetId`,`t_vehicleanalog_offset`.`offset_name` AS `offsetName` from ((`t_mauth_dept` `a` left join `t_vehicleinfo` `v` on((`a`.`lineDeptId` = `v`.`deptId`))) left join `t_vehicleanalog_offset` on((`t_vehicleanalog_offset`.`id` = `v`.`offsetId`)));

-- ----------------------------
-- View structure for v_vehiclemaintenance
-- ----------------------------
DROP VIEW IF EXISTS `v_vehiclemaintenance`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehiclemaintenance` AS select `tmd`.`companyName` AS `companyName`,`tmd`.`companyDeptId` AS `companyDeptId`,`tmd`.`subCompanyName` AS `subCompanyName`,`tmd`.`subCompanyDeptId` AS `subCompanyDeptId`,`tmd`.`groupName` AS `groupName`,`tmd`.`groupDeptId` AS `groupDeptId`,`tmd`.`lineName` AS `lineName`,`tmd`.`lineDeptId` AS `deptId`,`maintenance`.`vehicleMaintainId` AS `vehicleMaintainId`,`maintenance`.`vehicleNo` AS `vehicleNo`,`maintenance`.`firstMaintenance` AS `firstMaintenance`,`maintenance`.`secondMaintenance` AS `secondMaintenance`,`maintenance`.`thirdMaintenance` AS `thirdMaintenance`,`maintenance`.`realFirstMaintenance` AS `realFirstMaintenance`,`maintenance`.`realSecondMaintenance` AS `realSecondMaintenance`,`maintenance`.`realThirdMaintenance` AS `realThirdMaintenance`,`maintenance`.`guarantyMiles` AS `guarantyMiles`,`maintenance`.`vehicleGuaranteeDate` AS `vehicleGuaranteeDate`,`maintenance`.`motorGuaranteeDate` AS `motorGuaranteeDate`,`maintenance`.`gearboxGuaranteeDate` AS `gearboxGuaranteeDate`,`maintenance`.`busGuaranteeDate` AS `busGuaranteeDate`,`maintenance`.`tierGuaranteeDate` AS `tierGuaranteeDate`,`maintenance`.`doorpumprGuaranteeDate` AS `doorpumprGuaranteeDate`,`maintenance`.`elecmotorGuaranteeDate` AS `elecmotorGuaranteeDate`,`maintenance`.`absGuaranteeDate` AS `absGuaranteeDate`,`maintenance`.`chairGuaranteeDate` AS `chairGuaranteeDate` from ((`t_mauth_dept` `tmd` join `t_vehicleinfo` `vehicle` on((`tmd`.`lineDeptId` = `vehicle`.`deptId`))) join `t_vehiclemaintenance` `maintenance` on((`vehicle`.`vehicleNo` = `maintenance`.`vehicleNo`)));

-- ----------------------------
-- View structure for v_vehiclemiles
-- ----------------------------
DROP VIEW IF EXISTS `v_vehiclemiles`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehiclemiles` AS select `company`.`name` AS `companyName`,`company`.`dept_id` AS `companyDeptId`,`subcompany`.`name` AS `subCompanyName`,`subcompany`.`dept_id` AS `subCompanyDeptId`,`vehiclegroup`.`name` AS `groupName`,`vehiclegroup`.`dept_id` AS `groupDeptId`,`line`.`dept_id` AS `lineDeptId`,`line`.`name` AS `lineName`,`v`.`motorType` AS `motorType`,`v`.`vehicleType` AS `vehicleType`,`v`.`purchaseDate` AS `purchaseDate`,`v`.`vehicleNo` AS `vehicleNo`,`m`.`vehicledeviceid` AS `deviceId`,`m`.`accruedmiles` AS `accruedMiles`,`m`.`shortmiles` AS `shortMiles`,`m`.`gpsstatus` AS `gpsStatus`,`m`.`stat_date` AS `statDate`,`m`.`adjustDate` AS `adjustDate` from ((((((`mauth_dept` `company` join `mauth_dept` `subcompany` on(((`subcompany`.`lft` > `company`.`lft`) and (`subcompany`.`rgt` < `company`.`rgt`) and (`subcompany`.`level` = 2)))) join `mauth_dept` `vehiclegroup` on(((`vehiclegroup`.`lft` > `subcompany`.`lft`) and (`vehiclegroup`.`rgt` < `subcompany`.`rgt`) and (`vehiclegroup`.`level` = 3)))) join `mauth_dept` `line` on(((`line`.`lft` > `vehiclegroup`.`lft`) and (`line`.`rgt` < `vehiclegroup`.`rgt`) and (`line`.`level` = 4)))) join `t_lineinfo` `l` on((`line`.`dept_id` = `l`.`deptId`))) join `t_vehicleinfo` `v` on((`l`.`deptId` = `v`.`deptId`))) join `t_vehiclemiles` `m` on((`v`.`deviceId` = `m`.`vehicledeviceid`))) where (`company`.`level` = 1);

-- ----------------------------
-- View structure for v_vehicleservice
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleservice`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleservice` AS select `tmd`.`companyName` AS `companyName`,`tmd`.`companyDeptId` AS `companyDeptId`,`tmd`.`subCompanyName` AS `subCompanyName`,`tmd`.`subCompanyDeptId` AS `subCompanyDeptId`,`tmd`.`groupName` AS `groupName`,`tmd`.`groupDeptId` AS `groupDeptId`,`tmd`.`lineName` AS `lineName`,`tmd`.`lineDeptId` AS `deptId`,`service`.`vehicleServiceId` AS `vehicleServiceId`,`service`.`vehicleNo` AS `vehicleNo`,`service`.`partsName` AS `partsName`,`service`.`reason` AS `reason`,`service`.`supplier` AS `supplier`,`service`.`partsNum` AS `partsNum`,`service`.`price` AS `price`,`service`.`serviceMan` AS `serviceMan`,`service`.`repairDate` AS `repairDate`,`service`.`driver` AS `driver`,`service`.`applyDate` AS `applyDate`,`service`.`expectFinishDate` AS `expectFinishDate`,`service`.`realFinishDate` AS `realFinishDate`,`service`.`applyMan` AS `applyMan`,`service`.`repairMan` AS `repairMan`,`service`.`costTime` AS `costTime` from ((`t_vehicleservice` `service` left join `t_vehicleinfo` `tv` on((`service`.`vehicleNo` = `tv`.`vehicleNo`))) left join `t_mauth_dept` `tmd` on((`tv`.`deptId` = `tmd`.`lineDeptId`)));

-- ----------------------------
-- View structure for v_vehicleviolationrecord
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicleviolationrecord`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicleviolationrecord` AS select `mauth`.`companyName` AS `companyName`,`mauth`.`companyDeptId` AS `companyDeptId`,`mauth`.`subCompanyName` AS `subCompanyName`,`mauth`.`subCompanyDeptId` AS `subCompanyDeptId`,`mauth`.`groupName` AS `groupName`,`mauth`.`groupDeptId` AS `groupDeptId`,`mauth`.`lineDeptId` AS `linedeptId`,`mauth`.`lineName` AS `lineName`,`driver`.`empNo` AS `empNo`,`violation`.`id` AS `id`,`violation`.`violationName` AS `violationName`,`violation`.`vehicleid` AS `vehicleid`,`violation`.`vehicleNo` AS `vehicleNo`,`violation`.`driverName` AS `driverName`,`violation`.`driverid` AS `driverid`,`violation`.`content` AS `content`,`violation`.`violationdate` AS `violationdate` from (((`t_mauth_dept` `mauth` join `t_driverinfo` `driver` on((`mauth`.`lineDeptId` = `driver`.`deptid`))) join `t_vehicleviolationrecord` `violation` on((`violation`.`driverid` = `driver`.`driverid`))) join `t_vehicleinfo` `vehicle` on((`violation`.`vehicleid` = `vehicle`.`vehicleId`)));

-- ----------------------------
-- Function structure for get_repairs_days
-- ----------------------------
DROP FUNCTION IF EXISTS `get_repairs_days`;
delimiter ;;
CREATE FUNCTION `get_repairs_days`(p_vehicle_no VARCHAR(100))
 RETURNS varchar(20) CHARSET utf8 COLLATE utf8_bin
BEGIN
    DECLARE v_stime, v_etime TIMESTAMP;
    DECLARE days INT DEFAULT 0;
    DECLARE done INT DEFAULT FALSE ;
    DECLARE cur CURSOR FOR SELECT
                             applyDate,
                             realFinishDate
                           FROM t_vehicleservice WHERE vehicleNo = p_vehicle_no and applyDate IS NOT NULL ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND set done = TRUE ;
    OPEN cur;
    read_loop:  LOOP
      FETCH cur INTO v_stime, v_etime;
      IF done THEN
         RETURN days;
      END IF;
      SET  days := days + to_days(if(v_etime is NULL or v_etime = '0000-00-00 00:00:00' ,curdate(),v_etime)) - to_days(v_stime);
    END LOOP;
    close cur;
  END
;;
delimiter ;

-- ----------------------------
-- View structure for v_vehicle_dynimic
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicle_dynimic`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicle_dynimic` AS select `t1`.`vehicleNo` AS `vehicleNo`,`t1`.`motorType` AS `motorTypeCode`,(case `t1`.`motorType` when 1 then '燃油车' when 2 then '电车' when 3 then '油电混合动力车' when 4 then '燃气车' when 5 then '气电混合动力车' else '' end) AS `motorType`,`t5`.`lineName` AS `lineName`,`t5`.`groupName` AS `groupName`,`t5`.`subCompanyName` AS `subCompanyName`,`t5`.`companyName` AS `companyName`,`t1`.`purchaseDate` AS `purchaseDate`,((to_days(now()) - to_days(`t1`.`purchaseDate`)) - `get_repairs_days`(`t1`.`vehicleNo`)) AS `rundays`,`t2`.`accruedmiles` AS `mileage`,`t3`.`fuleTotal` AS `fuleTotal`,`t3`.`gasTotal` AS `gasTotal`,`t3`.`elecTotal` AS `elecTotal`,`t3`.`fuleHundredMiles` AS `fuleHundredMiles`,`t3`.`gasHundredMiles` AS `gasHundredMiles`,`t3`.`elecHundredMiles` AS `elecHundredMiles`,`t1`.`oilCost` AS `oilCost`,`t1`.`gasCost` AS `gasCost`,`t1`.`eleCost` AS `eleCost`,((`t3`.`fuleTotal` / `t2`.`accruedmiles`) / `t1`.`oilCost`) AS `oilCostPercent`,((`t3`.`gasTotal` / `t2`.`accruedmiles`) / `t1`.`gasCost`) AS `gasCostPercent`,((`t3`.`elecTotal` / `t2`.`accruedmiles`) / `t1`.`eleCost`) AS `eleCostPercent`,(`t3`.`fuleTotal` / `t2`.`accruedmiles`) AS `lineAverageOilCost`,(`t3`.`gasTotal` / `t2`.`accruedmiles`) AS `lineAverageGasCost`,(`t3`.`elecTotal` / `t2`.`accruedmiles`) AS `lineAverageEleCost`,`t4`.`oilSum` AS `addOilVolume`,`t4`.`gasSum` AS `addGasVolume`,`t4`.`eleSum` AS `addEleVolume`,concat(((`t3`.`fuleTotal` / `t4`.`oilSum`) * 100),'%') AS `ecuOilDiffPercent`,concat(((`t3`.`gasTotal` / `t4`.`gasSum`) * 100),'%') AS `ecuGasDiffPercent`,concat(((`t3`.`elecTotal` / `t4`.`eleSum`) * 100),'%') AS `ecuEleDiffPercent`,if(((`t4`.`oilSum` - `t3`.`fuleTotal`) > 0),(`t4`.`oilSum` - `t3`.`fuleTotal`),0) AS `ecuOilDiff`,if(((`t4`.`gasSum` - `t3`.`gasTotal`) > 0),(`t4`.`gasSum` - `t3`.`gasTotal`),0) AS `ecuGasDiff`,if(((`t4`.`eleSum` - `t3`.`elecTotal`) > 0),(`t4`.`eleSum` - `t3`.`elecTotal`),0) AS `ecuEleDiff` from ((((`t_vehicleinfo` `t1` left join `t_vehiclemiles` `t2` on(((`t1`.`vehicleNo` = `t2`.`vehicleNo`) and (`t2`.`stat_date` = (curdate() - interval 1 day))))) left join `stat_vehicleenergy` `t3` on(((`t1`.`deviceId` = `t3`.`deviceId`) and (`t3`.`stat_date` = (curdate() - interval 1 day))))) left join `v_energyinfo_sum` `t4` on((`t1`.`vehicleNo` = `t4`.`vehicleNo`))) join `v_lineinfo` `t5` on((`t1`.`deptId` = `t5`.`lineDeptId`)));

-- ----------------------------
-- View structure for v_vehicle_maintenance
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicle_maintenance`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicle_maintenance` AS select `t1`.`vehicleNo` AS `vehicleNo`,`t3`.`deptId` AS `deptid`,(case `t2`.`x` when 1 then 'OperatingLicenseExpired' when 2 then 'VehicleInsuranceExpired' when 3 then 'VCIExpired' when 4 then 'Payment' when 5 then 'MotorExpired' when 6 then 'BUSPanelExpired' when 7 then 'GearBoxExpired' when 8 then 'FirstMaintenanceExpired' when 9 then 'SecondMaintenanceExpired' when 10 then 'TiresExpired' when 11 then 'MashineOilExpired' when 12 then 'ChairsExpired' when 13 then 'LoanDeadline' when 14 then 'DoorpumpExpired' when 15 then 'ABSExpired' when 16 then 'LightSwitchExpired' end) AS `type`,(case `t2`.`x` when 1 then `t1`.`licenses` when 2 then `t1`.`insuranceExpiredDate` when 3 then `t1`.`compulsoryInsurance` when 4 then `t1`.`feeExpire` when 5 then `t1`.`motorGuaranteeDate` when 6 then `t1`.`busGuaranteeDate` when 7 then `t1`.`gearboxGuaranteeDate` when 8 then `t1`.`firstMaintenance` when 9 then `t1`.`secondMaintenance` when 10 then `t1`.`tierGuaranteeDate` when 11 then `t1`.`oilChange` when 12 then `t1`.`chairGuaranteeDate` when 13 then `t1`.`loanExpire` when 14 then `t1`.`doorpumprGuaranteeDate` when 15 then `t1`.`absGuaranteeDate` when 16 then `t1`.`lightCombinationSwitch` end) AS `expiredDate` from ((`t_vehiclemaintenance` `t1` join `t_int` `t2` on((`t2`.`x` <= 16))) join `t_vehicleinfo` `t3` on((`t3`.`vehicleNo` = `t1`.`vehicleNo`))) union all select `t_driverinfo`.`drivername` AS `drivername`,`t_driverinfo`.`deptid` AS `deptid`,'DriverLicenseExpired' AS `DriverLicenseExpired`,`t_driverinfo`.`licensedate` AS `licensedate` from `t_driverinfo` where (`t_driverinfo`.`licensedate` is not null);

-- ----------------------------
-- View structure for v_vehicle_remind
-- ----------------------------
DROP VIEW IF EXISTS `v_vehicle_remind`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `v_vehicle_remind` AS select `a`.`companyDeptId` AS `companyDeptId`,`v`.`companyName` AS `companyName`,`c`.`vehicleNo` AS `name`,`b`.`remindType` AS `type`,`b`.`remindTypeName` AS `typeDesc`,`c`.`expiredDate` AS `expiredDate`,(to_days(`c`.`expiredDate`) - to_days(curdate())) AS `remainderDays` from (((`t_vehicleremindconfig` `a` join `t_vehicleremindtype` `b` on((`a`.`remindtypeid` = `b`.`id`))) join `v_lineinfo` `v` on((`a`.`companyDeptId` = `v`.`companyDeptId`))) join `v_vehicle_maintenance` `c` on(((convert(`c`.`type` using utf8) = `b`.`remindType`) and (`c`.`deptid` = `v`.`lineDeptId`) and ((to_days(`c`.`expiredDate`) - to_days(curdate())) <= `a`.`remindDays`))));

-- ----------------------------
-- Procedure structure for alter_bigtable_compress
-- ----------------------------
DROP PROCEDURE IF EXISTS `alter_bigtable_compress`;
delimiter ;;
CREATE PROCEDURE `alter_bigtable_compress`()
BEGIN
  ALTER TABLE t_electricvehiclestateinfo KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_vehiclestateinfo1 KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_vehicleanaloginfo KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_vehiclestateinfo3 KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_vehiclestateinfo2 KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_electricvehicleana2 KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  ALTER TABLE t_alarmsummary KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  -- ALTER TABLE t_electricvehicleana KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
  -- ALTER TABLE stat_driving_violation_detail KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED ;
END
;;
delimiter ;

-- ----------------------------
-- Function structure for api_get_data
-- ----------------------------
DROP FUNCTION IF EXISTS `api_get_data`;
delimiter ;;
CREATE FUNCTION `api_get_data`(p_dataType SMALLINT(6), p_lineDeptid INT, p_timetype INT)
 RETURNS varchar(512) CHARSET utf8 COLLATE utf8_bin
BEGIN
declare stime datetime;
declare etime datetime;
declare r1,r2,r3,r4,r5,r6,r7,r8 int;
declare r9,r10,r11 FLOAT;
declare r0,result varchar(512);
  
  if p_timetype =1 then
    set stime :=current_date()-interval 1 day;
    set etime :=current_date();
  elseif p_timetype =2 then
    set stime :=current_date()- interval 7 day;
    set etime :=current_date();
  elseif p_timetype =3 then
    set etime :=last_day(current_date())+interval 1 day-interval 1 month;
    set stime :=etime-interval 1 month;
  else
    -- 非法参数
    return 0;
  end if;
  
  if p_dataType in (0,1,2,3,4) then 
    select ifnull(sum(miles),0) as m,ifnull(sum(oil),0),ifnull(sum(gas),0),ifnull(sum(ele),0)
    into r1,r2,r3,r4
    from api_energe a 
    where a.deptid=p_lineDeptid
    and stat_date>=stime and stat_date<etime
    and a.vehicleNo is not null ;
  end if;
  
  if p_dataType in (0,5,6) then   
	select ifnull(sum(total),0),ifnull(count(distinct vehicleNo),0) 
    into r5,r6 from api_breakdowns t1
    where t1.deptid=p_lineDeptid
    and stat_date>=stime and stat_date<etime;
  end if;
  
  if p_dataType in (0,7,8) then
  
   -- select ifnull(sum(total),0) ,ifnull(count(distinct vehicleNo) ,0) into r7,r8
   -- from api_violation a
   -- where stat_date>=stime and stat_date<etime 
   -- and deptId=p_lineDeptid
   -- and a.vehicleNo is not null 
   -- and a.driverName is not null;
    
  SELECT IFNULL(SUM(a.total),0),COUNT(1) into r7,r8 FROM (SELECT lineId AS lineDptid, SUM(totalNum) AS total FROM stat_driving_violation_day  api
    JOIN (SELECT driverid FROM v_driverinfo WHERE lineDeptid = p_lineDeptid) temp ON api.driverId=temp.driverid 
    AND  stat_date>=stime AND stat_date< etime
    GROUP BY api.deviceId )a ;
 end if;
  
    if r1>0 then
      set r9 :=round(r2*1.00/r1*100,'2');
      set r10 :=round(r3*1.00/r1*100,'2');
      set r11 :=round(r4*1.00/r1*100,'2');
	else
      set r9 :=0;
      set r10 :=0;
      set r11 :=0;
    end if;
    
    set r0 :=concat('{"1":',r1,',"2":',r2,',"3":',r3,',"4":',r4,',"5":',r5,',"6":',r6,',"7":',r7
             ,',"8":',r8,',"9":',r9,',"10":',r10,',"11":',r11,'}');
    
  set result :=case  p_dataType 
               when 1 then r1 
               when 2 then r2
               when 3 then r3
               when 4 then r4
               when 5 then r5
               when 6 then r6
               when 7 then r7
               when 8 then r8
               when 9 then r9
               when 10 then r10
               when 11 then r11
               when 0 then r0
               else '0'
               end;
                
  return result;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for delete_history_data
-- ----------------------------
DROP PROCEDURE IF EXISTS `delete_history_data`;
delimiter ;;
CREATE PROCEDURE `delete_history_data`(days INT)
BEGIN
    DECLARE dead_line int;
    SELECT (
             SELECT date_format(date_sub(now(), INTERVAL days DAY), '%Y-%m-%d')
           ) into dead_line;
    SELECT @r:=dead_line;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for driver_attendance_process
-- ----------------------------
DROP PROCEDURE IF EXISTS `driver_attendance_process`;
delimiter ;;
CREATE PROCEDURE `driver_attendance_process`(IN p_startDate date, IN p_endDate date)
BEGIN
   # p_startDate：开始日期
   # p_endDate：结束日期 实际应用时 = p_startDate+interval 1 day
   
   delete from driver_attendance where signInTime>p_startDate and signInTime<p_endDate and workHours<0;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for drop_newAlarmSummary_partition
-- ----------------------------
DROP PROCEDURE IF EXISTS `drop_newAlarmSummary_partition`;
delimiter ;;
CREATE PROCEDURE `drop_newAlarmSummary_partition`()
BEGIN
	#Routine body goes here...
DECLARE v_sql varchar(20000);
DECLARE v_cur CURSOR FOR SELECT
	concat(
		'alter table ',
		table_name,
		' drop PARTITION ',
		partition_name
	)
FROM
	information_schema. PARTITIONS a
WHERE
	a.table_schema = DATABASE ()
AND a.table_name = 'newAlarmSummary'
AND partition_description
AND partition_description <= unix_timestamp(CURRENT_DATE);
OPEN v_cur;
SET @done = FALSE;
FETCH v_cur INTO v_sql;
WHILE NOT @done DO
SET @v_sql := v_sql;
PREPARE stmt
FROM
	@v_sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
FETCH v_cur INTO v_sql;
END WHILE;
CLOSE v_cur;
END
;;
delimiter ;

-- ----------------------------
-- Function structure for f_get_total
-- ----------------------------
DROP FUNCTION IF EXISTS `f_get_total`;
delimiter ;;
CREATE FUNCTION `f_get_total`(p_type VARCHAR(100), p_vehicleno VARCHAR(100))
 RETURNS double
BEGIN
    DECLARE v_sum DOUBLE DEFAULT 0;
    IF p_type <> 'gas' && p_type <> 'oil' && p_type <> 'ele'
    THEN
      RETURN -1;
    END IF;
    SELECT sum(energyVolume) INTO v_sum  FROM
      t_energyinfo    WHERE
      vehicleNo = p_vehicleno AND
      energyType = p_type ;
    return v_sum;
  END
;;
delimiter ;

-- ----------------------------
-- Function structure for getDistance
-- ----------------------------
DROP FUNCTION IF EXISTS `getDistance`;
delimiter ;;
CREATE FUNCTION `getDistance`(lng1 varchar(45)
    ,lat1 varchar(45)
    ,lng2 varchar(45) 
    ,lat2 varchar(45))
 RETURNS double
begin
-- 获取到 黑点区域中心  的距离
    declare d double;
    declare radius int;
    set radius = 6378140; #假设地球为正球形，直径为6378140米
    
    set d = round((2*ATAN2(SQRT(SIN((lat1-lat2)*PI()/180/2)   
        *SIN((lat1-lat2)*PI()/180/2)+   
        COS(lat2*PI()/180)*COS(lat1*PI()/180)   
        *SIN((lng1-lng2)*PI()/180/2)   
        *SIN((lng1-lng2)*PI()/180/2)),   
        SQRT(1-SIN((lat1-lat2)*PI()/180/2)   
        *SIN((lat1-lat2)*PI()/180/2)   
        +COS(lat2*PI()/180)*COS(lat1*PI()/180)   
        *SIN((lng1-lng2)*PI()/180/2)   
        *SIN((lng1-lng2)*PI()/180/2))))*radius,1);
    return d;
end
;;
delimiter ;

-- ----------------------------
-- Function structure for getParentList
-- ----------------------------
DROP FUNCTION IF EXISTS `getParentList`;
delimiter ;;
CREATE FUNCTION `getParentList`(rootId varchar(50))
 RETURNS varchar(1000) CHARSET utf8
BEGIN 
       DECLARE pTemp VARCHAR(1000);  
       DECLARE cTemp VARCHAR(1000);
      
       SET pTemp = '$';  
       SET cTemp =rootId;
      
       WHILE cTemp is not null DO  
         SET pTemp = concat(pTemp,',',cTemp);
         SELECT group_concat(operationid) INTO cTemp FROM t_clientopeartion   
         WHERE FIND_IN_SET(parentid,cTemp)>0; 
       END WHILE;  
       RETURN pTemp;  
     END
;;
delimiter ;

-- ----------------------------
-- Function structure for get_miles
-- ----------------------------
DROP FUNCTION IF EXISTS `get_miles`;
delimiter ;;
CREATE FUNCTION `get_miles`(p_vehicle_no VARCHAR(100))
 RETURNS int(11)
BEGIN 
      DECLARE v_mile INTEGER DEFAULT 0;
      SELECT accruedmiles INTO v_mile FROM t_vehiclemiles
      WHERE vehicleNo = p_vehicle_no and stat_date = (curdate() - INTERVAL 1 DAY);
      RETURN v_mile;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for init_tint_table
-- ----------------------------
DROP PROCEDURE IF EXISTS `init_tint_table`;
delimiter ;;
CREATE PROCEDURE `init_tint_table`()
BEGIN
drop table if exists t_int;
create table t_int(x int primary key);
insert into t_int
select x from (
select 100*(tt1.r-1)+tt2.r as x
from (select @r1:=@r1+1 as r from information_schema.COLUMNS t1 inner join (select @r1:=0) t2 limit 100 ) tt1
inner join (select @r2:=@r2+1 as r from information_schema.COLUMNS t1 inner join (select @r2:=0) t2 limit 100 ) tt2
order by x ) ttt order by x asc ;
END
;;
delimiter ;

-- ----------------------------
-- Function structure for int2b_to_hex
-- ----------------------------
DROP FUNCTION IF EXISTS `int2b_to_hex`;
delimiter ;;
CREATE FUNCTION `int2b_to_hex`(p_intstr varchar(1024))
 RETURNS varchar(512) CHARSET utf8
BEGIN
declare v_hexstr varchar(512) default '';
declare v_len tinyint;
declare v_counter tinyint default 1;
declare v_num1 varchar(2);
declare v_num2 varchar(2);
set v_len :=length(p_intstr)/2 ;
while v_counter <= v_len do
  set v_num1 :=substr(p_intstr,(v_counter-1)*2+1,1);
  set v_num2 :=substr(p_intstr,(v_counter-1)*2+2,1);
  -- 检查数据有效性
  if v_num1 > 3 or v_num2 > 3 then
    set @msg = "number in string must be less than 3 !";  
    SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
  end if;
  
  set v_hexstr :=concat(v_hexstr,conv(v_num1*4+v_num2,10,16));
  set v_counter :=v_counter+1;
end while;
RETURN v_hexstr;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_alarm
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_alarm`;
delimiter ;;
CREATE PROCEDURE `p_api_alarm`(p_timetype INT,p_lineDeptid INT,OUT p_result TEXT)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 [
 {"vehicleNo":"车牌A","alarmType":"机油压力过低","duration":152377,"statTime":"2017-03-27 16:30:23","deviceId":"1612060000000387",
  "alarmstarttime":"2017-03-27 16:30:23","lastAlarmTime":"2017-03-29 10:49:51","gx":"123.40137777778","gy":"41.685955555556"},
 ....
 ]
 */
DECLARE stime DATETIME;-- 统计的开始日期（包含本身）
DECLARE etime DATETIME;-- 统计的结束日期（不包含本身）
set group_concat_max_len = 65536;
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSE
  -- 非法参数
  SET @msg = "invaid p_timetype value,must be in (0,1,2)";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
SELECT CONCAT('[',
          GROUP_CONCAT(CONCAT('{"vehicleNo":"',vehicleNo,'","alarmType":"',
           alarmType,'","duration":',duration,',"statTime":',statTime,
           ',"deviceId":',deviceId,',"alarmstarttime":',alarmstarttime,
           ',"lastAlarmTime":',lastAlarmTime,',"gx":',gx,',"gy":',gy,'}')),
          ']')
     INTO p_result
FROM (
SELECT vehicleNo,-- 车牌号
  alarmType,-- 故障类型
  duration,-- 持续时间
  statTime,-- 发生时间
  deviceId,-- 车载设备号
  alarmstarttime,-- 报警开始时间
  lastAlarmTime,-- 最后报警时间
  gx, -- 报警发送位置gx
  gy  -- 报警发送位置gy
 FROM t_alarmsummary
 WHERE 1=1
 AND statTime >= stime AND statTime < etime
 AND lineDeptId=p_lineDeptid
) tt;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdowns
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdowns`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdowns`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
	#Routine body goes here...
DECLARE v_logid INT;
DECLARE	v_count INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('p_api_breakdowns',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_breakdowns';
DROP TABLE IF EXISTS t_vehicleinfo_tmp;
CREATE TEMPORARY TABLE t_vehicleinfo_tmp LIKE t_vehicleinfo;
-- 报警小时统计
DELETE FROM api_breakdowns_hour WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns_hour(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT lineDeptId,vehicleNo,DATE_FORMAT(alarmstarttime,'%Y-%m-%d %H:00:00') AS stat_date,alarmType,COUNT(1) AS total,alarmLevel FROM(
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
  UNION all
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary_unfinished  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
)a GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel;
-- select count(1) into v_count from api_breakdowns_hour;
-- 报警日统计
DELETE FROM api_breakdowns WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,CAST(stat_date AS DATE) AS stat_time,
alarmtypename,SUM(total),alarmLevel
 FROM api_breakdowns_hour
WHERE stat_date>=p_startDate AND stat_date<p_endDate
GROUP BY deptId,vehicleNo,stat_time,alarmtypename,alarmLevel ;
-- 报警月统计
DELETE FROM api_breakdowns_month WHERE stat_date=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY;
INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ;
DROP TABLE t_vehicleinfo_tmp;
-- UPDATE maintain_events_log SET comments=v_count WHERE id=v_logid;
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_forsystemtype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_forsystemtype`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_forsystemtype`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), systemType VARCHAR(45),bigsysttemType VARCHAR(45),alarmType VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT a.alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
    GROUP BY a.alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,sum(total) AS cnt, stat_date FROM (
SELECT  a.alarmtypename, total, stat_date FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
) a   GROUP BY alarmtypename,stat_date') ;
   
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
  
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT   total,stat_date,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
     )a  GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns_month 
a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  a.alarmtypename, total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns_month a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
   ) a GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_forsystemtype_bak
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_forsystemtype_bak`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_forsystemtype_bak`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), systemType VARCHAR(45),bigsysttemType VARCHAR(45),alarmType VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
union all 
SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and`type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' )
    GROUP BY alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,sum(total) AS cnt, stat_date FROM (
SELECT  alarmtypename, total, stat_date FROM api_breakdowns_hour 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' )
) a   GROUP BY alarmtypename,stat_date') ;
   
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and
`type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\'  ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  sum(total) as total,stat_date,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename,stat_date)a  GROUP BY alarmtypename,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  alarmtypename,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\'  ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename,stat_date) a GROUP BY alarmtypename,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_forsystemtype_new
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_forsystemtype_new`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_forsystemtype_new`(p_timetype int,startDate date ,endDate date,deptid VARCHAR(25),depttype VARCHAR(45), systemType VARCHAR(45),bigsysttemType VARCHAR(45),alarmType VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
# p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
  
ELSEIF p_timetype =6 THEN
  SET etime :=endDate;
  SET stime :=startDate;
  
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 5 or 6";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT a.alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
    GROUP BY a.alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,sum(total) AS cnt, stat_date FROM (
SELECT  a.alarmtypename, total, stat_date FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
) a   GROUP BY alarmtypename,stat_date') ;
   
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
  
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT   total,stat_date,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
     )a  GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE   
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns_month 
a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  a.alarmtypename, total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns_month a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
   ) a GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_forsystemtype_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_forsystemtype_old`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_forsystemtype_old`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), systemType VARCHAR(45),bigsysttemType VARCHAR(45),alarmType VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT a.alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
    GROUP BY a.alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,sum(total) AS cnt, stat_date FROM (
SELECT  a.alarmtypename, total, stat_date FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
) a   GROUP BY alarmtypename,stat_date') ;
   
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
  
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT   total,stat_date,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     )a  GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns_month 
a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  a.alarmtypename, total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns_month a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
 inner join v_vehicleinfo c on a.vehicleNo=c.vehicleNo and c.', depttype,'=',deptid,'
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
   ) a GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_forsystemtype_plus
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_forsystemtype_plus`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_forsystemtype_plus`(p_timetype int,startDate date ,endDate date,deptid VARCHAR(25),depttype VARCHAR(45), systemType VARCHAR(45),bigsysttemType VARCHAR(45),alarmType VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
# p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
  
ELSEIF p_timetype =6 THEN
  SET etime :=endDate;
  SET stime :=startDate;
  
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 5 or 6";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT a.alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
    GROUP BY a.alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,sum(total) AS cnt, stat_date FROM (
SELECT  a.alarmtypename, total, stat_date FROM api_breakdowns_hour a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
) a   GROUP BY alarmtypename,stat_date') ;
   
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 or p_timeType=6 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
  
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT   total,stat_date,a.alarmtypename FROM api_breakdowns a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
     )a  GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE   
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,a.alarmtypename FROM api_breakdowns_month 
a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
     GROUP BY a.alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
 PREPARE state1 FROM @sql;
 EXECUTE  state1;
 DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  a.alarmtypename, total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns_month a
inner join (SELECT alarmtypename FROM v_all_alarmtype WHERE parenttype like \'',bigsysttemType,'\' and `type` like \'',systemType,'\' and `alarmtypename` like \'',alarmType,'\' 
 ) b on  a.alarmtypename =b.alarmtypename 
inner join t_mauth_dept tm on a.deptId=tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
   ) a GROUP BY alarmtypename,stat_date') ;
      
 PREPARE state2 FROM @sql2;
 EXECUTE  state2;
 DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrendforbreak_fortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrendforbreak_fortype`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrendforbreak_fortype`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45), breakdowntype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT alarmtypename AS tname,count(1) as cnt  FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' )
    GROUP BY alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,count(1) AS cnt, stat_date FROM (
SELECT  alarmtypename,  stat_date FROM api_breakdowns_hour 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' )
) a   GROUP BY alarmtypename,stat_date') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  sum(total) as total,stat_date,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename,stat_date)a  GROUP BY alarmtypename,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  alarmtypename,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  ) AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY alarmtypename,stat_date) a GROUP BY alarmtypename,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_fortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_fortype`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_fortype`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45), breakdowntype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT abh.vehicleNo AS tname,sum(total) as cnt  
FROM api_breakdowns_hour abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' AND vehicleNo is NOT NULL 
GROUP BY abh.vehicleNo ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,sum(total)  AS cnt, stat_date FROM (
SELECT  abh.vehicleNo,total,stat_date 
FROM api_breakdowns_hour abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 

) a   GROUP BY vehicleNo,stat_date') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
FROM api_breakdowns abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' AND vehicleNo is NOT NULL
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total,stat_date 
FROM api_breakdowns abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'= \'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date)a  GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
FROM api_breakdowns_month abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' AND vehicleNo is NOT NULL
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date 
FROM api_breakdowns_month abh 
inner join (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
						union all 
						SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' ) alarm
on abh.alarmtypename = alarm.alarmtypename
inner join t_mauth_dept tm on abh.deptId = tm.lineDeptId
WHERE ', depttype,'=\'',deptid,'\' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date) a GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_fortype_honor
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_fortype_honor`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_fortype_honor`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), breakdowntype VARCHAR(45) ,OUT p_result VARCHAR(1024))
BEGIN
# p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (
         SELECT vehicleNo AS tname,sum(total) as cnt  FROM api_breakdowns_hour  WHERE stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' and ', depttype,'=\'',deptid,'\' 
         AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
               ) 
        GROUP BY vehicleNo ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT vehicleNo AS tname,sum(total)  AS cnt, stat_date FROM (
        SELECT  vehicleNo,  total,stat_date FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  and ', depttype,'=\'',deptid,'\' 
        AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              )) a   
       GROUP BY vehicleNo,stat_date') ;
SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( 
         SELECT SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              ) 
         AND ' , depttype,'=\'',deptid,'\' 
         GROUP BY vehicleNo )a)tt 
    ORDER BY cnt DESC LIMIT ', v_topN);
   
   
   SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
     SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
          SELECT  vehicleNo,deptid,sum(total) as total,stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              ) 
          AND ', depttype,'=\'',deptid,'\' 
          GROUP BY vehicleNo,stat_date)a  
    GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( 
         SELECT SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
               ) 
         AND ', depttype,'=\'',deptid,'\' 
         GROUP BY vehicleNo )a)tt 
    ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
       SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
             ) 
       AND ', depttype,'=\'',deptid,'\' 
       GROUP BY vehicleNo,stat_date) a 
    GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_fortype_new
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_fortype_new`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_fortype_new`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), breakdowntype VARCHAR(45) ,OUT p_result VARCHAR(1024))
BEGIN
# p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (
         SELECT vehicleNo AS tname,sum(total) as cnt  FROM api_breakdowns_hour  WHERE stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' and vehicleNo in (
              SELECT vehicleNo FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=\'',deptid,'\')
         AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
               ) 
        GROUP BY vehicleNo ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT vehicleNo AS tname,sum(total)  AS cnt, stat_date FROM (
        SELECT  vehicleNo,  total,stat_date FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  and vehicleNo in (
            SELECT vehicleNo FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=\'',deptid,'\') 
        AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              )) a   
       GROUP BY vehicleNo,stat_date') ;
SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( 
         SELECT SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              ) 
         AND vehicleNO IN (
             SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
         GROUP BY vehicleNo )a)tt 
    ORDER BY cnt DESC LIMIT ', v_topN);
   
   
   SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
     SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
          SELECT  vehicleNo,deptid,sum(total) as total,stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
              ) 
          AND vehicleNO IN (
               SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
          GROUP BY vehicleNo,stat_date)a  
    GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
     SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( 
         SELECT SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
               ) 
         AND vehicleNO IN (
              SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
         GROUP BY vehicleNo )a)tt 
    ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
       SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  
             ) 
       AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
       GROUP BY vehicleNo,stat_date) a 
    GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_fortype_plus
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_fortype_plus`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_fortype_plus`(p_timetype INT,deptid VARCHAR(25),depttype VARCHAR(45), breakdowntype VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
     # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
    SELECT tname FROM (
        SELECT alarmtypename AS tname,sum(total) as cnt  FROM api_breakdowns_hour  WHERE stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' and vehicleNo in (
           SELECT vehicleNo FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=\'',deptid,'\')
        AND alarmtypename  IN (
           SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
           union all 
           SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' 
            ) 
        GROUP BY alarmtypename ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT alarmtypename AS tname,sum(total)  AS cnt, stat_date FROM (
        SELECT  alarmtypename,  total,stat_date FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and vehicleNo in (
            SELECT vehicleNo FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=\'',deptid,'\')
        AND alarmtypename IN (
            SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
            union all 
            SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\')
            ) a   
       GROUP BY alarmtypename,stat_date') ;
SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
INSERT INTO tmp_datesheet VALUES(@start_date);
SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
    SELECT tname FROM (
      SELECT alarmtypename AS tname,total AS cnt FROM ( 
          SELECT SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename IN (
             SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
             union all 
             SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'
              ) 
          AND vehicleNO IN (
             SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
          GROUP BY alarmtypename )a)tt 
      ORDER BY cnt DESC LIMIT ', v_topN);
   
   
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
    SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
        SELECT  alarmtypename,deptid,sum(total) as total,stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename  IN (
            SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
            union all 
            SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'
            ) 
        AND vehicleNO IN (
            SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
        GROUP BY alarmtypename,stat_date)a  
    GROUP BY alarmtypename,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
    SELECT tname FROM (SELECT alarmtypename AS tname,total AS cnt FROM ( 
         SELECT SUM(total) AS total,alarmtypename FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  IN (
             SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
             union all 
             SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'
             ) 
         AND vehicleNO IN (
             SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
         GROUP BY alarmtypename )a)tt 
   ORDER BY cnt DESC LIMIT ', v_topN);
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
     SELECT alarmtypename AS tname,SUM(total) AS cnt,stat_date FROM (
         SELECT  alarmtypename,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date 
         FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' and alarmtypename  IN (
              SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' 
              union all 
              SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'
              ) 
         AND vehicleNO IN (
              SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = \'',deptid,'\') 
         GROUP BY alarmtypename,stat_date) a 
     GROUP BY alarmtypename,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_system_fortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_system_fortype`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_system_fortype`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45),systemType VARCHAR(45), breakdowntype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT vehicleNo AS tname,count(1) as cnt 
		FROM api_breakdowns_hour abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
    GROUP BY vehicleNo ORDER BY cnt DESC )tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,count(1) AS cnt, stat_date FROM (
SELECT  vehicleNo,  stat_date 
		FROM api_breakdowns_hour abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
) a   GROUP BY vehicleNo,stat_date') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
		FROM api_breakdowns abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\'  
 GROUP BY vehicleNo )a)tt ORDER BY cnt DESC ');
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total,stat_date 
		FROM api_breakdowns abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date)a  GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
		FROM api_breakdowns_month abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC');
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date 
		FROM api_breakdowns_month abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date) a GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_system_fortype_copy
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_system_fortype_copy`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_system_fortype_copy`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45),systemType VARCHAR(45), breakdowntype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT vehicleNo AS tname,count(1) as cnt  FROM api_breakdowns_hour  WHERE stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' ) 
    GROUP BY vehicleNo ORDER BY cnt DESC )tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,count(1) AS cnt, stat_date FROM (
SELECT  vehicleNo,  stat_date FROM api_breakdowns_hour 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
and vehicleNo in (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\'  and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'   and `type` like \'',systemType,'\' ) 
) a   GROUP BY vehicleNo,stat_date') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  and `type` like \'',systemType,'\' ) 
AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC ');
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total,stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' ) AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY vehicleNo,stat_date)a  GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND alarmtypename  
IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' ) AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC');
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and alarmtypename  IN (SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` like \'',breakdowntype,'\' and `type` like \'',systemType,'\' union all SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` like \'',breakdowntype,'\'  and `type` like \'',systemType,'\' ) AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY vehicleNo,stat_date) a GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdownstrend_system_fortype_copy1
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdownstrend_system_fortype_copy1`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdownstrend_system_fortype_copy1`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45),systemType VARCHAR(45), breakdowntype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"车辆1","data":[12,13,45,56,18,1,2]},
 {"name":"车辆2","data":[12,13,45,56,18,1,2]},
 {"name":"车辆3","data":[12,13,45,56,18,1,2]},
 {"name":"车辆4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT tname FROM (SELECT vehicleNo AS tname,count(1) as cnt 
		FROM api_breakdowns_hour abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
    GROUP BY vehicleNo ORDER BY cnt DESC )tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,count(1) AS cnt, stat_date FROM (
SELECT  vehicleNo,  stat_date 
		FROM api_breakdowns_hour abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
) a   GROUP BY vehicleNo,stat_date') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
		FROM api_breakdowns abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\'  
 GROUP BY vehicleNo )a)tt ORDER BY cnt DESC ');
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total,stat_date 
		FROM api_breakdowns abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date)a  GROUP BY vehicleNo,stat_date') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
 SELECT tname FROM (SELECT vehicleNo AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,vehicleNo 
		FROM api_breakdowns_month abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo )a)tt ORDER BY cnt DESC');
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT vehicleNo AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  vehicleNo,deptid,sum(total) as total, date_format(stat_date,\'%Y-%m-01\') as stat_date 
		FROM api_breakdowns_month abh INNER JOIN (
			SELECT alarmtypename FROM t_vehiclealarmtype WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
			UNION ALL
			SELECT alarmtypename FROM t_vehiclealarmtype2 WHERE `parenttype` LIKE \'',breakdowntype,'\' AND `type` LIKE \'',systemType,'\'
		) alarm ON abh.alarmtypename = alarm.alarmtypename		
		INNER JOIN t_mauth_dept tm ON abh.deptId = tm.lineDeptId
		WHERE ', depttype,'=',deptid,' and stat_date  >= \'', stime ,'\' AND stat_date < \'',etime,'\' 
     GROUP BY vehicleNo,stat_date) a GROUP BY vehicleNo,stat_date') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t1.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
 INNER JOIN tmp_breakdownname t3
 ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND
 t2.d=t1.stat_date 
GROUP BY t1.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdowns_day
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdowns_day`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdowns_day`(IN p_startDate DATE)
BEGIN
	#Routine body goes here...
DECLARE v_logid INT;

SET sql_safe_updates = 0;

INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('p_api_breakdowns_day',NOW(),NULL);


SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_breakdowns_day';


-- 报警今日统计
DELETE FROM api_breakdowns_day WHERE stat_date>=p_startDate;

INSERT INTO api_breakdowns_day(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT lineDeptId,vehicleNo,DATE_FORMAT(alarmstarttime,'%Y-%m-%d') AS stat_date,alarmType,COUNT(1) AS total,alarmLevel FROM(
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary  
     WHERE alarmstarttime>=p_startdate
  UNION
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary_unfinished  
     WHERE alarmstarttime>=p_startdate
)a GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel;

UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breakdowns_test
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breakdowns_test`;
delimiter ;;
CREATE PROCEDURE `p_api_breakdowns_test`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
	#Routine body goes here...
	
  -- 创建接收游标数据的变量
	declare id bigint(20);
	DECLARE deviceId VARCHAR(20); 
	DECLARE alarmType VARCHAR(20);
	declare startTime  timestamp;
  declare endTime timestamp;
	DECLARE var_time_diff int;
	-- 创建总数变量
	declare total int default 0;
	-- 创建结束标志变量
	declare done int default false;

	-- 创建游标
	declare cur cursor for SELECT a.id,a.deviceId,a.alarmstarttime,a.alarmType FROM t_alarmsummary_unfinished_tmp a WHERE a.alarmstarttime>=p_startdate  AND a.alarmstarttime<p_enddate;
  -- 指定游标循环结束时的返回值
	declare continue HANDLER for not found set done = true;
	-- 设置初始值
	set total = 0;
	-- 打开游标
	open cur;
	-- 开始循环游标里的数据
	read_loop:loop
	-- 根据游标当前指向的一条数据
	fetch cur into id,deviceId,startTime,alarmType;
	
	select dismissTime into endTime from t_alarmsummary tas where tas.deviceId=deviceId and tas.alarmType=alarmType ORDER BY tas.dismissTime LIMIT 1;
	
	SET var_time_diff = TIMESTAMPDIFF(MINUTE, endTime, startTime);
	
	-- IF(var_time_diff<1) THEN
	-- 		delete from  t_alarmsummary_unfinished_tmp as tmpAlarm where tmpAlarm.id=id;
	-- 	END IF;--
	-- 判断游标的循环是否结束
	if done then
		leave read_loop;	-- 跳出游标循环
	end if;
	-- 结束游标循环
	end loop;
	-- 关闭游标
	close cur;
	INSERT INTO api_breakdowns_hour(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
	SELECT lineDeptId,vehicleNo,DATE_FORMAT(alarmstarttime,'%Y-%m-%d %H:00:00') AS stat_date,alarmType,COUNT(1) AS total,alarmLevel FROM(
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
  UNION
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary_unfinished_tmp  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
	)a GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_breaksystrendforbreak_fortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_breaksystrendforbreak_fortype`;
delimiter ;;
CREATE PROCEDURE `p_api_breaksystrendforbreak_fortype`(p_timetype INT,deptid varchar(25),depttype VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 故障类型分类 2018年10月5日 by hanyazhang
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 车辆数
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
 IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT TYPE as tname FROM (SELECT alarmtypename AS tname  FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
    GROUP BY alarmtypename,stat_date  )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`
 ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT `TYPE` as tname,SUM(cnt) AS cnt,stat_date FROM (SELECT alarmtypename AS tname, SUM(total) AS cnt,stat_date  FROM api_breakdowns_hour WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
    GROUP BY alarmtypename,stat_date  ORDER BY cnt DESC )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`,stat_date
') ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT TYPE as tname FROM (SELECT alarmtypename AS tname  FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
    GROUP BY alarmtypename,stat_date   )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`
 ');
   
   
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT `TYPE` as tname,SUM(cnt) AS cnt,stat_date FROM (SELECT alarmtypename AS tname, SUM(total) AS cnt,stat_date  FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
    GROUP BY alarmtypename,stat_date  ORDER BY cnt DESC )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`,stat_date
') ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_breakdownname;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_breakdownname AS 
SELECT TYPE as tname FROM (SELECT alarmtypename AS tname  FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
    GROUP BY alarmtypename,stat_date   )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`
 ');
    
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_breakdowncnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_breakdowncnt AS 
SELECT `TYPE` as tname,SUM(cnt) AS cnt,stat_date FROM (SELECT alarmtypename AS tname, SUM(total) AS cnt,stat_date  FROM api_breakdowns WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
    GROUP BY alarmtypename,stat_date  ORDER BY cnt DESC )tt INNER JOIN v_all_alarmtype tt2 ON tt.tname = tt2.`alarmtypename` GROUP BY tt2.`type`,stat_date
') ;
    
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_breakdownname t3
ON 1=1
LEFT JOIN tmp_breakdowncnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_consumeperday
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_consumeperday`;
delimiter ;;
CREATE PROCEDURE `p_api_consumeperday`(IN p_startDate DATE)
BEGIN
DECLARE v_logid INT;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments) VALUES('p_api_consumeperday',NOW(),NULL,'电车电耗日统计');
SELECT MAX(id) INTO v_logid FROM maintain_events_log_detail WHERE eventName='p_api_consumeperday';
-- 1. 获取每车最大最小时间
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_consumeperday',NOW(),NULL,'开始结束时间');
DROP TABLE IF EXISTS a;
create TEMPORARY table a  select vehicledeviceid,max(time) as end_time, min(time) as begin_time from t_electricvehicleana where  TIME >= p_startDate AND TIME < p_startDate+INTERVAL 1 DAY group by vehicledeviceid;
-- 2. 获取结束时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_consumeperday',NOW(),NULL,'开始电耗');
DROP TABLE IF EXISTS b;
create TEMPORARY table b  select a.vehicledeviceid, consumeperday from a inner join t_electricvehicleana on a.vehicledeviceid = t_electricvehicleana.vehicledeviceid and a.end_time = time;
 -- 3. 获取开始时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_consumeperday',NOW(),NULL,'结束电耗');
 DROP TABLE IF EXISTS c;
create TEMPORARY table c  select a.vehicledeviceid, consumeperday from a inner join t_electricvehicleana on a.vehicledeviceid = t_electricvehicleana.vehicledeviceid and a.begin_time = time;
-- 4. 两表相减并过滤
update api_energe e inner join (
select vehicleNo, (b.consumeperday - c.consumeperday) as consumerperday from b inner join c using (vehicledeviceid) inner join t_vehicleinfo as d on d.deviceid= vehicledeviceid where motorType='5' OR motorType='3' OR motorType='2')f on e.vehicleno=f.vehicleno
SET e.ele=f.consumerperday;
-- 更新日志
UPDATE maintain_events_log_detail SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_consumeperday_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_consumeperday_old`;
delimiter ;;
CREATE PROCEDURE `p_api_consumeperday_old`(IN p_startDate DATE)
BEGIN
DECLARE v_logid INT;
DECLARE var_vehicledeviceid VARCHAR(100) DEFAULT NULL ;
DECLARE var_vehicleNo VARCHAR(100) DEFAULT NULL ;
DECLARE max_time VARCHAR(100) DEFAULT NULL ;
DECLARE min_time VARCHAR(100) DEFAULT NULL ;
DECLARE max_energe timestamp DEFAULT NULL ;
DECLARE min_energe timestamp DEFAULT NULL ;
declare flag int default 0;
 -- 声明游标
DECLARE cur CURSOR FOR
-- 查询车辆表中所有的电耗车辆
  select deviceId,vehicleNo FROM t_vehicleinfo where motorType='5' OR motorType='3' OR motorType='2';
	-- 声明循环结束条件
	 declare continue handler for not found set flag = 1;
INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_consumeperday',NOW(),NULL,'电车电耗日统计');
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_consumeperday';
-- 打开游标
  OPEN cur ;
	-- 使用repeat循环语法
	l2:loop 
    -- 批读取数据到指定变量上
    FETCH cur INTO var_vehicledeviceid,
    var_vehicleNo;
		if flag=1 then -- 当无法fetch会触发handler continue
						leave l2;
		end if;
-- 获取车辆的上线开始结束时间
	SELECT
		MAX(time) ,MIN(time) into  max_time,min_time
	FROM
		t_electricvehicleana a
	WHERE
	a.vehicledeviceId=var_vehicledeviceid and
	a.time >= p_startDate and a.time<p_startDate+interval 1 day;
if max_time is not NULL THEN
-- 获取上线时电耗
	SELECT
		consumeperday into min_energe
	FROM
		t_electricvehicleana a
	WHERE
	a.vehicledeviceId=var_vehicledeviceid and
	a.time =min_time ;
-- 获取下线时电耗
	SELECT
		consumeperday into max_energe
	FROM
		t_electricvehicleana a
	WHERE
	a.vehicledeviceId=var_vehicledeviceid and
	a.time =max_time;
	-- 进行逻辑操作
  UPDATE api_energe set ele=(max_energe-min_energe) where vehicleNo=var_vehicleNo and stat_date=p_startDate;
  	
end if;
end loop;
close cur;
-- 更新日志
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for P_api_energe
-- ----------------------------
DROP PROCEDURE IF EXISTS `P_api_energe`;
delimiter ;;
CREATE PROCEDURE `P_api_energe`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
#Routine body goes here...
DECLARE v_logid INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('p_api_energe',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_energe';
#能耗
DELETE FROM api_energe WHERE stat_date>=p_startDate AND stat_date<p_endDate;
DELETE FROM api_energe_fault_data WHERE stat_date>=p_startDate AND stat_date<p_endDate;
call P_api_mileage(p_startDate,p_endDate);
-- 油耗信息  燃油车 和 油电车
call p_api_totalfuelcost(p_startDate,p_endDate);
-- 气耗信息  燃气车 和 气电车
CALL p_api_totalgasuse(p_startDate,p_endDate);
-- 电耗信息  电车 油电车 和气电车
CALL p_api_consumeperday(p_startDate);
-- 过滤数据 备份
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (miles<=0 or gas<0 or ele<0 or oil<0 or gas>500000) AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (oil+gas+ele)*100/IF(miles<=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
DELETE FROM api_energe WHERE (miles<=0 OR gas<0 OR ele<0 OR oil<0) AND stat_date>=p_startDate AND stat_date<p_endDate;
DELETE FROM api_energe WHERE (oil+gas+ele)*100/IF(miles<=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
DELETE FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;  
  -- 2017.03.27 增加 车辆违规线路统计，给api_get_data调用
  
DELETE FROM stat_api_data_violation_by_line WHERE stat_date=p_startDate ;
INSERT INTO stat_api_data_violation_by_line
       (stat_date,line_deptid,total_times,total_vehicles)
SELECT CAST(begin_time AS DATE) AS stat_date,t1.linedeptid,COUNT(1) AS total_times ,
    COUNT(DISTINCT t1.vehicledeviceid) AS total_vehicles
FROM stat_driving_violation_detail t1
WHERE 1=1 AND stat_date>=p_startDate AND stat_date < p_endDate AND t1.linedeptid IS NOT NULL GROUP BY t1.linedeptid;
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
UPDATE maintain_events_log_detail SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for P_api_energe_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `P_api_energe_old`;
delimiter ;;
CREATE PROCEDURE `P_api_energe_old`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
#Routine body goes here...
DECLARE v_logid INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('p_api_energe',NOW(),NULL);
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('p_api_energe',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_energe';
#能耗
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('里程',NOW(),NULL);
DELETE FROM api_energe WHERE stat_date>=p_startDate AND stat_date<p_endDate;
DROP TABLE IF EXISTS t_vehicleinfo_tmp;
CREATE TEMPORARY TABLE t_vehicleinfo_tmp LIKE t_vehicleinfo;
INSERT INTO t_vehicleinfo_tmp SELECT * FROM t_vehicleinfo;
-- 所有类型车的里程    /* 算法调整：今天最大里程-昨天最大里程。heli 2017/05/08    改回 今天最大里程-昨天最大里程 2018年11月2日 by hanyazhang */
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  0 AS oil,
  0 AS gas,
  0 AS ele,
  IFNULL(MAX(a.mileage+0)-MIN(a.mileage+0),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage+0)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND mileage>0    -- 里程异常过滤
GROUP BY b.deptid,b.vehicleNo,stat_date,motorType ;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('油耗',NOW(),NULL);
-- 油耗信息  燃油车 和 油电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='01' OR vehicletypeid='03')
AND  totalfuelcost+0<100000 AND  totalfuelcost>0 AND totalfuelcost IS NOT NULL
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.oil:=d.oil ;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('气耗',NOW(),NULL);
-- 气耗信息  燃气车 和 气电车
 UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),100) AS gas FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='04' OR vehicletypeid='05')
AND  totalgasuse+0<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.gas=d.gas ;
-- 本段注释为原始统计逻辑 20191021因统计速度过慢,由p_api_totalgasuse替换
-- CALL p_api_totalgasuse(p_startDate);
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('电耗',NOW(),NULL);
-- 电耗信息  电车 油电车 和气电车
 UPDATE api_energe c INNER JOIN (
 SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,IFNULL(MAX(consumeperday)-MIN(consumeperday),0) AS ele FROM t_electricvehicleana a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='05' OR vehicletypeid='03' OR vehicletypeid='02')
 AND consumeperday+0<100000  AND consumeperday IS NOT NULL   AND  consumeperday>0
 GROUP BY vehicleNo,stat_date
)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
 SET c.ele=d.ele ;
 
-- 本段注释为原始统计逻辑 20191021因统计速度过慢,由p_api_consumeperday替换
-- CALL p_api_consumeperday(p_startDate);
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('过滤数据',NOW(),NULL);
-- 过滤数据 备份
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (oil+gas+ele)*100/IF(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
-- DELETE FROM api_energe WHERE oil+gas+ele>0 AND miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE (oil+gas+ele)*100/IF(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
   DELETE FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
   
   INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('违规线路统计',NOW(),NULL);
   
  -- 2017.03.27 增加 车辆违规线路统计，给api_get_data调用
 DELETE FROM stat_api_data_violation_by_line WHERE stat_date=p_startDate ;
 INSERT INTO stat_api_data_violation_by_line
    (stat_date,line_deptid,total_times,total_vehicles)
  SELECT CAST(begin_time AS DATE) AS stat_date,t1.linedeptid,COUNT(1) AS total_times ,
    COUNT(DISTINCT t1.vehicledeviceid) AS total_vehicles
 FROM stat_driving_violation_detail t1
  WHERE 1=1
    AND stat_date>=p_startDate AND stat_date < p_endDate
    AND t1.linedeptid IS NOT NULL GROUP BY t1.linedeptid;
DROP TABLE t_vehicleinfo_tmp;
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
   INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime) VALUES('p_api_energe',NULL,now());
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_energy
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_energy`;
delimiter ;;
CREATE PROCEDURE `p_api_energy`(IN p_timetype INT, IN p_lineDeptid INT,OUT p_result TEXT)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
   # p_sum： 0-获取总计  1-获取明细
/*
 [
 {"vehicleNo":"车牌A","stat_date":"2017-07-01","green":10.11,"idle":5.0,
   "greenTime":8.0,"idleTime":4.0,"efficientTime":6.0,"conditionNonTime":1.0,"engineOverRun":2.0},
 ....
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身）
set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be in (0,1,2)";
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg;
end if;
select concat('[',
          group_concat(concat('{"vehicleNo":"',vehicleNo,'","stat_date":"',
           stat_date,'","green":"',runTime,'","greenTime":"',greenRunTime,
           '","idleTime":"',idleTime,'","efficientTime":"',efficientSpeedTime,
           '","conditionNonTime":"',NotRunconditionTime,'","engineOverRun":"',
            engineOverRunTime,'"}')),
          ']')
     into p_result
from (
  -- 修改：将多条记录相应字段求和，返回一条记录。by 孟凡印 2017-08-12
select vehicleNo,-- 车牌号
  stat_date,-- 统计月份
  sum(runTime) as runTime,-- 运行总时长
  sum(idleTime) as idleTime,-- 怠速时长
  sum(greenRunTime) as greenRunTime,-- 绿区转速时长
  sum(efficientSpeedTime) as efficientSpeedTime,-- 紧急车速时长
  sum(NotRunconditionTime) as NotRunconditionTime,-- 非营运空调开启时长
  sum(engineOverRunTime) as engineOverRunTime -- 发动机超转时长
 from stat_energy_saving_summary_day
 where 1=1
 and stat_date >=stime and stat_date < etime
 and deptid=p_lineDeptid GROUP BY vehicleNo ORDER BY
  (runTime + idleTime + greenRunTime + efficientSpeedTime + NotRunconditionTime + engineOverRunTime) DESC 
) tt;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_energyrank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_energyrank`;
delimiter ;;
CREATE PROCEDURE `p_api_energyrank`(p_timetype INT,deptid INT,depttype VARCHAR(45), motortype int ,OUT p_result VARCHAR(1024))
BEGIN
   # deptid:机构id  depttype：机构等级
   # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年
/*
[
 {"type":"oil","data":[20,30,45,44,56,78,80]},
 {"type":"gas","data":[20,30,45,44,56,78,80]},
 {"type":"elec","data":[20,30,45,44,56,78,80]}
]
 */
declare stime date;-- 统计的开始日期（包含本身）
declare etime date;-- 统计的结束日期（不包含本身） 
set p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=(LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH);
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  
   -- 按日
IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
DROP TABLE IF EXISTS tmp01 ; 
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%H:00\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
 CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
INNER JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(
SELECT a.stat_date,a.fuleHundredMiles as oil ,a.gasHundredMiles as gas ,a.elecHundredMiles as ele
FROM stat_energy_compare a 
WHERE  timetype=2 and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) and motorType like ',motortype,'  group by stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
   
  
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 故障名 项
DROP TABLE IF EXISTS tmp01 ; 
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%d\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
 CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
INNER JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(SELECT stat_date,ROUND(SUM(oil)*100/SUM(IF(miles<0,0,miles)),2) AS oil,ROUND(SUM(gas)*100/SUM(IF(miles<0,0,miles)),2)  AS gas,ROUND(SUM(ele)*100/SUM(IF(miles<0,0,miles)),2)  AS ele
FROM (
SELECT a.stat_date,a.oil,a.gas,a.ele,a.miles 
FROM api_energe a 
WHERE  stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) and motorType like ',motortype,' ) t0 GROUP BY stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
   
  
select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
   
DROP TABLE IF EXISTS tmp01 ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%m\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
  CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
inner JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(SELECT  stat_date ,ROUND(SUM(oil)*100/SUM(IF(miles<0,0,miles)),2) AS oil,ROUND(SUM(gas)*100/SUM(IF(miles<0,0,miles)),2)  AS gas,ROUND(SUM(ele)*100/SUM(IF(miles<0,0,miles)),2)  AS ele
FROM (
SELECT DATE_FORMAT(a.stat_date,\'%Y-%m-01\') as stat_date,a.oil,a.gas,a.ele,a.miles
FROM api_energe a 
WHERE  stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) and motorType like ',motortype,') t0 GROUP BY stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
    
    
  
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
    
    
  end if;  
END IF;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_energyrank_nomotortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_energyrank_nomotortype`;
delimiter ;;
CREATE PROCEDURE `p_api_energyrank_nomotortype`(p_timetype INT,deptid INT,depttype VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
   # deptid:机构id  depttype：机构等级
   # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年
/*
[
 {"type":"oil","data":[20,30,45,44,56,78,80]},
 {"type":"gas","data":[20,30,45,44,56,78,80]},
 {"type":"elec","data":[20,30,45,44,56,78,80]}
]
 */
declare stime date;-- 统计的开始日期（包含本身）
declare etime date;-- 统计的结束日期（不包含本身） 
set p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  
   -- 按日
IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
select * from tmp_datesheet;
DROP TABLE IF EXISTS tmp01 ; 
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%H:00\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
                                         
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
 CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
INNER JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(
SELECT a.stat_date,a.fuleHundredMiles as oil ,a.gasHundredMiles as gas ,a.elecHundredMiles as ele
FROM stat_energy_compare a 
WHERE  timetype=2 and stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) group by stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
   
  
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 故障名 项
DROP TABLE IF EXISTS tmp01 ; 
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%d\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
 CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
INNER JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(SELECT stat_date,ROUND(SUM(oil)*100/SUM(IF(miles<0,0,miles)),2) AS oil,ROUND(SUM(gas)*100/SUM(IF(miles<0,0,miles)),2)  AS gas,ROUND(SUM(ele)*100/SUM(IF(miles<0,0,miles)),2)  AS ele
FROM (
SELECT a.stat_date,a.oil,a.gas,a.ele,a.miles 
FROM api_energe a 
WHERE  stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) ) t0 GROUP BY stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
   
  
select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
   
DROP TABLE IF EXISTS tmp01 ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp01 AS
SELECT TYPE,CONCAT(\'{"type":"\',TYPE,\'","data":[\',GROUP_CONCAT(DATA ORDER BY d ASC),\'],"time":["\',GROUP_CONCAT(date_format(d,\'%m\') ORDER BY d ASC Separator \'","\'),\'"]}\' ) AS DATA
FROM (
SELECT CASE t2.r WHEN 1 THEN \'oil\' WHEN 2 THEN \'gas\' ELSE \'ele\' END AS TYPE,t1.d,
  CASE t2.r WHEN 1 THEN IFNULL(t3.oil,0) WHEN 2 THEN IFNULL(t3.gas,0) ELSE IFNULL(t3.ele,0) END AS DATA
FROM tmp_datesheet t1 
inner JOIN (SELECT 1 r UNION ALL SELECT 2 UNION ALL SELECT 3) t2 ON 1=1
LEFT JOIN
(SELECT  stat_date ,ROUND(SUM(oil)*100/SUM(IF(miles<0,0,miles)),2) AS oil,ROUND(SUM(gas)*100/SUM(IF(miles<0,0,miles)),2)  AS gas,ROUND(SUM(ele)*100/SUM(IF(miles<0,0,miles)),2)  AS ele
FROM (
SELECT DATE_FORMAT(a.stat_date,\'%Y-%m-01\') as stat_date,a.oil,a.gas,a.ele,a.miles
FROM api_energe a 
WHERE  stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND vehicleNo IN (SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN t_mauth_dept c ON b.deptId = c.lineDeptId WHERE  ', depttype,' = ',deptid,' ) ) t0 GROUP BY stat_date )t3 ON t1.d=t3.stat_date ) tt GROUP BY TYPE
    ');
    
    
   
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
SELECT CONCAT('[',GROUP_CONCAT(DATA ORDER BY TYPE),']') INTO p_result FROM tmp01;
    
    
  end if;  
END IF;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_getbasedata
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_getbasedata`;
delimiter ;;
CREATE PROCEDURE `p_api_getbasedata`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
 -- p_startDate：开始日期
   -- p_endDate：结束日期 实际应用时 = p_startDate+interval 1 day
DECLARE v_logid INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime)
VALUES('p_api_getbasedata',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_getbasedata';

DROP TABLE IF EXISTS t_vehicleinfo_tmp;
CREATE TEMPORARY TABLE t_vehicleinfo_tmp LIKE t_vehicleinfo;
  -- 获取每日最高soc
INSERT INTO api_soc (deptid,vehicleNo,stat_date,soc)
    SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
 MAX(soc) AS soc
FROM t_electricvehicleana a
INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND soc IS NOT NULL
GROUP BY b.deptid,b.vehicleNo,stat_date ;
  -- 获取每月最高soc
INSERT INTO api_soc_month(deptid,vehicleNo,stat_date,soc)
    SELECT deptid,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY AS stat_date,
 MAX(soc) AS soc
FROM api_soc
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
AND soc IS NOT NULL
GROUP BY deptid,vehicleNo,stat_date ;
DROP TABLE t_vehicleinfo_tmp;

UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_getbasedata_bak_2019-10-19
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_getbasedata_bak_2019-10-19`;
delimiter ;;
CREATE PROCEDURE `p_api_getbasedata_bak_2019-10-19`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
 -- p_startDate：开始日期
   -- p_endDate：结束日期 实际应用时 = p_startDate+interval 1 day
DECLARE v_logid INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime)
VALUES('p_api_getbasedata',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_getbasedata';
-- 报警小时统计
DELETE FROM api_breakdowns_hour WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns_hour(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT lineDeptId,vehicleNo,DATE_FORMAT(alarmstarttime,'%Y-%m-%d %H:00:00') AS stat_date,alarmType,COUNT(1) AS total,alarmLevel FROM(
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
  UNION
  SELECT lineDeptId,vehicleNo,alarmstarttime,alarmType,alarmLevel FROM t_alarmsummary_unfinished  
     WHERE alarmstarttime>=p_startdate  AND alarmstarttime<p_enddate
)a GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel;
-- 报警日统计
DELETE FROM api_breakdowns WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,CAST(stat_date AS DATE) AS stat_time,
alarmtypename,SUM(total),alarmLevel
 FROM api_breakdowns_hour
WHERE stat_date>=p_startDate AND stat_date<p_endDate
GROUP BY deptId,vehicleNo,stat_time,alarmtypename,alarmLevel ;
-- 报警月统计
DELETE FROM api_breakdowns_month WHERE stat_date=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY;
INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ;
#能耗
DELETE FROM api_energe WHERE stat_date>=p_startDate AND stat_date<p_endDate;
DROP TABLE IF EXISTS t_vehicleinfo_tmp;
CREATE TEMPORARY TABLE t_vehicleinfo_tmp LIKE t_vehicleinfo;
INSERT INTO t_vehicleinfo_tmp SELECT * FROM t_vehicleinfo;
-- 所有类型车的里程    /* 算法调整：今天最大里程-昨天最大里程。heli 2017/05/08    改回 今天最大里程-昨天最大里程 2018年11月2日 by hanyazhang */
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  0 AS oil,
  0 AS gas,
  0 AS ele,
  IFNULL(MAX(a.mileage+0)-MIN(a.mileage+0),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage+0)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND mileage>0    -- 里程异常过滤
GROUP BY b.deptid,b.vehicleNo,stat_date,motorType ;
-- 油耗信息  燃油车 和 油电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='01' OR vehicletypeid='03')
AND  totalfuelcost+0<100000 AND  totalfuelcost>0 AND totalfuelcost IS NOT NULL
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.oil:=d.oil ;
-- 气耗信息  燃气车 和 气电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),100) AS gas FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='04' OR vehicletypeid='05')
AND  totalgasuse+0<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.gas=d.gas ;
-- 电耗信息  电车 油电车 和气电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,IFNULL(MAX(consumeperday)-MIN(consumeperday),0) AS ele FROM t_electricvehicleana a INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='05' OR vehicletypeid='03' OR vehicletypeid='02')
AND consumeperday+0<100000  AND consumeperday IS NOT NULL   AND  consumeperday>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.ele=d.ele ;
-- 过滤数据 备份
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (oil+gas+ele)*100/IF(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
-- DELETE FROM api_energe WHERE oil+gas+ele>0 AND miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE (oil+gas+ele)*100/IF(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
   DELETE FROM api_energe WHERE (miles> 2000 OR (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
  -- 2017.03.27 增加 车辆违规线路统计，给api_get_data调用
  DELETE FROM stat_api_data_violation_by_line WHERE stat_date=p_startDate ;
  INSERT INTO stat_api_data_violation_by_line
    (stat_date,line_deptid,total_times,total_vehicles)
  SELECT CAST(begin_time AS DATE) AS stat_date,t1.linedeptid,COUNT(1) AS total_times ,
     COUNT(DISTINCT t1.vehicledeviceid) AS total_vehicles
  FROM stat_driving_violation_detail t1
  WHERE 1=1
    AND stat_date>=p_startDate AND stat_date < p_endDate
    AND t1.linedeptid IS NOT NULL
  GROUP BY t1.linedeptid;
  -- 获取每日最高soc
INSERT INTO api_soc (deptid,vehicleNo,stat_date,soc)
    SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
 MAX(soc) AS soc
FROM t_electricvehicleana a
INNER JOIN t_vehicleinfo_tmp b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND soc IS NOT NULL
GROUP BY b.deptid,b.vehicleNo,stat_date ;
  -- 获取每月最高soc
INSERT INTO api_soc_month(deptid,vehicleNo,stat_date,soc)
    SELECT deptid,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY AS stat_date,
 MAX(soc) AS soc
FROM api_soc
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
AND soc IS NOT NULL
GROUP BY deptid,vehicleNo,stat_date ;
DROP TABLE t_vehicleinfo_tmp;
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_getbasedata_bak_2019_8_15
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_getbasedata_bak_2019_8_15`;
delimiter ;;
CREATE PROCEDURE `p_api_getbasedata_bak_2019_8_15`(IN p_startDate date, IN p_endDate date)
BEGIN
   # p_startDate：开始日期
   # p_endDate：结束日期 实际应用时 = p_startDate+interval 1 day

declare v_logid int;

set sql_safe_updates = 0;
insert into maintain_events_log(eventName,startTime,finishTime)
values('p_api_getbasedata',now(),null);
select max(id) into v_logid from maintain_events_log where eventName='p_api_getbasedata';


   -- 报警统计 修改前  2018年11月8日
    /* delete from api_breakdowns where stat_date>=p_startDate and stat_date<p_endDate;
insert into api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total)
select lineDeptId,vehicleNo,cast(alarmstarttime as date) as stat_date,
alarmType,count(1) as total
 from t_alarmsummary
where alarmstarttime>=p_startdate and alarmstarttime<p_enddate
group by lineDeptId,vehicleNo,stat_date,alarmType ; */
-- 报警小时统计
DELETE FROM api_breakdowns_hour WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns_hour(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT lineDeptId,vehicleNo,date_format(alarmstarttime,'%Y-%m-%d %H:00:00') AS stat_date,
alarmType,COUNT(1) AS total,alarmLevel
 FROM t_alarmsummary
WHERE alarmstarttime>=p_startdate AND alarmstarttime<p_enddate
GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel ;


-- 报警日统计
delete from api_breakdowns where stat_date>=p_startDate and stat_date<p_endDate;
insert into api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,CAST(stat_date AS DATE) AS stat_time,
alarmtypename,SUM(total),alarmLevel
 FROM api_breakdowns_hour
WHERE stat_date>=p_startDate AND stat_date<p_endDate
GROUP BY deptId,vehicleNo,stat_time,alarmtypename,alarmLevel ;

-- 报警月统计
DELETE FROM api_breakdowns_month WHERE stat_date=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY;
INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ;


-- delete from api_violation where stat_date>=p_startDate and stat_date<p_endDate;
-- insert into api_violation(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score)
-- select t1.linedeptId,t2.vehicleNo,t1.stat_date,t1.actiontypeDesc,
 -- t1.driverName,t1.total ,t1.score
-- from (
-- select a.linedeptId,a.vehicledeviceid,a.stat_date,a.actiontypeDesc,
 -- a.driverName,count(1) as total ,sum(score) as score
-- from stat_driving_violation_detail a
-- where a.stat_date >=p_startDate and a.stat_date<p_endDate
-- and driverName is not null
-- group by a.stat_date,a.linedeptId,a.vehicledeviceid,a.actiontypeDesc,driverName) t1
-- inner join t_vehicleinfo t2
-- on t1.vehicledeviceid=t2.deviceid  ;


#能耗
delete from api_energe where stat_date>=p_startDate and stat_date<p_endDate;
/*
insert into api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
select b.deptid,b.vehicleNo,cast(time as date) as stat_date,
  ifnull(max(totalfuelcost)-min(totalfuelcost),0) as oil,
  ifnull(max(totalgasuse)-min(totalgasuse),0) as gas,
  0 as ele,
  #ifnull(max(a.mileage)-min(a.mileage),0) as miles,
  -- 算法调整：今天最大里程-昨天最大里程。heli 2017/05/08
  0 as miles,
  max(b.motorType),
  max(a.mileage)
from t_vehicleanaloginfo a
inner join t_vehicleinfo b
on a.vehicledeviceId=b.deviceId
where a.time >=p_startDate and a.time<p_endDate
and mileage<400000
and IFNULL(totalfuelcost,0)<100000 #过滤异常数据
and IFNULL(totalgasuse,0)<100000
group by b.deptid,b.vehicleNo,stat_date ;
*/
# 算法调整 先算里程 再算 能耗 ，原因，一些车的能耗数据无法获取
/*
-- 燃油车
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil,
  0 AS gas,
  0 AS ele,
  ifnull(max(a.mileage)-min(a.mileage),0) as miles,
  -- 算法调整：今天最大里程-昨天最大里程。heli 2017/05/08    改回 今天最大里程-昨天最大里程 2018年11月2日 by hanyazhang

  MAX(b.motorType),
  MAX(a.mileage)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND  totalfuelcost<100000 AND  totalfuelcost>0 AND totalfuelcost IS NOT NULL
AND motorType=1
and mileage>0    -- 里程异常过滤
GROUP BY b.deptid,b.vehicleNo,stat_date ;
-- 电车
insert into api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType)
select b.deptid,b.vehicleNo,cast(time as date) as stat_date,
  0 as oil,
  0 as gas,
  ifnull(max(consumeperday+0)-min(consumeperday+0),0) as ele,
  0 as miles,max(motortype)
from t_electricvehicleana a
inner join t_vehicleinfo b
on a.vehicledeviceId=b.deviceId
where a.time >=p_startDate and a.time<p_endDate
and consumeperday<100000  and consumeperday is not null AND  consumeperday>0
and motorType=2
group by b.deptid,b.vehicleNo,stat_date ;
update api_energe c inner join (select vehicleNo,CAST(TIME AS DATE) AS stat_date,max(a.mileage) as mileage,min(a.mileage) as mileage_min  from t_vehicleanaloginfo a INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId where a.time >=p_startDate AND a.time<p_endDate and vehicletypeid='02' and mileage>0 group by vehicleNo,stat_date)d on c.vehicleNo=d.vehicleNo and c.stat_date=d.stat_date
set c.mileage=d.mileage, c.miles=d.mileage-d.mileage_min ;
-- 油电车
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil,
  0 AS gas,
  0 AS ele,
   IFNULL(MAX(a.mileage)-MIN(a.mileage),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND  totalfuelcost<100000  AND totalfuelcost IS NOT NULL  AND  totalfuelcost>0
AND motorType=3
GROUP BY b.deptid,b.vehicleNo,stat_date ;
-- 燃气车
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  0 AS oil,
  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),100) AS gas,
  0 AS ele,
   IFNULL(MAX(a.mileage)-MIN(a.mileage),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND  totalgasuse<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
AND motorType=4
GROUP BY b.deptid,b.vehicleNo,stat_date ;
-- 气电车
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  0 AS oil,
  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),0) AS gas,
  0 AS ele,
   IFNULL(MAX(a.mileage)-MIN(a.mileage),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND  totalgasuse<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
AND motorType=5
GROUP BY b.deptid,b.vehicleNo,stat_date ;
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,IFNULL(MAX(consumeperday)-MIN(consumeperday),0) AS ele FROM t_electricvehicleana a INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='05' or vehicletypeid='03')
AND consumeperday<100000  AND consumeperday IS NOT NULL   AND  consumeperday>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.ele=d.ele ;
/*
-- 日里程
/*
UPDATE api_energe t1
INNER JOIN api_energe t2
ON t1.deptid=t2.deptid AND t1.vehicleNo=t2.vehicleNo AND t1.stat_date=t2.stat_date+INTERVAL 1 DAY
SET t1.miles=CASE WHEN IFNULL(t1.mileage,0)=0 OR IFNULL(t2.mileage,0)=0 THEN 0 ELSE t1.mileage-t2.mileage END
WHERE t1.stat_date>=p_startDate AND t1.stat_date<p_endDate ; */
-- 所有类型车的里程    /* 算法调整：今天最大里程-昨天最大里程。heli 2017/05/08    改回 今天最大里程-昨天最大里程 2018年11月2日 by hanyazhang */
INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
  0 AS oil,
  0 AS gas,
  0 AS ele,
  IFNULL(MAX(a.mileage+0)-MIN(a.mileage+0),0) AS miles,
  MAX(b.motorType),
  MAX(a.mileage+0)
FROM t_vehicleanaloginfo a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND mileage>0    -- 里程异常过滤
GROUP BY b.deptid,b.vehicleNo,stat_date,motorType ;


-- 油耗信息  燃油车 和 油电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='01' OR vehicletypeid='03')
AND  totalfuelcost+0<100000 AND  totalfuelcost>0 AND totalfuelcost IS NOT NULL
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.oil:=d.oil ;



-- 气耗信息  燃气车 和 气电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),100) AS gas FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='04' OR vehicletypeid='05')
AND  totalgasuse+0<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.gas=d.gas ;



-- 电耗信息  电车 油电车 和气电车
UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,IFNULL(MAX(consumeperday)-MIN(consumeperday),0) AS ele FROM t_electricvehicleana a INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='05' OR vehicletypeid='03' OR vehicletypeid='02')
AND consumeperday+0<100000  AND consumeperday IS NOT NULL   AND  consumeperday>0
GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
SET c.ele=d.ele ;


-- 过滤数据 备份
INSERT INTO api_energe_fault_data SELECT * FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
insert into api_energe_fault_data select * from api_energe WHERE (oil+gas+ele)*100/if(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
insert into api_energe_fault_data select * from api_energe WHERE (miles> 2000 or (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;


-- DELETE FROM api_energe WHERE oil+gas+ele>0 AND miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE miles=0 AND stat_date>=p_startDate AND stat_date<p_endDate;
  DELETE FROM api_energe WHERE (oil+gas+ele)*100/if(miles=0,1,miles)>100 AND stat_date>=p_startDate AND stat_date<p_endDate;
   DELETE FROM api_energe WHERE (miles> 2000 or (oil+gas+ele)> 2000 ) AND stat_date>=p_startDate AND stat_date<p_endDate;
  -- 2017.03.27 增加 车辆违规线路统计，给api_get_data调用
  delete from stat_api_data_violation_by_line where stat_date=p_startDate ;
  insert into stat_api_data_violation_by_line
    (stat_date,line_deptid,total_times,total_vehicles)
  select CAST(begin_time AS DATE) as stat_date,t1.linedeptid,count(1) as total_times ,
     count(distinct t1.vehicledeviceid) as total_vehicles
  from stat_driving_violation_detail t1
  where 1=1
  -- and actiontype in ('openDoorNotStopYet','startWithDoorOpen','startAccelerationRapidly','coastingWithEngineOff','suddenlySpeedUp','suddenlyBraking')
    and stat_date>=p_startDate and stat_date < p_endDate
    and t1.linedeptid is not null
  group by t1.linedeptid;



  -- 获取每日最高soc
INSERT INTO api_soc (deptid,vehicleNo,stat_date,soc)
    SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
 MAX(soc) AS soc
FROM t_electricvehicleana a
INNER JOIN t_vehicleinfo b
ON a.vehicledeviceId=b.deviceId
WHERE a.time >=p_startDate AND a.time<p_endDate
AND soc IS NOT NULL
GROUP BY b.deptid,b.vehicleNo,stat_date ;



  -- 获取每月最高soc
INSERT INTO api_soc_month(deptid,vehicleNo,stat_date,soc)
    SELECT deptid,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY AS stat_date,
 MAX(soc) AS soc
FROM api_soc
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH
AND soc IS NOT NULL
GROUP BY deptid,vehicleNo,stat_date ;

update maintain_events_log set finishTime=now() where id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for P_api_getbasedata_new
-- ----------------------------
DROP PROCEDURE IF EXISTS `P_api_getbasedata_new`;
delimiter ;;
CREATE PROCEDURE `P_api_getbasedata_new`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
 # p_startDate：开始日期
   # p_endDate：结束日期 实际应用时 = p_startDate+interval 1 day
   
DECLARE v_logid INT;
DECLARE v_1 INT;
DECLARE v_2 INT;
SET sql_safe_updates = 0;
INSERT INTO maintain_events_log(eventName,startTime,finishTime)
VALUES('P_api_getbasedata_new',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='P_api_getbasedata_new';
   
-- 报警小时统计 
DELETE FROM api_breakdowns_hour WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns_hour(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT lineDeptId,vehicleNo,DATE_FORMAT(alarmstarttime,'%Y-%m-%d %H:00:00') AS stat_date,
alarmType,COUNT(1) AS total,alarmLevel
 FROM t_alarmsummary
WHERE dismissTime>=p_startdate AND dismissTime<p_enddate
GROUP BY lineDeptId,vehicleNo,stat_date,alarmType,alarmLevel ; 
-- 报警日统计    
DELETE FROM api_breakdowns WHERE stat_date>=p_startDate AND stat_date<p_endDate;
INSERT INTO api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,CAST(stat_date AS DATE) AS stat_time,
alarmtypename,SUM(total),alarmLevel
 FROM api_breakdowns_hour
WHERE stat_date>=p_startDate AND stat_date<p_endDate
GROUP BY deptId,vehicleNo,stat_time,alarmtypename,alarmLevel ; 
-- 报警月统计
DELETE FROM api_breakdowns_month WHERE stat_date=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY;
INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH 
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ;
-- 重新统计前天的报警日数据   
DELETE FROM api_breakdowns WHERE stat_date>=(p_startDate-INTERVAL 1 DAY) AND stat_date<p_startDate;
INSERT INTO api_breakdowns(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,CAST(stat_date AS DATE) AS stat_time,
alarmtypename,SUM(total),alarmLevel
 FROM api_breakdowns_hour
WHERE stat_date>=(p_startDate-INTERVAL 1 DAY)  AND stat_date<p_startDate
GROUP BY deptId,vehicleNo,stat_time,alarmtypename,alarmLevel ; 
-- 重新统计前天的报警月数据 
DELETE FROM api_breakdowns_month WHERE stat_date=(p_startDate-INTERVAL 1 DAY) - INTERVAL (DAY(p_startDate-INTERVAL 1 DAY)-1) DAY;
INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,(p_startDate-INTERVAL 1 DAY) - INTERVAL (DAY(p_startDate-INTERVAL 1 DAY)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=(p_startDate-INTERVAL 1 DAY) - INTERVAL (DAY(p_startDate-INTERVAL 1 DAY)-1) DAY
AND stat_date<(p_startDate-INTERVAL 1 DAY) - INTERVAL (DAY(p_startDate-INTERVAL 1 DAY)-1) DAY + INTERVAL 1 MONTH 
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_get_all_up_dept
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_get_all_up_dept`;
delimiter ;;
CREATE PROCEDURE `p_api_get_all_up_dept`(p_dept_id int)
BEGIN
    DECLARE v_dept_id INT;
    DECLARE v_lft INT;
    DECLARE v_rgt INT;
    DECLARE v_level INT;
    DECLARE v_name VARCHAR(255);
    DROP TEMPORARY TABLE IF EXISTS tmp;
    CREATE TEMPORARY TABLE tmp AS
      SELECT
        dept_id,
        name,
        level,
        lft,
        rgt
      FROM mauth_dept
      WHERE 1 = 2;
    SELECT
      name,
      level,
      lft,
      rgt
    INTO v_name, v_level, v_lft, v_rgt
    FROM mauth_dept
    WHERE dept_id = p_dept_id;
    INSERT INTO tmp VALUE (p_dept_id, v_name, v_level, v_lft, v_rgt);
     WHILE v_level > 0 DO
      SELECT
        dept_id,
        name,
        level,
        lft,
        rgt
      INTO v_dept_id, v_name, v_level, v_lft, v_rgt
      FROM mauth_dept
      WHERE level = v_level - 1 AND lft < v_lft and rgt > v_rgt LIMIT 1;
      INSERT INTO tmp VALUE (v_dept_id, v_name, v_level, v_lft, v_rgt);
    END WHILE;
    SELECT *
    FROM tmp;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_linebreakdownsrank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_linebreakdownsrank`;
delimiter ;;
CREATE PROCEDURE `p_api_linebreakdownsrank`(p_timetype int,p_lineDeptid int,out p_result varchar(1024))
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 [
 {"rank":1,"vno":"车牌A","total":10},
 {"rank":2,"vno":"车牌B","total":8},
 {"rank":3,"vno":"车牌C","total":6},
 {"rank":4,"vno":"车牌D","total":2},
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身）

set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
select concat('[',
          group_concat(concat('{"rank":',@r:=@r+1,',"vno":"',t1.vehicleNo,'","total":',t1.total,'}')),
          ']')
     into p_result
from (
select a.vehicleNo,sum(total) as total 
from api_breakdowns a 
where a.stat_date >=stime and a.stat_date<etime
and a.deptid=p_lineDeptid
group by a.vehicleNo order by total desc )t1
inner join (select @r:=0) t2 on 1=1;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_linebreakdownstrend
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_linebreakdownstrend`;
delimiter ;;
CREATE PROCEDURE `p_api_linebreakdownstrend`(p_timetype int,p_lineDeptid int,out p_result varchar(1024))
BEGIN
  # p_lineDeptid：线路deptid
  # p_timetype：1-近7天（不含今天） 2-上月
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身）
declare v_topN int default 4;-- topN 的故障数 
set p_result:='{}';
if p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
drop table if exists tmp_datesheet;
create temporary table tmp_datesheet(d date);
set @start_date:=stime;
while @start_date<etime do
  insert into tmp_datesheet values(@start_date);
  set @start_date:=@start_date+interval 1 day;
end while;
drop table if exists tmp_alarmname;
create temporary table tmp_alarmname as
select tname from (
select alarmtypename as tname,sum(total) as cnt from api_breakdowns 
where stat_date >=stime and stat_date<etime
and deptid=p_lineDeptid
group by alarmtypename
order by cnt desc
limit v_topN )tt;
select concat('[',group_concat(concat('{"name":"',tname,'","data":[',data,']}')),']') as result
  into p_result
from (
select t3.tname,
group_concat(ifnull(t1.cnt,0) order by t2.d asc) as data
from tmp_datesheet t2  
inner join tmp_alarmname t3
on 1=1
left join (
select alarmtypename as tname,stat_date,sum(total) as cnt 
from api_breakdowns 
where stat_date >=stime and stat_date<etime
and deptid=p_lineDeptid
group by alarmtypename,stat_date) t1 
on t1.tname=t3.tname and t2.d=t1.stat_date 
group by t3.tname ) tt;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_linedriverrank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_linedriverrank`;
delimiter ;;
CREATE PROCEDURE `p_api_linedriverrank`(p_timetype int,p_lineDeptid int,out p_result text)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 [
 {"rank":1,"vno":"车牌1","driver":"张三","total":50,"score":100},
 {"rank":2,"vno":"车牌2","driver":"张三2","total":40,"score":80},
 {"rank":3,"vno":"车牌3","driver":"张三3","total":30,"score":60},
 {"rank":4,"vno":"车牌4","driver":"张三4","total":10,"score":40},
 .......
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
set group_concat_max_len = 65536 ;
set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
select concat('[',
          group_concat(concat('{"rank":',@r:=@r+1,',"vno":"',t1.vehicleNo,'","driver":"',t1.driverName,
          '","total":',t1.total,',"score":',t1.score,'}')),
          ']')
     into p_result
from (
select a.vehicleNo,a.driverName,sum(total) as total ,sum(score) as score
from api_violation a 
where a.deptid=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime
and a.vehicleNo is not null 
and a.driverName is not null
group by a.vehicleNo order by total desc )t1
inner join (select @r:=0) t2 on 1=1;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_linedrivingviolation
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_linedrivingviolation`;
delimiter ;;
CREATE PROCEDURE `p_api_linedrivingviolation`(p_timetype int,p_lineDeptid int,out p_result text)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 [
 {"rank":1,"type":"超速","total":10,"percent":"33.5%"},
 {"rank":2,"type":"急刹车","total":8,"percent":"30.0%"},
 {"rank":3,"type":"急加速","total":6,"percent":"20.5%"},
 {"rank":4,"type":"起步不关车门","total":2,"percent":"10.8%"},
 .......
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
declare v_total int;
set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
 
select sum(totalNum) into v_total
from stat_driving_violation_day a 
where a.lineId=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime
AND a.driverid  IN (SELECT driverid FROM v_driverinfo WHERE lineDeptId=p_lineDeptid)
and a.driverName is not null;
select concat('[',
          group_concat(concat('{"rank":',@r:=@r+1,',"type":"',t1.actiontypeDesc,'","total":',
                      t1.total,',"percent":"',t1.percent,'"}')),
          ']') into p_result
    
from (
select a.actiontypeDesc,sum(totalNum) as total ,concat(round(sum(totalNum)*1.000/v_total*100,1),'%') as percent
from stat_driving_violation_day a 
where a.lineId=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime
AND a.driverid  IN (SELECT driverid FROM v_driverinfo WHERE lineDeptId=p_lineDeptid)
and a.driverName is not null
group by a.actiontypeDesc order by totalNum desc )t1
inner join (select @r:=0) t2 on 1=1;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_linedrivingviolation_191014
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_linedrivingviolation_191014`;
delimiter ;;
CREATE PROCEDURE `p_api_linedrivingviolation_191014`(p_timetype int,p_lineDeptid int,out p_result text)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 [
 {"rank":1,"type":"超速","total":10,"percent":"33.5%"},
 {"rank":2,"type":"急刹车","total":8,"percent":"30.0%"},
 {"rank":3,"type":"急加速","total":6,"percent":"20.5%"},
 {"rank":4,"type":"起步不关车门","total":2,"percent":"10.8%"},
 .......
 ]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
declare v_total int;
set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
select sum(total) into v_total
from api_violation a 
where a.deptid=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime 
and a.vehicleNo is not null 
and a.driverName is not null;
select concat('[',
          group_concat(concat('{"rank":',@r:=@r+1,',"type":"',t1.actiontypeDesc,'","total":',
                      t1.total,',"percent":"',t1.percent,'"}')),
          ']')
     into p_result
from (
select a.actiontypeDesc,sum(total) as total ,concat(round(sum(total)*1.000/v_total*100,1),'%') as percent
from api_violation a 
where a.deptid=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime
and a.vehicleNo is not null 
and a.driverName is not null
group by a.actiontypeDesc order by total desc )t1
inner join (select @r:=0) t2 on 1=1;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_lineenergyrank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_lineenergyrank`;
delimiter ;;
CREATE PROCEDURE `p_api_lineenergyrank`(p_timetype int,p_lineDeptid int,out p_result text)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：1-近7天（不含今天） 2-上月
/*
[
 {"type":"oil","data":[20,30,45,44,56,78,80]},
 {"type":"gas","data":[20,30,45,44,56,78,80]},
 {"type":"elec","data":[20,30,45,44,56,78,80]}
]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
set p_result:='{}';
if p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
  
drop table if exists tmp_datesheet2;
create temporary table tmp_datesheet2(d date);
set @start_date:=stime;
while @start_date<etime do
  insert into tmp_datesheet2 values(@start_date);
  set @start_date:=@start_date+interval 1 day;
end while;
drop table if exists tmp01;
create temporary table tmp01 as
select type,concat('{"type":"',type,'","data":[',group_concat(data order by d asc),']}') as data
from (
select case t2.r when 1 then 'oil' when 2 then 'gas' else 'ele' end as type,t1.d,
  case t2.r when 1 then t3.oil when 2 then t3.gas else t3.ele end as data
from tmp_datesheet2 t1 
inner join (select 1 r union all select 2 union all select 3) t2 on 1=1
left join
(select stat_date,sum(oil) as oil,sum(gas) as gas,sum(ele) as ele
from (
select a.stat_date,a.oil,a.gas,a.ele,a.miles
from api_energe a 
where a.deptid=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime) t0 group by stat_date
)t3 on t1.d=t3.stat_date ) tt
group by type;
select concat('[',group_concat(data order by type),']') into p_result from tmp01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_lineenergyrank_bak
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_lineenergyrank_bak`;
delimiter ;;
CREATE PROCEDURE `p_api_lineenergyrank_bak`(p_timetype int,p_lineDeptid int,out p_result text)
BEGIN
   # p_lineDeptid：线路deptid
   # p_timetype：1-近7天（不含今天） 2-上月
/*
[
 {"type":"oil","data":[20,30,45,44,56,78,80]},
 {"type":"gas","data":[20,30,45,44,56,78,80]},
 {"type":"elec","data":[20,30,45,44,56,78,80]}
]
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
set p_result:='{}';
if p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be 1 or 2";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
  
drop table if exists tmp_datesheet2;
create temporary table tmp_datesheet2(d date);
set @start_date:=stime;
while @start_date<etime do
  insert into tmp_datesheet2 values(@start_date);
  set @start_date:=@start_date+interval 1 day;
end while;
drop table if exists tmp01;
create temporary table tmp01 as
select type,concat('{"type":"',type,'","data":[',group_concat(data order by d asc),']}') as data
from (
select case t2.r when 1 then 'oil' when 2 then 'gas' else 'ele' end as type,t1.d,
  case t2.r when 1 then t3.oil when 2 then t3.gas else t3.ele end as data
from tmp_datesheet2 t1 
inner join (select 1 r union all select 2 union all select 3) t2 on 1=1
left join
(select stat_date,sum(oil) as oil,sum(gas) as gas,sum(ele) as ele
from (
select a.stat_date,a.oil,a.gas,a.ele,a.miles
from api_energe a 
where a.deptid=p_lineDeptid
and a.stat_date >=stime and a.stat_date<etime) t0 group by stat_date
)t3 on t1.d=t3.stat_date ) tt
group by type;
select concat('[',group_concat(data order by type),']') into p_result from tmp01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_mileage
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_mileage`;
delimiter ;;
CREATE PROCEDURE `p_api_mileage`(IN p_startDate DATE, IN p_endDate DATE)
BEGIN
    
-- INSERT INTO api_energe(deptId,vehicleNo,stat_date,oil,gas,ele,miles,motorType,mileage)
-- SELECT b.deptid,b.vehicleNo,CAST(TIME AS DATE) AS stat_date,
--  0 AS oil,
 -- 0 AS gas,
 -- 0 AS ele,
 -- IFNULL(MAX(a.mileage+0)-MIN(a.mileage+0),0) AS miles,
 -- MAX(b.motorType),
--  MAX(a.mileage+0)
-- FROM t_vehicleanaloginfo a
-- INNER JOIN t_vehicleinfo b
-- ON a.vehicledeviceId=b.deviceId
-- WHERE a.time >=p_startDate AND a.time<p_endDate
-- AND mileage>0   
-- GROUP BY b.deptid,b.vehicleNo,stat_date,motorType ;  
    
    
DECLARE v_logid INT;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments) VALUES('p_api_mileage',NOW(),NULL,'里程日统计');
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_api_mileage';
-- 1. 获取每车最大最小时间
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_mileage',NOW(),NULL,'开始结束时间');
DROP TABLE IF EXISTS a;
create TEMPORARY table a  select vehicledeviceid,max(time) as end_time, min(time) as begin_time from t_vehicleanaloginfo where  TIME >= p_startDate AND TIME < p_endDate group by vehicledeviceid;
-- 2. 获取结束时里程
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_mileage',NOW(),NULL,'开始里程');
DROP TABLE IF EXISTS b;
create TEMPORARY table b  select a.vehicledeviceid, mileage from a inner join t_vehicleanaloginfo on a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid and a.end_time = time;
 
 -- 3. 获取开始时里程
 -- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_mileage',NOW(),NULL,'结束里程');
 DROP TABLE IF EXISTS c;
create TEMPORARY table c  select a.vehicledeviceid,t_vehicleanaloginfo.time, mileage from a inner join t_vehicleanaloginfo on a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid and a.begin_time = time;
-- 4. 两表相减并过滤
 insert into api_energe 
 select  d.deptid,d.vehicleNo,CAST(TIME AS DATE) AS stat_date, 0 AS oil,0 AS gas,0 AS ele, IFNULL((b.mileage - c.mileage),0) AS miles,d.motorType,b.mileage from b inner join c using (vehicledeviceid) inner join t_vehicleinfo as d on d.deviceid= vehicledeviceid ;
-- 更新日志
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_milestrend
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_milestrend`;
delimiter ;;
CREATE PROCEDURE `p_api_milestrend`(p_timetype INT,deptid INT,depttype VARCHAR(45), OUT p_result VARCHAR(1024))
BEGIN
  # p_lineDeptid：线路deptid  测试用
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"故障1","data":[12,13,45,56,18,1,2]},
 {"name":"故障2","data":[12,13,45,56,18,1,2]},
 {"name":"故障3","data":[12,13,45,56,18,1,2]},
 {"name":"故障4","data":[12,13,45,56,18,1,2]}
 ]
 */
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 4;-- topN 的故障数 
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
  IF p_timeType<4 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 故障名 项
DROP TABLE IF EXISTS tmp_violationname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_violationname AS 
SELECT tname FROM (SELECT actiontypeDesc AS tname,SUM(total) AS cnt FROM (
SELECT  actiontypeDesc,deptid,sum(total) as total FROM api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' GROUP BY deptid,actiontypeDesc
) a  INNER JOIN
  v_lineinfo b ON a.deptId = b.`lineDeptId`  WHERE ', depttype,' = ',deptid,'
   GROUP BY actiontypeDesc ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   
   
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 故障次数 项
SELECT 1;
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT actiontypeDesc AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  actiontypeDesc,deptid,sum(total) as total,stat_date FROM api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' GROUP BY deptid,actiontypeDesc,stat_date
) a  INNER JOIN
  v_lineinfo b ON a.deptId = b.`lineDeptId`  WHERE ', depttype,'=',deptid,' GROUP BY actiontypeDesc,stat_date') ;
SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 故障名 项
DROP TABLE IF EXISTS tmp_violationname;
SET @sql:=CONCAT('CREATE TEMPORARY TABLE tmp_violationname AS  
SELECT tname FROM 
(SELECT actiontypeDesc AS tname,SUM(totalNum) AS cnt   FROM stat_driving_violation_summary 
WHERE stat_date >=\'',stime,'\' AND stat_date<\'',etime,'\' AND ', depttype,'=',deptid,'   
 GROUP BY actiontypeDesc    
ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 故障次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS  
SELECT actiontypeDesc AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\' AND ', depttype,'=',deptid,'   
 GROUP BY actiontypeDesc,stat_date ')    ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_violationname t3
ON 1=1
LEFT JOIN tmp_violationcnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_site_getbasedata
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_site_getbasedata`;
delimiter ;;
CREATE PROCEDURE `p_api_site_getbasedata`(p_startDate date,p_endDate date)
BEGIN
   # p_startDate：开始日期
   # p_endDate：结束日期
   
set sql_safe_updates = 0;
--  小时统计
DELETE FROM api_site_violation_hour WHERE stat_date>=p_startDate AND stat_date<p_endDate;
-- 路段次数统计  
INSERT INTO api_site_violation_hour(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site,end_site)
SELECT t1.linedeptId,t2.vehicleNo,t1.stat_date,t1.actiontypeDesc,
  t1.driverName,t1.total ,t1.score,begin_site,end_site
FROM (
SELECT a.linedeptId,a.vehicledeviceid,DATE_FORMAT(a.begin_time,'%Y-%m-%d %H:00:00') AS stat_date,a.actiontypeDesc,
  a.driverName,COUNT(1) AS total ,SUM(score) AS score,a.begin_site,a.end_site
FROM stat_driving_violation_detail a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND driverName IS NOT NULL
AND actiontypeDesc IN('超速','到站超时')
AND end_site<>-1
AND begin_site IS NOT NULL 
GROUP BY stat_date,a.linedeptId,a.vehicledeviceid,a.actiontypeDesc,driverName,a.begin_site,a.end_site) t1
INNER JOIN t_vehicleinfo t2 
ON t1.vehicledeviceid=t2.deviceid ;
-- 站点次数统计 
INSERT INTO api_site_violation_hour(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT t1.linedeptId,t2.vehicleNo,t1.stat_date,t1.actiontypeDesc,
  t1.driverName,t1.total ,t1.score,begin_site
FROM (
SELECT a.linedeptId,a.vehicledeviceid,DATE_FORMAT(a.begin_time,'%Y-%m-%d %H:00:00') AS stat_date,a.actiontypeDesc,
  a.driverName,COUNT(1) AS total ,SUM(score) AS score,a.begin_site
FROM stat_driving_violation_detail a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND driverName IS NOT NULL
AND actiontypeDesc IN('越站','滞站','急刹车')
AND begin_site IS NOT NULL 
GROUP BY stat_date,a.linedeptId,a.vehicledeviceid,a.actiontypeDesc,driverName,a.begin_site) t1
INNER JOIN t_vehicleinfo t2 
ON t1.vehicledeviceid=t2.deviceid ;
   
-- 违规次数 统计  
INSERT INTO api_site_violation_hour(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT t1.linedeptId,t2.vehicleNo,t1.stat_date,t1.actiontypeDesc,
  t1.driverName,t1.total ,t1.score,-1 as begin_site
FROM (
SELECT a.linedeptId,a.vehicledeviceid,DATE_FORMAT(a.begin_time,'%Y-%m-%d %H:00:00') AS stat_date,a.actiontypeDesc,
  a.driverName,COUNT(1) AS total ,SUM(score) AS score
FROM stat_driving_violation_detail a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND driverName IS NOT NULL
AND actiontypeDesc IN('越站','滞站','急刹车','超速','到站超时')
AND begin_site in (select siteId from t_siteinfo) 
GROUP BY stat_date,a.linedeptId,a.vehicledeviceid,a.actiontypeDesc,driverName) t1
INNER JOIN t_vehicleinfo t2 
ON t1.vehicledeviceid=t2.deviceid;
--  日统计
DELETE FROM api_site_violation_day WHERE stat_date>=p_startDate AND stat_date<p_endDate;
-- 路段次数统计 
INSERT INTO api_site_violation_day(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site,end_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-%d') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,a.begin_site,a.end_site
FROM api_site_violation_hour a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND actiontypeDesc IN('超速','到站超时')
AND begin_site<>-1
GROUP BY a.vehicleNo,stat_time,a.actiontypeDesc,driverName,a.begin_site,a.end_site;
-- 站点次数统计 
INSERT INTO api_site_violation_day(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-%d') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,a.begin_site
FROM api_site_violation_hour a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND actiontypeDesc IN('越站','滞站','急刹车')
AND begin_site<>-1
GROUP BY a.vehicleNo,stat_time,a.actiontypeDesc,driverName,a.begin_site;
-- 违规次数 统计   起始站点 为 -1  
INSERT INTO api_site_violation_day(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-%d') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,-1
FROM api_site_violation_hour a 
WHERE a.stat_date >=p_startDate AND a.stat_date<p_endDate
AND driverName IS NOT NULL
AND actiontypeDesc IN('越站','滞站','急刹车','超速','到站超时')
AND begin_site=-1
GROUP BY a.vehicleNo,stat_time,a.deptId,a.vehicleNo,a.actiontypeDesc,driverName;
--  月统计
DELETE FROM api_site_violation_month WHERE stat_date=p_startDate - interval  day(p_startDate) -1 day;
-- 路段次数统计 
INSERT INTO api_site_violation_month(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site,end_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-01') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,a.begin_site,a.end_site
FROM api_site_violation_day a 
WHERE a.stat_date >=p_startDate - interval  day(p_startDate) -1 day  AND a.stat_date<p_endDate
AND actiontypeDesc IN('超速','到站超时')
AND begin_site<>-1
GROUP BY a.vehicleNo,stat_time,a.actiontypeDesc,driverName,a.begin_site,a.end_site;
-- 站点次数统计 
INSERT INTO api_site_violation_month(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-01') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,a.begin_site
FROM api_site_violation_day a 
WHERE a.stat_date >=p_startDate - interval  day(p_startDate) -1 day AND a.stat_date<p_endDate
AND actiontypeDesc IN('越站','滞站','急刹车')
AND begin_site<>-1
GROUP BY a.vehicleNo,stat_time,a.actiontypeDesc,driverName,a.begin_site;
-- 违规次数 统计   起始站点 为 -1  
INSERT INTO api_site_violation_month(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score,begin_site)
SELECT a.deptId,a.vehicleNo,DATE_FORMAT(a.stat_date,'%Y-%m-01') AS stat_time,a.actiontypeDesc,
  a.driverName,SUM(total) AS total ,SUM(score) AS score,-1
FROM api_site_violation_day a 
WHERE a.stat_date >=p_startDate - interval  day(p_startDate) -1 day  AND a.stat_date<p_endDate
AND driverName IS NOT NULL
AND actiontypeDesc IN('越站','滞站','急刹车','超速','到站超时')
AND begin_site =-1
GROUP BY stat_time,a.deptId,a.vehicleNo,a.actiontypeDesc,driverName;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_totalfuelcost
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_totalfuelcost`;
delimiter ;;
CREATE PROCEDURE `p_api_totalfuelcost`(IN p_startDate DATE,IN p_endDate DATE)
BEGIN
    
    
-- UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalfuelcost+0)-MIN(totalfuelcost+0),0) AS oil 
--   FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
-- ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='01' OR vehicletypeid='03')
-- AND  totalfuelcost+0<100000 AND  totalfuelcost>0 AND totalfuelcost IS NOT NULL
-- GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
-- SET c.oil:=d.oil ;    
   
DECLARE v_logid INT;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments) VALUES('p_api_totalfuelcost',NOW(),NULL,'油耗日统计');
SELECT MAX(id) INTO v_logid FROM maintain_events_log_detail WHERE eventName='p_api_totalfuelcost';
-- 1. 获取每车最大最小时间
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalfuelcost',NOW(),NULL,'开始结束时间');
DROP TABLE IF EXISTS a;
create TEMPORARY table a  select vehicledeviceid,max(time) as end_time, min(time) as begin_time from t_vehicleanaloginfo where  TIME >= p_startDate AND TIME < p_endDate group by vehicledeviceid;
-- 2. 获取结束时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalfuelcost',NOW(),NULL,'开始油耗');
DROP TABLE IF EXISTS b;
create TEMPORARY table b  select a.vehicledeviceid, totalfuelcost from a inner join t_vehicleanaloginfo on a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid and a.end_time = time;
 
 -- 3. 获取开始时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalfuelcost',NOW(),NULL,'结束油耗');
 DROP TABLE IF EXISTS c;
create TEMPORARY table c  select a.vehicledeviceid, totalfuelcost from a inner join t_vehicleanaloginfo on a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid and a.begin_time = time;
-- 4. 两表相减并过滤
update api_energe e inner join (
select vehicleNo, (b.totalfuelcost - c.totalfuelcost) as totalfuelcost from b inner join c using (vehicledeviceid) inner join t_vehicleinfo as d on d.deviceid= vehicledeviceid where motorType='1' OR motorType='3' )f on e.vehicleno=f.vehicleno
SET e.oil=f.totalfuelcost;
-- 更新日志
UPDATE maintain_events_log_detail SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_totalgasuse
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_totalgasuse`;
delimiter ;;
CREATE PROCEDURE `p_api_totalgasuse`(in p_startDate date,in p_endDate date)
BEGIN
    
-- UPDATE api_energe c INNER JOIN (SELECT vehicleNo,CAST(TIME AS DATE) AS stat_date,  IFNULL(MAX(totalgasuse+0)-MIN(totalgasuse+0),100) AS gas FROM t_vehicleanaloginfo a INNER JOIN t_vehicleinfo_tmp b
-- ON a.vehicledeviceId=b.deviceId WHERE a.time >=p_startDate AND a.time<p_endDate AND (vehicletypeid='04' OR vehicletypeid='05')
-- AND  totalgasuse+0<100000  AND totalgasuse IS NOT NULL  AND  totalgasuse>0
-- GROUP BY vehicleNo,stat_date)d ON c.vehicleNo=d.vehicleNo AND c.stat_date=d.stat_date
-- SET c.gas=d.gas ;
  
DECLARE v_logid INT;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments) VALUES('p_api_totalgasuse',NOW(),NULL,'气耗日统计');
SELECT MAX(id) INTO v_logid FROM maintain_events_log_detail WHERE eventName='p_api_totalgasuse';
-- 1. 获取每车最大最小时间
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalgasuse',NOW(),NULL,'开始结束时间');
DROP TABLE IF EXISTS a;
CREATE TEMPORARY TABLE a  SELECT vehicledeviceid,MAX(TIME) AS end_time, MIN(TIME) AS begin_time FROM t_vehicleanaloginfo WHERE  TIME >= p_startDate AND TIME < p_endDate GROUP BY vehicledeviceid;
-- 2. 获取结束时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalgasuse',NOW(),NULL,'开始气耗');
DROP TABLE IF EXISTS b;
CREATE TEMPORARY TABLE b  SELECT a.vehicledeviceid, totalgasuse FROM a INNER JOIN t_vehicleanaloginfo ON a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid AND a.end_time = TIME;
 
 -- 3. 获取开始时能耗
-- INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_api_totalgasuse',NOW(),NULL,'结束气耗');
 DROP TABLE IF EXISTS c;
CREATE TEMPORARY TABLE c  SELECT a.vehicledeviceid, totalgasuse FROM a INNER JOIN t_vehicleanaloginfo ON a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid AND a.begin_time = TIME;
-- 4. 两表相减并过滤
UPDATE api_energe e INNER JOIN (
SELECT vehicleNo, (b.totalgasuse - c.totalgasuse) AS totalgasuse FROM b INNER JOIN c USING (vehicledeviceid) INNER JOIN t_vehicleinfo AS d ON d.deviceid= vehicledeviceid WHERE motorType='4' OR motorType='5' )f ON e.vehicleno=f.vehicleno
SET e.gas=f.totalgasuse;
-- 更新日志
UPDATE maintain_events_log_detail SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_vehicleenergyrank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_vehicleenergyrank`;
delimiter ;;
CREATE PROCEDURE `p_api_vehicleenergyrank`(IN p_timetype INT, IN p_lineDeptid INT, OUT p_result TEXT)
BEGIN
    -- ----------------------------------------------------------------------
    -- 功能:车辆能耗排名
    -- author:sohay,2017/01/06
    -- 参数说明：
    # p_lineDeptid：线路deptid
    # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
    -- 返回值p_result：
    # 没有数据则返回 null
    # 有数据返回json数组，如下格式 ：
    # json字段：车牌号 总能耗
    /*
    [
    {"vno":"黑AH1497","cost":0.00,"motor":"2","total_cost":0,"miles":0},
    {"vno":"黑AH1705","cost":0.00,"motor":"2","total_cost":0,"miles":0},
    {"vno":"黑AH1736","cost":0.00,"motor":"2","total_cost":0,"miles":0},
    {"vno":"黑AH1737","cost":0.00,"motor":"2","total_cost":0,"miles":0},
    ....
    ]
     */
    -- --------------------------------------------------------------------------
    DECLARE stime DATETIME; -- 统计的开始日期（包含本身）
    DECLARE etime DATETIME; -- 统计的结束日期（不包含本身）
    -- ----------------------------------------------------
    SET group_concat_max_len = 65536;
    SET p_result := '{}';
    -- 检查参数
    IF p_timetype = 0
    THEN
      SET stime := current_date() - INTERVAL 1 DAY;
      SET etime := current_date();
    ELSEIF p_timetype = 1
      THEN
        SET stime := current_date() - INTERVAL 7 DAY;
        SET etime := current_date();
    ELSEIF p_timetype = 2
      THEN
        SET etime := last_day(current_date()) + INTERVAL 1 DAY - INTERVAL 1 MONTH;
        SET stime := etime - INTERVAL 1 MONTH;
    ELSE
      -- 非法参数
      SET @msg = "invaid p_timetype value,must be in (0,1,2)";
      SIGNAL SQLSTATE 'HY000'
      SET MESSAGE_TEXT = @msg;
    END IF;
    -- 获取数据集
    -- 修改油汽电值各项值分开返回。by fanyin 2017-10-15
    SELECT concat('[', group_concat('{"vno":"', vehicleNo,
                                      '","motor":"', motor,
                                      '","oil":',oil,
                                      ',"gas":', gas,
                                      ',"ele":', ele,
                                      ',"miles":', miles,
                                      ',"total":', total,
                                      '}'), ']')
    INTO p_result
    FROM (
           SELECT
             a.vehicleNo,
             ifnull(a.motorType, '') AS motor,
             sum(oil) as oil,
             sum(gas) as gas,
             sum(ele) as ele,
             sum(miles) as miles,
             sum(oil) + sum(gas) + sum(ele) as total
           FROM api_energe a
           WHERE a.deptid = p_lineDeptid
                 AND a.stat_date >= stime AND a.stat_date < etime
                 AND a.vehicleNo IS NOT NULL
           GROUP BY a.vehicleNo, a.motorType
           ORDER BY total DESC 
         ) t0;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_vehicleviolation
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_vehicleviolation`;
delimiter ;;
CREATE PROCEDURE `p_api_vehicleviolation`(p_timetype int,p_vehicleNo varchar(32),out p_result text)
BEGIN
   # p_vehicleNo：车牌号
   # p_timetype：0-昨天 1-近7天（不含今天） 2-上月
/*
 {"vehicleNo":"黑AH1497",
  "data":[
          {"stat_date":"2017-06-30","type":"超速","total":10,"score":20},
          {"stat_date":"2017-06-30","type":"夜间行驶","total":20,"score":0},
          {"stat_date":"2017-06-30","type":"急加速","total":5,"score":10}
          ...
		]
 }
 */
declare stime datetime;-- 统计的开始日期（包含本身）
declare etime datetime;-- 统计的结束日期（不包含本身） 
declare v_total int;
set group_concat_max_len = 65536 ;
set p_result:='{}';
if p_timetype =0 then
  set stime :=current_date()-interval 1 day;
  set etime :=current_date();
elseif p_timetype =1 then
  set stime :=current_date()-interval 7 day;
  set etime :=current_date();
elseif p_timetype =2 then
  set etime :=last_day(current_date())+interval 1 day-interval 1 month;
  set stime :=etime-interval 1 month;
else
  -- 非法参数
  set @msg = "invaid p_timetype value,must be in (0,1,2)";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
end if;
  
select concat('{"vehicleNo":"',p_vehicleNo,'","data":[',
          group_concat(concat('{"stat_date":"',stat_date,'","type":"',actiontypeDesc,'","total":',
                      total,',"score":',score,'}') order by stat_date asc,actiontypeDesc),
          ']}')
     into p_result
from (
select vehicleNo,stat_date,actiontypeDesc,SUM(total)as total,SUM(score)as score 
from api_violation 
where vehicleNo=p_vehicleNo
and stat_date>=stime  
and stat_date<etime GROUP BY stat_date,actiontypeDesc)t1
;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_violation
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_violation`;
delimiter ;;
CREATE PROCEDURE `p_api_violation`(p_startDate date,p_endDate date)
BEGIN
	#Routine body goes here...
declare v_logid int;

set sql_safe_updates = 0;
insert into maintain_events_log(eventName,startTime,finishTime)
values('p_api_violation',now(),null);
select max(id) into v_logid from maintain_events_log where eventName='p_api_violation';


delete from api_violation where stat_date>=p_startDate and stat_date<p_endDate;
insert into api_violation(deptId,vehicleNo,stat_date,actiontypeDesc,driverName,total,score)
select t1.linedeptId,t2.vehicleNo,t1.stat_date,t1.actiontypeDesc,
  t1.driverName,t1.total ,t1.score
from (
select a.linedeptId,a.vehicledeviceid,a.stat_date,a.actiontypeDesc,
  a.driverName,count(1) as total ,sum(score) as score
from stat_driving_violation_detail a 
where a.stat_date >=p_startDate and a.stat_date<p_endDate
and driverName is not null
group by a.stat_date,a.linedeptId,a.vehicledeviceid,a.actiontypeDesc,driverName) t1
inner join t_vehicleinfo t2 
on t1.vehicledeviceid=t2.deviceid  ;

update maintain_events_log set finishTime=now() where id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_violationstrend
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_violationstrend`;
delimiter ;;
CREATE PROCEDURE `p_api_violationstrend`(p_timetype INT,deptid VARCHAR(45),depttype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
  # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"司机姓名1","data":[12,13,45,56,18,1,2]},
 {"name":"司机姓名2","data":[12,13,45,56,18,1,2]},
 {"name":"司机姓名3","data":[12,13,45,56,18,1,2]},
 {"name":"司机姓名4","data":[12,13,45,56,18,1,2]}
 ]
 */
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - interval day(CURRENT_DATE())-1 day - interval month(CURRENT_DATE()) -1 month;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - interval day(CURRENT_DATE())-1 day - interval month(CURRENT_DATE()) -1 month;
  SET stime :=etime-INTERVAL 1 year;
 else -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
  
IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATEtime);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_violationname AS 
SELECT tname FROM (SELECT driverName AS tname,count(1) as cnt  FROM stat_driving_violation_detail WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
    GROUP BY driverName ORDER BY cnt DESC )tt limit 5');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT driverName AS tname,count(1) AS cnt, stat_date FROM (
SELECT  driverName, date_format(begin_time,\'%Y-%m-%d %H:00:00\')  as stat_date FROM stat_driving_violation_detail 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
) a   GROUP BY driverName,stat_date') ;
  SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 else IF p_timeType<4 and p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_violationname AS 
SELECT tname FROM (SELECT driverName AS tname,SUM(total) AS cnt,stat_date FROM  api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND vehicleNo IN(SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
GROUP BY driverName order by cnt desc limit 5)tt ');
   
     SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT driverName AS tname,SUM(total) AS cnt,stat_date FROM  api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND vehicleNo IN(SELECT vehicleNo FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
GROUP BY driverName,stat_date') ;
    SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname;
SET @sql:=CONCAT('CREATE TEMPORARY TABLE tmp_violationname AS  
SELECT tname FROM 
(SELECT driverName AS tname,SUM(totalNum) AS cnt   FROM stat_driving_violation_summary 
WHERE stat_date >=\'',stime,'\' AND stat_date<\'',etime,'\' AND deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')   
 GROUP BY driverName    
ORDER BY cnt DESC )tt  limit 5');
  SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS  
SELECT driverName AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\' AND deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')    
 GROUP BY driverName,stat_date ')    ;
   SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_violationname t3
ON 1=1
LEFT JOIN tmp_violationcnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
 
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_violationstrendgrouped
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_violationstrendgrouped`;
delimiter ;;
CREATE PROCEDURE `p_api_violationstrendgrouped`(p_timetype INT,deptid varchar(45),depttype varchar(45),userdeptid int, OUT p_result VARCHAR(1024))
BEGIN
  # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"违规1","data":[12,13,45,56,18,1,2]},
 {"name":"违规2","data":[12,13,45,56,18,1,2]},
 {"name":"违规3","data":[12,13,45,56,18,1,2]},
 {"name":"违规4","data":[12,13,45,56,18,1,2]}
 ]
 */
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 4;-- topN 的违规数 
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - interval day(CURRENT_DATE())-1 day - interval month(CURRENT_DATE()) -1 month;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - interval day(CURRENT_DATE())-1 day - interval month(CURRENT_DATE()) -1 month;
  SET stime :=etime-INTERVAL 1 year;
 else -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
CREATE TEMPORARY TABLE tmp_violationname (tname VARCHAR(45));
INSERT INTO tmp_violationname(tname)
VALUES ('dangerType'),
('damageType'),
('badserviceType');
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT tname,sum(cnt) as cnt,stat_date FROM (
SELECT \'dangerType\' AS tname,count(1) AS cnt, date_format(begin_time,\'%Y-%m-%d %H:00:00\') as stat_date FROM  stat_driving_violation_detail 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE dangerType =1 and deptid=',userdeptid,') 
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
  GROUP BY begin_time
union all
SELECT \'damageType\' AS tname,count(1) AS cnt, date_format(begin_time,\'%Y-%m-%d %H:00:00\') as stat_date FROM  stat_driving_violation_detail 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE damageType =1 and deptid=',userdeptid,') 
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
   GROUP BY begin_time
union all 
SELECT \'badServiceType\' AS tname,count(1) AS cnt, date_format(begin_time,\'%Y-%m-%d %H:00:00\') as stat_date FROM  stat_driving_violation_detail 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE badServiceType =1 and deptid=',userdeptid,') 
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
  GROUP BY begin_time
 )a GROUP BY stat_date,tname ORDER BY tname,stat_date
') ;
select @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
CREATE temporary table tmp_violationname (tname varchar(45));
insert into tmp_violationname(tname)
values ('dangerType'),
('damageType'),
('badserviceType');
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT \'dangerType\' AS tname,SUM(total) AS cnt,stat_date FROM 
api_violation 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE dangerType =1 and deptid=',userdeptid,') 
and vehicleNo IN(SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
 group by stat_date
union all
SELECT \'damageType\' AS tname,SUM(total) AS cnt,stat_date  FROM api_violation 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE damageType =1 and deptid=',userdeptid,') 
and vehicleNo IN(SELECT vehicleNO FROM t_vehicleinfo b INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
 group by stat_date
union all
SELECT \'badServiceType\' AS tname,SUM(total) AS cnt,stat_date FROM api_violation 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE badServiceType =1 and deptid=',userdeptid,') 
and vehicleNo IN(SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')  
group by stat_date
') ;
select @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
CREATE TEMPORARY TABLE tmp_violationname (tname VARCHAR(45));
INSERT INTO tmp_violationname(tname)
VALUES ('dangerType'),
('damageType'),
('badserviceType');
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS  
SELECT \'dangerType\' AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\' 
and deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')  
 and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE dangerType =1) 
 GROUP BY stat_date 
 union all 
 SELECT \'damageType\' AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\'
 and deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')  
 and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE damageType =1) 
 GROUP BY stat_date 
 union all 
 SELECT \'badserviceType\' AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\' 
and deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')  
 and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE badserviceType =1) 
 GROUP BY stat_date 
 
 ')    ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_violationname t3
ON 1=1
LEFT JOIN tmp_violationcnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_api_violationstrend_fortype
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_api_violationstrend_fortype`;
delimiter ;;
CREATE PROCEDURE `p_api_violationstrend_fortype`(p_timetype INT,deptid VARCHAR(45),depttype VARCHAR(45), userdeptid int,violationtype varchar(45), OUT p_result VARCHAR(1024))
BEGIN
 # p_lineDeptid：线路deptid
  # p_timetype：0-昨天 1-近7天（不含今天） 2-本月 3-上月  4-今年 5-去年   -- 当时间为去去年和今年时 应注意depttype 的变化 
/*
 [
 {"name":"违规1","data":[12,13,45,56,18,1,2]},
 {"name":"违规2","data":[12,13,45,56,18,1,2]},
 {"name":"违规3","data":[12,13,45,56,18,1,2]},
 {"name":"违规4","data":[12,13,45,56,18,1,2]}
 ]
 */
 -- 趋势图中添加了 按 违规类型分类 2018年10月5日 by hanyazhang
 -- violaitontype 包括 dangerType,hignConsumeType,damageType,badServiceType  见 driving_violation_type 表
 -- 由于业务需求， hignConSumeType  不用
DECLARE stime DATE;-- 统计的开始日期（包含本身）
DECLARE etime DATE;-- 统计的结束日期（不包含本身）
DECLARE v_topN INT DEFAULT 5;-- topN 的违规数 
SET p_result:='{}';
IF p_timetype =0 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 1 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =1 THEN
  SET stime :=CURRENT_DATE()-INTERVAL 7 DAY;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =2 THEN  
  SET stime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET etime :=CURRENT_DATE();
ELSEIF p_timetype =3 THEN
  SET etime :=LAST_DAY(CURRENT_DATE())+INTERVAL 1 DAY-INTERVAL 1 MONTH;
  SET stime :=etime-INTERVAL 1 MONTH;
ELSEIF p_timetype =4 THEN
  SET etime :=CURRENT_DATE();
  SET stime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
ELSEIF p_timetype =5 THEN
  SET etime :=CURRENT_DATE() - INTERVAL DAY(CURRENT_DATE())-1 DAY - INTERVAL MONTH(CURRENT_DATE()) -1 MONTH;
  SET stime :=etime-INTERVAL 1 YEAR;
 ELSE -- 非法参数
  SET @msg = "invaid p_timetype value,must be 0 1 2 3 4 or 5";  
  SIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = @msg; 
END IF;
  -- 按日
IF p_timeType=0 THEN
  DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATETIME);
SET @start_date:=DATE_FORMAT(stime,'%Y-%m-%d 00:00:00');
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 HOUR;
   
END WHILE;
SELECT * FROM tmp_datesheet;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_violationname AS 
SELECT tname FROM (SELECT actiontypeDesc AS tname,count(1) as cnt  FROM stat_driving_violation_detail WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
AND actiontypeDesc  
IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,')
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')
    GROUP BY actiontypeDesc ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
   select @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT actiontypeDesc AS tname,count(1) AS cnt, stat_date FROM (
SELECT  actiontypeDesc, date_format(begin_time,\'%Y-%m-%d %H:00:00\')  as stat_date FROM stat_driving_violation_detail 
WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\'  
AND actiontypeDesc  
IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,')
and vehicledeviceid in (SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,') 
) a   GROUP BY actiontypeDesc,stat_date') ;
  SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
  
  
 ELSE IF p_timeType<4 AND p_timeType>0 THEN
   -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 DAY;
END WHILE;
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname ;
SET @sql:=CONCAT('  CREATE TEMPORARY TABLE tmp_violationname AS 
 SELECT tname FROM (SELECT actiontypeDesc AS tname,total AS cnt FROM ( SELECT 
SUM(total) AS total,actiontypeDesc FROM api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' AND actiontypeDesc  
IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,' ) AND vehicleNO IN (SELECT vehicleNO FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,' = ',deptid,') 
     GROUP BY actiontypeDesc )a)tt ORDER BY cnt DESC LIMIT ', v_topN);
   
     SELECT @sql;
   
SELECT @sql;
PREPARE state1 FROM @sql;
EXECUTE  state1; 
DEALLOCATE PREPARE state1; 
-- 数据中的 违规次数 项
SELECT 1;
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS 
SELECT actiontypeDesc AS tname,SUM(total) AS cnt,stat_date FROM (
SELECT  actiontypeDesc,deptid,sum(total) as total,stat_date FROM api_violation WHERE stat_date >= \'', stime ,'\' AND stat_date< \'',etime,'\' 
and actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,' ) GROUP BY deptid,actiontypeDesc,stat_date
) a  INNER JOIN
  v_lineinfo b ON a.deptId = b.`lineDeptId`  WHERE ', depttype,'=',deptid,' GROUP BY actiontypeDesc,stat_date') ;
SELECT @sql2;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
-- -- BIAOJI
-- 按月
ELSE 
 -- 数据中的日期 项
DROP TABLE IF EXISTS tmp_datesheet;
CREATE TEMPORARY TABLE tmp_datesheet(d DATE);
SET @start_date:=stime;
WHILE @start_date<etime DO
  INSERT INTO tmp_datesheet VALUES(@start_date);
  SET @start_date:=@start_date+INTERVAL 1 MONTH;
END WHILE; 
-- 数据中的 违规名 项
DROP TABLE IF EXISTS tmp_violationname;
SET @sql:=CONCAT('CREATE TEMPORARY TABLE tmp_violationname AS  
SELECT tname FROM 
(SELECT actiontypeDesc AS tname,SUM(totalNum) AS cnt   FROM stat_driving_violation_summary 
WHERE stat_date >=\'',stime,'\' AND stat_date<\'',etime,'\' AND  deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')  
  and  actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,')
 GROUP BY actiontypeDesc    
ORDER BY cnt DESC LIMIT ', v_topN,')tt ');
PREPARE state1 FROM @sql;
EXECUTE  state1;
DEALLOCATE PREPARE state1;
-- 数据中的 违规次数 项
DROP TABLE IF EXISTS tmp_violationcnt;
SET @sql2:=CONCAT('CREATE TEMPORARY TABLE tmp_violationcnt AS  
SELECT actiontypeDesc AS tname,SUM(totalNum) AS cnt ,stat_date  FROM stat_driving_violation_summary 
WHERE stat_date >= \'',stime,'\' AND stat_date< \'',etime,'\' AND deviceid IN(SELECT deviceid FROM t_vehicleinfo b 
INNER JOIN v_lineinfo c ON b.deptId = c.lineDeptId WHERE ', depttype,'=',deptid,')    and  actiontypeDesc  IN (SELECT violationName FROM driving_violation_type WHERE ',violationtype,'=1 and deptid=',userdeptid,') 
 GROUP BY actiontypeDesc,stat_date ')    ;
PREPARE state2 FROM @sql2;
EXECUTE  state2;
DEALLOCATE PREPARE state2;
END IF;
end if;
-- 连接在一起
SELECT CONCAT('[',GROUP_CONCAT(CONCAT('{"name":"',tname,'","data":[',DATA,']}')),']') AS result
  INTO p_result
FROM (
SELECT t3.tname,
GROUP_CONCAT(IFNULL(t1.cnt,0) ORDER BY t2.d ASC) AS DATA
FROM tmp_datesheet t2  
INNER JOIN tmp_violationname t3
ON 1=1
LEFT JOIN tmp_violationcnt 
t1 
ON t1.tname=t3.tname AND t2.d=t1.stat_date 
GROUP BY t3.tname ) tt;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_compress_analog1
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_compress_analog1`;
delimiter ;;
CREATE PROCEDURE `p_compress_analog1`(p_date date)
BEGIN
declare v_sub_table varchar(64);
declare v_cnt int;
declare v_parti varchar(64);
set v_sub_table :=concat('t_vehicleanaloginfo_',date_format(p_date,'%Y%m%d'));
set @v_sqlstr :=concat('create table if not exists ',v_sub_table,' like t_vehicleanaloginfo_his');
PREPARE stmt FROM @v_sqlstr;
EXECUTE stmt ;
drop view if exists v_tmp_t_vehicleanaloginfo_his ;
set @view_sql :=concat('create view v_tmp_t_vehicleanaloginfo_his as select * from ',v_sub_table);
PREPARE stmt FROM @view_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
insert into v_tmp_t_vehicleanaloginfo_his 
select vehicledeviceid,time,unhex(concat(databin_vehicleTypeAndDatatype,SPEED,ENGINE,BATTERYVOLTAGE,OILPRESSURE,
  COOLANTTEMPER,PRESSURE1,PRESSURE2,PRESSURE3,PRESSURE4,ENGINECOMPARTMENTTEMPER,INSIDETEMPER,OUTSIDETEMPER,
  RESIDUALFUEL,FULLFUEL,TYRELAYOUT,TYREPOSITION,TYRETEMPER,TYREPRESSUREHIGH,TYREPRESSURELOW,SHORTMILEAGE,
  MILEAGE,CUMULATIVEENGINEREVOLUTION,FUELCONSUMPTRATE,FUELECONOMY,TOTALFUELUSE,UREALEVEL,LONGITUDEDEGREE,
  LONGITUDEMINUTE,LONGITUDESECOND,LONGITUDEDECIMALS,LATITUDEDEGREE,LATITUDEMINUTE,LATITUDESECOND,LATITUDEDECIMALS,
  ANGLEINTEGER,ANGLEDECIMALS,singletotalgasuse,totalgasuse,realtimegasuse,averagegasuse,allgasuse,gpsangle,
  gpsx1,gpsy1,gpsangle1,singletotalfueluse,hundredfueluse,realhundredfueluse,realtimegfueluse,hundredgasuse,
  realhundredgasuse,residualgas,totalfuelcost,totalenergyuse)) as databin
from (
select
vehicledeviceid,time,
concat(conv(vehicletypeid,10,16),conv(datatypeid,10,16)) as databin_vehicleTypeAndDatatype,
lpad(conv(speed,10,16),2,'0') as speed,
lpad(conv(engine,10,16),4,'0') as engine,
lpad(conv(batteryvoltage,10,16),2,'0') as batteryvoltage,
lpad(conv(oilpressure,10,16),2,'0') as oilpressure,
lpad(conv(coolanttemper,10,16),2,'0') as coolanttemper,
lpad(conv(pressure1,10,16),2,'0') as pressure1,
lpad(conv(pressure2,10,16),2,'0') as pressure2,
lpad(conv(pressure3,10,16),2,'0') as pressure3,
lpad(conv(pressure4,10,16),2,'0') as pressure4,
lpad(conv(enginecompartmenttemper,10,16),2,'0') as enginecompartmenttemper,
lpad(conv(insidetemper,10,16),2,'0') as insidetemper,
lpad(conv(outsidetemper,10,16),2,'0') as outsidetemper,
lpad(conv(residualfuel,10,16),2,'0') as residualfuel,
lpad(conv(fullfuel,10,16),4,'0') as fullfuel,
lpad(conv(tyrelayout,10,16),4,'0') as tyrelayout,
lpad(conv(tyreposition,10,16),2,'0') as tyreposition,
lpad(conv(tyretemper,10,16),2,'0') as tyretemper,
lpad(conv(tyrepressurehigh,10,16),2,'0') as tyrepressurehigh,
lpad(conv(tyrepressurelow,10,16),2,'0') as tyrepressurelow,
lpad(conv(ifnull(shortmileage,0),10,16),4,'0') as shortmileage,
lpad(conv(ifnull(mileage,0),10,16),8,'0') as mileage,
lpad(conv(ifnull(cumulativeenginerevolution,0),10,16),8,'0') as cumulativeenginerevolution,
lpad(conv(ifnull(fuelconsumptrate,0),10,16),4,'0') as fuelconsumptrate,
lpad(conv(ifnull(fueleconomy,0),10,16),4,'0') as fueleconomy,
lpad(conv(ifnull(totalfueluse,0),10,16),8,'0') as totalfueluse,
lpad(conv(ifnull(urealevel,0),10,16),2,'0') as urealevel,-- 26
lpad(conv(ifnull(longitudedegree,0),10,16),2,'0') as longitudedegree,
lpad(conv(ifnull(longitudeminute,0),10,16),2,'0') as longitudeminute,
lpad(conv(ifnull(longitudesecond,0),10,16),2,'0') as longitudesecond,
lpad(conv(ifnull(longitudedecimals,0),10,16),2,'0') as longitudedecimals,
lpad(conv(ifnull(latitudedegree,0),10,16),2,'0') as latitudedegree,
lpad(conv(ifnull(latitudeminute,0),10,16),2,'0') as latitudeminute,
lpad(conv(ifnull(latitudesecond,0),10,16),2,'0') as latitudesecond,
lpad(conv(ifnull(latitudedecimals,0),10,16),2,'0') as latitudedecimals,
lpad(conv(ifnull(angleinteger,0),10,16),4,'0') as angleinteger,
lpad(conv(ifnull(angledecimals,0),10,16),2,'0') as angledecimals,
lpad(conv(ifnull(singletotalgasuse,0),10,16),4,'0') as singletotalgasuse,
lpad(conv(ifnull(totalgasuse,0),10,16),6,'0') as totalgasuse,
lpad(conv(ifnull(realtimegasuse,0),10,16),4,'0') as realtimegasuse,
lpad(conv(ifnull(averagegasuse,0),10,16),4,'0') as averagegasuse,
lpad(conv(ifnull(allgasuse,0),10,16),6,'0') as allgasuse,
lpad(conv(ifnull(gpsangle,0)*10,10,16),6,'0') as gpsangle,
lpad(conv(ifnull(gpsx1,0),10,16),8,'0') as gpsx1,
lpad(conv(ifnull(gpsy1,0),10,16),8,'0') as gpsy1,
lpad(conv(ifnull(gpsangle1,0),10,16),6,'0') as gpsangle1,
lpad(conv(ifnull(singletotalfueluse,0),10,16),4,'0') as singletotalfueluse,
lpad(conv(ifnull(hundredfueluse,0),10,16),8,'0') as hundredfueluse,
lpad(conv(ifnull(realhundredfueluse,0),10,16),4,'0') as realhundredfueluse,
lpad(conv(ifnull(realtimegfueluse,0),10,16),4,'0') as realtimegfueluse,
lpad(conv(ifnull(hundredgasuse,0),10,16),4,'0') as hundredgasuse,
lpad(conv(ifnull(realhundredgasuse,0),10,16),4,'0') as realhundredgasuse,
lpad(conv(ifnull(residualgas,0),10,16),4,'0') as residualgas,
lpad(conv(ifnull(totalfuelcost,0),10,16),8,'0') as totalfuelcost,
lpad(conv(ifnull(totalenergyuse,0),10,16),8,'0') as totalenergyuse
from t_vehicleanaloginfo 
where  time >=p_date and time< p_date + interval 1 day ) tt ;
drop view if exists v_tmp_t_vehicleanaloginfo_his ;
set @compress_sql :=concat('alter table ',v_sub_table,' KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED');
PREPARE stmt FROM @compress_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
set v_parti :=concat('p_',date_format(p_date,'%Y%m%d'));
select count(1) into v_cnt from information_schema.PARTITIONS a 
where table_name='t_vehicleanaloginfo' and table_schema=database() 
and partition_name = v_parti;
if v_cnt=1 then 
  set @v_parti :=concat('alter table t_vehiclestateinfo1 drop partition ',v_parti);
  PREPARE stmt FROM @v_parti;
 -- EXECUTE stmt ;
  DEALLOCATE  PREPARE  stmt;
end if;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_compress_candata
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_compress_candata`;
delimiter ;;
CREATE PROCEDURE `p_compress_candata`(p_startdate date,p_enddate date)
BEGIN
declare v_start date;
declare v_logid int;
set v_start :=p_startdate;
while v_start <= p_enddate do
  -- 状态量1
   -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime)
  values(concat('p_compress_state1(''',v_start,''')'),now(),null);
  select max(id) into v_logid from maintain_events_log;
  call p_compress_state1(v_start);
  update maintain_events_log set finishTime=now() where id=v_logid;
  -- 状态量2
   -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime)
  values(concat('p_compress_state2(''',v_start,''')'),now(),null);
  select max(id) into v_logid from maintain_events_log;
  call p_compress_state2(v_start);
  update maintain_events_log set finishTime=now() where id=v_logid;
  -- 状态量3
   -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime)
  values(concat('p_compress_state3(''',v_start,''')'),now(),null);
  select max(id) into v_logid from maintain_events_log;
  call p_compress_state3(v_start);
  update maintain_events_log set finishTime=now() where id=v_logid;
  set v_start :=v_start + interval 1 day;
end while;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_compress_state1
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_compress_state1`;
delimiter ;;
CREATE PROCEDURE `p_compress_state1`(p_date date)
BEGIN
declare v_sub_table varchar(64);
declare v_cnt int;
declare v_parti varchar(64);
set v_sub_table :=concat('t_vehiclestateinfo1_',date_format(p_date,'%Y%m%d'));
set @v_sqlstr :=concat('create table if not exists ',v_sub_table,' like t_vehiclestateinfo1_his');
PREPARE stmt FROM @v_sqlstr;
EXECUTE stmt ;
drop view if exists v_tmp_vehiclestateinfo1_his ;
set @view_sql :=concat('create view v_tmp_vehiclestateinfo1_his as select * from ',v_sub_table);
PREPARE stmt FROM @view_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
insert into v_tmp_vehiclestateinfo1_his 
select vehicledeviceid,time,unhex(concat(databin1,databin_vehicleTypeAndDatatype))
from (
select vehicledeviceid,time,
int2b_to_hex(concat(frontdooropen,middledooropen,middledoor2open,reardooropen,leftfrontdooropen,leftmiddledooropen,leftreardooropen,
  rightfrontdooropen,rightmiddledooropen,rightreardooropen,leftdoorallopen,rightdoorallopen,alldooropen,disabledoor,leftdoorallshut,
  rightdoorallshut,alldoorshut,frontdoornotify,middledoornotify,middledoor2notify,reardoornotify,leftfrontdoornotify,leftmiddledoornotify,
  leftreardoornotify,rightfrontdoornotify,rightmiddledoornotify,rightreardoornotify,pgear,rgear,ngear,handbrake,brake,abs,ebs,
  frontdoorbell,middledoorbell,reardoorbell,retardnotify,retardrear1,retardrear2,retardrear3,retardrear4,hingestop,hingework,hingebrake,
  lightfar,lightnear,foglightfront,foglightrear,lightsmall,spotlightfront,spotlightmiddle,spotlightmiddle2,spotlightrear,spotlightleftfront,
  spotlightleftmiddle,spotlightleftrear,spotlightrightfront,spotlightrightmiddle,spotlightrightrear,leftlamp,rightlamp,turnlampleft,
  turnlampright,brakelight,reverselight,hornelect,hornair,wiperhigh,wiperlow,wipergap1,wipergap2,wipergap3,wipergap4,wiperpower,wiper,
  wiperwheel,clutch,clutchfan,panelhign,panellow,panelpower,panelout,counterpower,obligate1,obligate2)) as databin1,
  conv(DGEAR,10,16) as databin_dgear,
  concat(conv(vehicletypeid,10,16),conv(datatypeid,10,16)) as databin_vehicleTypeAndDatatype
from t_vehiclestateinfo1 a
where  time >=p_date and time< p_date + interval 1 day ) tt ;
drop view if exists v_tmp_vehiclestateinfo1_his ;
set @compress_sql :=concat('alter table ',v_sub_table,' KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED');
PREPARE stmt FROM @compress_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
set v_parti :=concat('p_',date_format(p_date,'%Y%m%d'));
select count(1) into v_cnt from information_schema.PARTITIONS a 
where table_name='t_vehiclestateinfo1' and table_schema=database() 
and partition_name = v_parti;
if v_cnt=1 then 
  set @v_parti :=concat('alter table t_vehiclestateinfo1 drop partition ',v_parti);
  PREPARE stmt FROM @v_parti;
  EXECUTE stmt ;
  DEALLOCATE  PREPARE  stmt;
end if;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_compress_state2
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_compress_state2`;
delimiter ;;
CREATE PROCEDURE `p_compress_state2`(p_date date)
BEGIN
declare v_sub_table varchar(64);
declare v_cnt int;
declare v_parti varchar(64);
set v_sub_table :=concat('t_vehiclestateinfo2_',date_format(p_date,'%Y%m%d'));
set @v_sqlstr :=concat('create table if not exists ',v_sub_table,' like t_vehiclestateinfo2_his');
PREPARE stmt FROM @v_sqlstr;
EXECUTE stmt ;
drop view if exists v_tmp_vehiclestateinfo2_his ;
set @view_sql :=concat('create view v_tmp_vehiclestateinfo2_his as select * from ',v_sub_table);
PREPARE stmt FROM @view_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
insert into v_tmp_vehiclestateinfo2_his 
select vehicledeviceid,time,unhex(concat(databin1,databin_vehicleTypeAndDatatype))
from (
select vehicledeviceid,time,
int2b_to_hex(concat(leftcabindoor,rightcabindoor,rearcabindoor,safedoor,enginestop,enginemaintain,enginediagnosis,engineawaitstart,
  enginediagnosisrequest,alternatorcharge,alternatorcharge2,alternatorcharge3,lubricate,asr,retarderoperate,bridgelock,wheeldifferential,
  axisdifferential,conditioncooling,conditionair,conditionclutch,dryernotify,motorpreheat,lightguide,lightshoulder,lightreading,lightticketsfront,
  lightticketsmiddle,lightticketsrear,lightdaytime,lightdriver,cruisework,cruiseset,cruiseboost,cruisedrop,cruiserecover,requestservice,
  requeststop,idlingboost,idlingdrop,ventilatorfrontin,ventilatorfrontout,ventilatormiddlein,ventilatormiddleout,ventilatorrearin,ventilatorrearout,
  defroster1,defroster2,rearviewheating,radiator1,radiator2,heater,airsuspensionup,airsuspensiondown,airsuspensionreset,ecasheel,ecasheight,
  ecasworking,lighterpower,driverfan1,driverfan2,curtainup,curtaindown,powerslot,powerwc,powermonitor,powerincarmonitor,powerreceiver,
  powercondition,tvpowerfront,tvpowerrear,tvpackfront,tvpackrear,tvpopupfront,tvpopuprear,obligate)) as databin1,
  concat(conv(vehicletypeid,10,16),conv(datatypeid,10,16)) as databin_vehicleTypeAndDatatype
from t_vehiclestateinfo2 a
where  time >=p_date and time< p_date + interval 1 day ) tt ;
drop view if exists v_tmp_vehiclestateinfo2_his ;
set @compress_sql :=concat('alter table ',v_sub_table,' KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED');
PREPARE stmt FROM @compress_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
set v_parti :=concat('p_',date_format(p_date,'%Y%m%d'));
select count(1) into v_cnt from information_schema.PARTITIONS a 
where table_name='t_vehiclestateinfo2' and table_schema=database() 
and partition_name = v_parti;
if v_cnt=1 then 
  set @v_parti :=concat('alter table t_vehiclestateinfo2 drop partition ',v_parti);
  PREPARE stmt FROM @v_parti;
  EXECUTE stmt ;
  DEALLOCATE  PREPARE  stmt;
end if;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_compress_state3
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_compress_state3`;
delimiter ;;
CREATE PROCEDURE `p_compress_state3`(p_date date)
BEGIN
declare v_sub_table varchar(64);
declare v_cnt int;
declare v_parti varchar(64);
set v_sub_table :=concat('t_vehiclestateinfo3_',date_format(p_date,'%Y%m%d'));
set @v_sqlstr :=concat('create table if not exists ',v_sub_table,' like t_vehiclestateinfo3_his');
PREPARE stmt FROM @v_sqlstr;
EXECUTE stmt ;
drop view if exists v_tmp_vehiclestateinfo3_his ;
set @view_sql :=concat('create view v_tmp_vehiclestateinfo3_his as select * from ',v_sub_table);
PREPARE stmt FROM @view_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
insert into v_tmp_vehiclestateinfo3_his 
select vehicledeviceid,time,unhex(concat(databin1,databin_vehicleTypeAndDatatype))
from (
select vehicledeviceid,time,
int2b_to_hex(concat(antipfront,antipmiddle,antipmiddle2,antiprear,antipleftfront,antipleftmiddle,antipleftrear,antiprightfront,antiprightmiddle,
  antiprightrear,reliefrotate,reliefopen,emecapout,emergencyout,emecapin,emergencyin,emecapfi,emergencyfi,emecapfo,emergencyfo,emecapmi,
  emergencymi,emecapmo,emergencymo,emecapm2i,emergencym2i,emecapm2o,emergencym2o,emecapri,emergencyri,emecapro,emergencyro,emecaplfi,
  emergencylfi,emecaplfo,emergencylfo,emecaplmi,emergencylmi,emecaplmo,emergencylmo,emecaplri,emergencylri,emecaplro,emergencylro,emecaprfi,
  emergencyrfi,emecaprfo,emergencyrfo,emecaprmi,emergencyrmi,emecaprmo,emergencyrmo,emecaprri,emergencyrri,emecaprro,emergencyrro,absdiagnosisrequest,
  disabledhelp,ptonotify,ptonotifyhigh,ptonotifylow,accelstatus,conditionon,conditionmegpower,conditionidlingboost,contackbuzzer,lightcorridor,
  lightsterilize,lightluggage,lightnight,wheelchairout,wheelchairbelt,safebelt,keyacc,keyon,keystart)) as databin1,
  concat(conv(vehicletypeid,10,16),conv(datatypeid,10,16)) as databin_vehicleTypeAndDatatype
from t_vehiclestateinfo3 a
where  time >=p_date and time< p_date + interval 1 day ) tt ;
drop view if exists v_tmp_vehiclestateinfo3_his ;
set @compress_sql :=concat('alter table ',v_sub_table,' KEY_BLOCK_SIZE = 8 , ROW_FORMAT = COMPRESSED');
PREPARE stmt FROM @compress_sql;
EXECUTE stmt ;
DEALLOCATE  PREPARE  stmt;
set v_parti :=concat('p_',date_format(p_date,'%Y%m%d'));
select count(1) into v_cnt from information_schema.PARTITIONS a 
where table_name='t_vehiclestateinfo3' and table_schema=database() 
and partition_name = v_parti;
if v_cnt=1 then 
  set @v_parti :=concat('alter table t_vehiclestateinfo3 drop partition ',v_parti);
  PREPARE stmt FROM @v_parti;
  EXECUTE stmt ;
  DEALLOCATE  PREPARE  stmt;
end if;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for P_conditiontime
-- ----------------------------
DROP PROCEDURE IF EXISTS `P_conditiontime`;
delimiter ;;
CREATE PROCEDURE `P_conditiontime`(p_date DATE)
BEGIN
  -- 节能分析：空调开启时长
  -- 算法描述：空调开启时，累加时间
  DECLARE cont INT;
  declare v_startTime timestamp ; 
  set v_startTime:=current_timestamp() ;
  -- 删除异常数据
  DELETE FROM stat_energy_saving_detail WHERE stat_date = p_date AND TYPE = 'conditionTime' ;
    
  SET @stime:=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00');
  SET @etime:=@stime+INTERVAL 1 HOUR;
  SET cont:=0;
  -- 开始循环，按小时统计
 WHILE cont<23 DO
 
  INSERT INTO stat_energy_saving_detail (VehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
  SELECT vehicledeviceid,'conditionTime' ,'空调开启时长',MIN(begintime),MAX(endtime),p_date,TIMESTAMPDIFF(SECOND,MIN(begintime),MAX(endtime)) FROM (
     SELECT a.vehicledeviceid,MIN(a.time) AS begintime,MAX(a.time) AS endtime
     FROM t_vehiclestateinfo2 a 
     WHERE a.time>=@stime AND a.time<@etime AND a.conditioneron  ='1' GROUP BY vehicledeviceid,conditioneron 
  )t GROUP BY vehicledeviceid ORDER BY NULL;
  
  SET @stime:=@etime;
  SET @etime:=@stime+INTERVAL 1 HOUR;
  SET cont:=cont+1;
  
 END WHILE;
 
 -- 记录日志
    insert into maintain_events_log(eventName,startTime,finishTime,comments)values('P_conditiontime',v_startTime,now(),"空调开启时长计算");
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_create_can_view
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_create_can_view`;
delimiter ;;
CREATE PROCEDURE `p_create_can_view`(p_type int,p_date varchar(8))
BEGIN
/* ----------------------------------------------------------------------
   # p_date：要查询的历史can数据日期,格式为yyyymmdd
   # p_type:can数据类型
   #    1 - 状态量1,与表t_vehiclestateinfo1字段相同
   #    2 - 状态量2,与表t_vehiclestateinfo2字段相同
   #    3 - 状态量3,与表t_vehiclestateinfo3字段相同
   #    4 - 电车状态量,与表t_electricvehiclestateinfo字段相同
   #    5 - 电车模拟量,与表t_electricvehicleana字段相同
   #    6 - 电车模拟量2,与表t_electricvehicleana2字段相同
   #    7 - 油车模拟量,与表t_vehicleanaloginfo字段相同
*/
declare v_viewname varchar(64);
if p_type = 1 then
  set v_viewname:=concat('v_t_vehiclestateinfo1_',p_date);
  
  -- 创建视图
  set @vsql :=concat('CREATE VIEW  ',v_viewname,' AS ',
    'select lpad(vehicledeviceid,16,''0'') as vehicledeviceid,time,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),1,2),2,10) as frontdooropen,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),3,2),2,10) as middledooropen,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),1,2),2,10) as middledoor2open,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),3,2),2,10) as reardooropen,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),1,2),2,10) as leftfrontdooropen,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),3,2),2,10) as leftmiddledooropen,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),1,2),2,10) as leftreardooropen,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),3,2),2,10) as rightfrontdooropen,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),1,2),2,10) as rightmiddledooropen,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),3,2),2,10) as rightreardooropen,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),1,2),2,10) as leftdoorallopen,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),3,2),2,10) as rightdoorallopen,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),1,2),2,10) as alldooropen,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),3,2),2,10) as disabledoor,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),1,2),2,10) as leftdoorallshut,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),3,2),2,10) as rightdoorallshut,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),1,2),2,10) as alldoorshut,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),3,2),2,10) as frontdoornotify,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),1,2),2,10) as middledoornotify,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),3,2),2,10) as middledoor2notify,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),1,2),2,10) as reardoornotify,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),3,2),2,10) as leftfrontdoornotify,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),1,2),2,10) as leftmiddledoornotify,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),3,2),2,10) as leftreardoornotify,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),1,2),2,10) as rightfrontdoornotify,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),3,2),2,10) as rightmiddledoornotify,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),1,2),2,10) as rightreardoornotify,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),3,2),2,10) as pgear,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),1,2),2,10) as rgear,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),3,2),2,10) as ngear,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),1,2),2,10) as handbrake,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),3,2),2,10) as brake,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),1,2),2,10) as abs,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),3,2),2,10) as ebs,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),1,2),2,10) as frontdoorbell,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),3,2),2,10) as middledoorbell,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),1,2),2,10) as reardoorbell,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),3,2),2,10) as retardnotify,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),1,2),2,10) as retardrear1,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),3,2),2,10) as retardrear2,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),1,2),2,10) as retardrear3,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),3,2),2,10) as retardrear4,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),1,2),2,10) as hingestop,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),3,2),2,10) as hingework,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),1,2),2,10) as hingebrake,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),3,2),2,10) as lightfar,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),1,2),2,10) as lightnear,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),3,2),2,10) as foglightfront,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),1,2),2,10) as foglightrear,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),3,2),2,10) as lightsmall,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),1,2),2,10) as spotlightfront,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),3,2),2,10) as spotlightmiddle,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),1,2),2,10) as spotlightmiddle2,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),3,2),2,10) as spotlightrear,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),1,2),2,10) as spotlightleftfront,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),3,2),2,10) as spotlightleftmiddle,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),1,2),2,10) as spotlightleftrear,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),3,2),2,10) as spotlightrightfront,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),1,2),2,10) as spotlightrightmiddle,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),3,2),2,10) as spotlightrightrear,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),1,2),2,10) as leftlamp,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),3,2),2,10) as rightlamp,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),1,2),2,10) as turnlampleft,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),3,2),2,10) as turnlampright,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),1,2),2,10) as brakelight,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),3,2),2,10) as reverselight,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),1,2),2,10) as hornelect,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),3,2),2,10) as hornair,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),1,2),2,10) as wiperhigh,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),3,2),2,10) as wiperlow,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),1,2),2,10) as wipergap1,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),3,2),2,10) as wipergap2,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),1,2),2,10) as wipergap3,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),3,2),2,10) as wipergap4,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),1,2),2,10) as wiperpower,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),3,2),2,10) as wiper,
conv(substr(lpad(conv(substr(hex(databin),39,1),16,2),4,''0''),1,2),2,10) as wiperwheel,
conv(substr(lpad(conv(substr(hex(databin),39,1),16,2),4,''0''),3,2),2,10) as clutch,
conv(substr(lpad(conv(substr(hex(databin),40,1),16,2),4,''0''),1,2),2,10) as clutchfan,
conv(substr(lpad(conv(substr(hex(databin),40,1),16,2),4,''0''),3,2),2,10) as panelhign,
conv(substr(lpad(conv(substr(hex(databin),41,1),16,2),4,''0''),1,2),2,10) as panellow,
conv(substr(lpad(conv(substr(hex(databin),41,1),16,2),4,''0''),3,2),2,10) as panelpower,
conv(substr(lpad(conv(substr(hex(databin),42,1),16,2),4,''0''),1,2),2,10) as panelout,
conv(substr(lpad(conv(substr(hex(databin),42,1),16,2),4,''0''),3,2),2,10) as counterpower,
conv(substr(lpad(conv(substr(hex(databin),43,1),16,2),4,''0''),1,2),2,10) as obligate1,
conv(substr(lpad(conv(substr(hex(databin),43,1),16,2),4,''0''),3,2),2,10) as obligate2,
CONV(SUBSTR(HEX(databin),44,1),16,10) AS DGEAR,
lpad(conv(substr(hex(databin),39,1),16,10),2,''0'') as vehicletypeid,
conv(substr(hex(databin),40,1),16,10) as datatypeid
 from t_vehiclestateinfo1_',p_date);
        
end if;
if p_type = 2 then
  set v_viewname:=concat('v_t_vehiclestateinfo2_',p_date);
  
  set @vsql :=concat('CREATE VIEW ',v_viewname,' AS ',
    'select lpad(vehicledeviceid,16,''0'') as vehicledeviceid,time,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),1,2),2,10) as leftcabindoor,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),3,2),2,10) as rightcabindoor,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),1,2),2,10) as rearcabindoor,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),3,2),2,10) as safedoor,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),1,2),2,10) as enginestop,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),3,2),2,10) as enginemaintain,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),1,2),2,10) as enginediagnosis,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),3,2),2,10) as engineawaitstart,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),1,2),2,10) as enginediagnosisrequest,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),3,2),2,10) as alternatorcharge,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),1,2),2,10) as alternatorcharge2,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),3,2),2,10) as alternatorcharge3,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),1,2),2,10) as lubricate,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),3,2),2,10) as asr,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),1,2),2,10) as retarderoperate,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),3,2),2,10) as bridgelock,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),1,2),2,10) as wheeldifferential,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),3,2),2,10) as axisdifferential,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),1,2),2,10) as conditioncooling,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),3,2),2,10) as conditionair,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),1,2),2,10) as conditionclutch,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),3,2),2,10) as dryernotify,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),1,2),2,10) as motorpreheat,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),3,2),2,10) as lightguide,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),1,2),2,10) as lightshoulder,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),3,2),2,10) as lightreading,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),1,2),2,10) as lightticketsfront,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),3,2),2,10) as lightticketsmiddle,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),1,2),2,10) as lightticketsrear,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),3,2),2,10) as lightdaytime,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),1,2),2,10) as lightdriver,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),3,2),2,10) as cruisework,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),1,2),2,10) as cruiseset,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),3,2),2,10) as cruiseboost,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),1,2),2,10) as cruisedrop,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),3,2),2,10) as cruiserecover,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),1,2),2,10) as requestservice,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),3,2),2,10) as requeststop,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),1,2),2,10) as idlingboost,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),3,2),2,10) as idlingdrop,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),1,2),2,10) as ventilatorfrontin,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),3,2),2,10) as ventilatorfrontout,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),1,2),2,10) as ventilatormiddlein,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),3,2),2,10) as ventilatormiddleout,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),1,2),2,10) as ventilatorrearin,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),3,2),2,10) as ventilatorrearout,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),1,2),2,10) as defroster1,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),3,2),2,10) as defroster2,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),1,2),2,10) as rearviewheating,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),3,2),2,10) as radiator1,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),1,2),2,10) as radiator2,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),3,2),2,10) as heater,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),1,2),2,10) as airsuspensionup,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),3,2),2,10) as airsuspensiondown,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),1,2),2,10) as airsuspensionreset,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),3,2),2,10) as ecasheel,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),1,2),2,10) as ecasheight,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),3,2),2,10) as ecasworking,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),1,2),2,10) as lighterpower,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),3,2),2,10) as driverfan1,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),1,2),2,10) as driverfan2,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),3,2),2,10) as curtainup,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),1,2),2,10) as curtaindown,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),3,2),2,10) as powerslot,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),1,2),2,10) as powerwc,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),3,2),2,10) as powermonitor,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),1,2),2,10) as powerincarmonitor,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),3,2),2,10) as powerreceiver,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),1,2),2,10) as powercondition,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),3,2),2,10) as tvpowerfront,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),1,2),2,10) as tvpowerrear,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),3,2),2,10) as tvpackfront,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),1,2),2,10) as tvpackrear,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),3,2),2,10) as tvpopupfront,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),1,2),2,10) as tvpopuprear,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),3,2),2,10) as obligate,
lpad(conv(substr(hex(databin),39,1),16,10),2,''0'') as vehicletypeid,
conv(substr(hex(databin),40,1),16,10) as datatypeid
    FROM t_vehiclestateinfo2_',p_date);
end if;
if p_type = 3 then
  set v_viewname:=concat('v_t_vehiclestateinfo3_',p_date);
  
  set @vsql :=concat('CREATE VIEW ',v_viewname,' AS ',
    'select lpad(vehicledeviceid,16,''0'') as vehicledeviceid,time,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),1,2),2,10) as antipfront,
conv(substr(lpad(conv(substr(hex(databin),1,1),16,2),4,''0''),3,2),2,10) as antipmiddle,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),1,2),2,10) as antipmiddle2,
conv(substr(lpad(conv(substr(hex(databin),2,1),16,2),4,''0''),3,2),2,10) as antiprear,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),1,2),2,10) as antipleftfront,
conv(substr(lpad(conv(substr(hex(databin),3,1),16,2),4,''0''),3,2),2,10) as antipleftmiddle,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),1,2),2,10) as antipleftrear,
conv(substr(lpad(conv(substr(hex(databin),4,1),16,2),4,''0''),3,2),2,10) as antiprightfront,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),1,2),2,10) as antiprightmiddle,
conv(substr(lpad(conv(substr(hex(databin),5,1),16,2),4,''0''),3,2),2,10) as antiprightrear,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),1,2),2,10) as reliefrotate,
conv(substr(lpad(conv(substr(hex(databin),6,1),16,2),4,''0''),3,2),2,10) as reliefopen,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),1,2),2,10) as emecapout,
conv(substr(lpad(conv(substr(hex(databin),7,1),16,2),4,''0''),3,2),2,10) as emergencyout,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),1,2),2,10) as emecapin,
conv(substr(lpad(conv(substr(hex(databin),8,1),16,2),4,''0''),3,2),2,10) as emergencyin,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),1,2),2,10) as emecapfi,
conv(substr(lpad(conv(substr(hex(databin),9,1),16,2),4,''0''),3,2),2,10) as emergencyfi,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),1,2),2,10) as emecapfo,
conv(substr(lpad(conv(substr(hex(databin),10,1),16,2),4,''0''),3,2),2,10) as emergencyfo,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),1,2),2,10) as emecapmi,
conv(substr(lpad(conv(substr(hex(databin),11,1),16,2),4,''0''),3,2),2,10) as emergencymi,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),1,2),2,10) as emecapmo,
conv(substr(lpad(conv(substr(hex(databin),12,1),16,2),4,''0''),3,2),2,10) as emergencymo,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),1,2),2,10) as emecapm2i,
conv(substr(lpad(conv(substr(hex(databin),13,1),16,2),4,''0''),3,2),2,10) as emergencym2i,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),1,2),2,10) as emecapm2o,
conv(substr(lpad(conv(substr(hex(databin),14,1),16,2),4,''0''),3,2),2,10) as emergencym2o,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),1,2),2,10) as emecapri,
conv(substr(lpad(conv(substr(hex(databin),15,1),16,2),4,''0''),3,2),2,10) as emergencyri,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),1,2),2,10) as emecapro,
conv(substr(lpad(conv(substr(hex(databin),16,1),16,2),4,''0''),3,2),2,10) as emergencyro,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),1,2),2,10) as emecaplfi,
conv(substr(lpad(conv(substr(hex(databin),17,1),16,2),4,''0''),3,2),2,10) as emergencylfi,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),1,2),2,10) as emecaplfo,
conv(substr(lpad(conv(substr(hex(databin),18,1),16,2),4,''0''),3,2),2,10) as emergencylfo,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),1,2),2,10) as emecaplmi,
conv(substr(lpad(conv(substr(hex(databin),19,1),16,2),4,''0''),3,2),2,10) as emergencylmi,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),1,2),2,10) as emecaplmo,
conv(substr(lpad(conv(substr(hex(databin),20,1),16,2),4,''0''),3,2),2,10) as emergencylmo,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),1,2),2,10) as emecaplri,
conv(substr(lpad(conv(substr(hex(databin),21,1),16,2),4,''0''),3,2),2,10) as emergencylri,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),1,2),2,10) as emecaplro,
conv(substr(lpad(conv(substr(hex(databin),22,1),16,2),4,''0''),3,2),2,10) as emergencylro,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),1,2),2,10) as emecaprfi,
conv(substr(lpad(conv(substr(hex(databin),23,1),16,2),4,''0''),3,2),2,10) as emergencyrfi,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),1,2),2,10) as emecaprfo,
conv(substr(lpad(conv(substr(hex(databin),24,1),16,2),4,''0''),3,2),2,10) as emergencyrfo,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),1,2),2,10) as emecaprmi,
conv(substr(lpad(conv(substr(hex(databin),25,1),16,2),4,''0''),3,2),2,10) as emergencyrmi,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),1,2),2,10) as emecaprmo,
conv(substr(lpad(conv(substr(hex(databin),26,1),16,2),4,''0''),3,2),2,10) as emergencyrmo,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),1,2),2,10) as emecaprri,
conv(substr(lpad(conv(substr(hex(databin),27,1),16,2),4,''0''),3,2),2,10) as emergencyrri,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),1,2),2,10) as emecaprro,
conv(substr(lpad(conv(substr(hex(databin),28,1),16,2),4,''0''),3,2),2,10) as emergencyrro,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),1,2),2,10) as absdiagnosisrequest,
conv(substr(lpad(conv(substr(hex(databin),29,1),16,2),4,''0''),3,2),2,10) as disabledhelp,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),1,2),2,10) as ptonotify,
conv(substr(lpad(conv(substr(hex(databin),30,1),16,2),4,''0''),3,2),2,10) as ptonotifyhigh,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),1,2),2,10) as ptonotifylow,
conv(substr(lpad(conv(substr(hex(databin),31,1),16,2),4,''0''),3,2),2,10) as accelstatus,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),1,2),2,10) as conditionon,
conv(substr(lpad(conv(substr(hex(databin),32,1),16,2),4,''0''),3,2),2,10) as conditionmegpower,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),1,2),2,10) as conditionidlingboost,
conv(substr(lpad(conv(substr(hex(databin),33,1),16,2),4,''0''),3,2),2,10) as contackbuzzer,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),1,2),2,10) as lightcorridor,
conv(substr(lpad(conv(substr(hex(databin),34,1),16,2),4,''0''),3,2),2,10) as lightsterilize,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),1,2),2,10) as lightluggage,
conv(substr(lpad(conv(substr(hex(databin),35,1),16,2),4,''0''),3,2),2,10) as lightnight,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),1,2),2,10) as wheelchairout,
conv(substr(lpad(conv(substr(hex(databin),36,1),16,2),4,''0''),3,2),2,10) as wheelchairbelt,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),1,2),2,10) as safebelt,
conv(substr(lpad(conv(substr(hex(databin),37,1),16,2),4,''0''),3,2),2,10) as keyacc,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),1,2),2,10) as keyon,
conv(substr(lpad(conv(substr(hex(databin),38,1),16,2),4,''0''),3,2),2,10) as keystart,
lpad(conv(substr(hex(databin),39,1),16,10),2,''0'') as vehicletypeid,
conv(substr(hex(databin),40,1),16,10) as datatypeid
FROM t_vehiclestateinfo3_',p_date);
end if;
  -- 先删除视图
  set @dropsql :=concat('drop view if exists ',v_viewname);
  prepare stm from @dropsql;
  execute stm;
  DEALLOCATE PREPARE stm ;
  -- 创建视图
  prepare stm from @vsql;
  execute stm;
  DEALLOCATE PREPARE stm ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_day_partition_management
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_day_partition_management`;
delimiter ;;
CREATE PROCEDURE `p_day_partition_management`(IN p_tableName varchar(64),
                                                                   IN delete_before_this_time date,
                                                                   IN p_delete tinyint(1))
BEGIN
  /*******************************************************
     -- 功能：管理按天分区的表
     -- Author: heli at 2016/06/07
     -- 1、delete_before_this_time: 删除小于（不包括等于）此时间之前的分区数据
     -- 2、p_delete：是否删除历史分区
     -- 每次执行改脚本时，都会判断处理1、2两步
  ********************************************************/



  declare v_max_parttime date;-- 表当前最大分区时间戳
  declare v_today date;-- 今天
  declare v_current_month date;-- 当前月份
  declare v_next_2month_firstday date;-- 下个月第一天
	declare v_next_day date;-- 明天
  declare v_last_month date;
  declare v_two_month_ago date;
  declare v_starttime datetime;
  declare v_sql varchar(20000);
  declare v_event_name varchar(200);
  declare log_delete_partition varchar(20000) default 'SQL:  ';

  DECLARE t_error INTEGER DEFAULT 0;    
   

  declare v_cur cursor for
    select concat('alter table ', table_name, ' drop PARTITION ', partition_name)
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName
      and partition_description
      and partition_description < unix_timestamp(delete_before_this_time + interval 1 day );

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET t_error=1;    
  declare continue handler for not found set @done = true;
set autocommit = 0;   -- 设置为不自动提交
START TRANSACTION;    -- 开启事务

  label01:
  begin
    -- 初始化参数
    set v_today := current_date();
    set v_current_month := adddate(curdate(), interval 1 - dayofmonth(curdate()) day);
    set v_next_2month_firstday := adddate(v_current_month, interval 3 month);
    set v_next_day := adddate(curdate(), interval 3 DAY);
    set v_last_month := adddate(v_current_month, interval -1 month);
    set v_two_month_ago := adddate(v_current_month, interval -2 month);
    -- 获取当前表分区信息
    select cast(from_unixtime(max(partition_description)) as date) into v_max_parttime
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName;

    if v_max_parttime is null then
      -- 表不存在则退出
      select concat('table[', p_tableName, '] partitions info not exists!!') msg;
      leave label01;
    end if;

    -- --------------------------------------------------------
    label02:
    begin

      if v_max_parttime >= v_next_day then
         select v_max_parttime,v_next_day;
        -- 分区已经存在，不需要增加了
        leave label02;
      end if;

      -- 增加分区

      set @part_value := adddate(v_max_parttime, interval 1 day);

      select v_max_parttime, adddate(v_max_parttime, interval 1 day),  concat('p_', date_format(adddate(@part_value, interval -1 day), '%Y%m%d'));
      while @part_value <= v_next_day do
      set @new_parti_name := concat('p_', date_format(adddate(@part_value, interval -1 day), '%Y%m%d'));
      set @add_parti_sql := concat('alter table ', p_tableName, ' add partition(partition ', @new_parti_name,
                                   ' VALUES LESS THAN (', unix_timestamp(@part_value), '))');
      prepare stmt from @add_parti_sql;
      execute stmt;
      deallocate prepare stmt;

      set @part_value := adddate(@part_value, interval 1 day);
      end while;

    end label02;

    -- ------------------------------------------------------------
    if p_delete then
      set v_starttime := now();
      set v_event_name := concat('p_manage_all_day_partition_tables_', p_tableName);
      insert into maintain_events_log(eventName, startTime, finishTime)
      values (v_event_name, v_starttime, null);

      -- 删除分区
      open v_cur;
      set @done = false;
      fetch v_cur into v_sql;
      while not @done do
      set log_delete_partition := concat(log_delete_partition, v_sql, ';  ');
      set @v_sql := v_sql;
      prepare stmt from @v_sql;
      execute stmt;
      deallocate prepare stmt;
      fetch v_cur into v_sql;
      end while;
      close v_cur;

      update maintain_events_log set finishTime = now() , comments = log_delete_partition where eventName = v_event_name and startTime = v_starttime;
   end if; 
  end label01;

-- 如果出现异常回滚，否则继续
 IF t_error = 1 THEN    
    ROLLBACK;    
    ELSE    
   COMMIT;    
 END IF; 

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_day_partition_management_bak
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_day_partition_management_bak`;
delimiter ;;
CREATE PROCEDURE `p_day_partition_management_bak`(IN p_tableName varchar(64),
                                                                   IN delete_before_this_time date,
                                                                   IN p_delete tinyint(1))
BEGIN
  /*******************************************************
     -- 功能：管理按天分区的表
     -- Author: heli at 2016/06/07
     -- 1、delete_before_this_time: 删除小于（不包括等于）此时间之前的分区数据
     -- 2、p_delete：是否删除历史分区
     -- 每次执行改脚本时，都会判断处理1、2两步
  ********************************************************/

  declare v_max_parttime date;-- 表当前最大分区时间戳
  declare v_today date;-- 今天
  declare v_current_month date;-- 当前月份
  declare v_next_2month_firstday date;-- 下个月第一天
	declare v_next_day date;-- 明天
  declare v_last_month date;
  declare v_two_month_ago date;
  declare v_starttime datetime;
  declare v_sql varchar(20000);
  declare v_event_name varchar(200);
  declare log_delete_partition varchar(20000) default 'SQL:  ';
  declare v_cur cursor for
    select concat('alter table ', table_name, ' drop PARTITION ', partition_name)
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName
      and partition_description
      and partition_description < unix_timestamp(delete_before_this_time + interval 1 day );
  declare continue handler for not found set @done = true;

  label01:
  begin
    -- 初始化参数
    set v_today := current_date();
    set v_current_month := adddate(curdate(), interval 1 - dayofmonth(curdate()) day);
    set v_next_2month_firstday := adddate(v_current_month, interval 3 month);
    set v_next_day := adddate(curdate(), interval 2 DAY);
    set v_last_month := adddate(v_current_month, interval -1 month);
    set v_two_month_ago := adddate(v_current_month, interval -2 month);
    -- 获取当前表分区信息
    select cast(from_unixtime(max(partition_description)) as date) into v_max_parttime
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName;

    if v_max_parttime is null then
      -- 表不存在则退出
      select concat('table[', p_tableName, '] partitions info not exists!!') msg;
      leave label01;
    end if;

    -- --------------------------------------------------------
    label02:
    begin
	
			-- 获取最大分区下一天时间 '2020-01-03'
      set @part_value := adddate(v_max_parttime, interval 1 day);
			-- 每张表只留四个分区，昨天，今天，明天和默认
			set @yesterDay :=adddate(curdate(), interval - 1 DAY);
			set @tomorrow :=adddate(curdate(), interval 1 DAY);
			set @tomorrow_time :=adddate(curdate(), interval 2 DAY);
			
			set @yesterDay_parti_name :=concat('p_', date_format(@yesterDay, '%Y%m%d'));
			set @toDay_parti_name:=concat('p_', date_format(curdate(), '%Y%m%d'));
			set @tomorrow_parti_name:=concat('p_', date_format(@tomorrow, '%Y%m%d'));
		  set @add_parti_sql := concat('alter table ',p_tableName,' PARTITION BY RANGE (unix_timestamp(time))(PARTITION ',@yesterDay_parti_name,' VALUES LESS THAN (',unix_timestamp(curdate()),'),',
																   'PARTITION ',@toDay_parti_name,' VALUES LESS THAN (',unix_timestamp(@tomorrow),'),',
																   'PARTITION ',@tomorrow_parti_name,' VALUES LESS THAN (',unix_timestamp(@tomorrow_time),'),PARTITION pdefault VALUES LESS THAN MAXVALUE)');
			prepare stmt from @add_parti_sql;
      execute stmt;
		  deallocate prepare stmt;
			set v_starttime := now();
      set v_event_name := concat('p_manage_all_day_partition_tables_', p_tableName);
			insert into maintain_events_log(eventName, startTime, finishTime)
      values (v_event_name, v_starttime, null);
      update maintain_events_log set finishTime = now() , comments = '1' where eventName = v_event_name and startTime = v_starttime;
    end label02;

    -- ------------------------------------------------------------
    if p_delete then
      set v_starttime := now();
      set v_event_name := concat('p_manage_all_day_partition_tables_', p_tableName);
      insert into maintain_events_log(eventName, startTime, finishTime)
      values (v_event_name, v_starttime, null);

      -- 删除分区
      open v_cur;
      set @done = false;
      fetch v_cur into v_sql;
      while not @done do
      set log_delete_partition := concat(log_delete_partition, v_sql, ';  ');
      set @v_sql := v_sql;
      prepare stmt from @v_sql;
      execute stmt;
      deallocate prepare stmt;
      fetch v_cur into v_sql;
      end while;
      close v_cur;

      update maintain_events_log set finishTime = now() , comments = log_delete_partition where eventName = v_event_name and startTime = v_starttime;
   end if; 
  end label01;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_day_partition_management_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_day_partition_management_old`;
delimiter ;;
CREATE PROCEDURE `p_day_partition_management_old`(IN p_tableName varchar(64),
                                                                   IN delete_before_this_time date,
                                                                   IN p_delete tinyint(1))
BEGIN
  /*******************************************************
     -- 功能：管理按天分区的表
     -- Author: heli at 2016/06/07
     -- 1、delete_before_this_time: 删除小于（不包括等于）此时间之前的分区数据
     -- 2、p_delete：是否删除历史分区
     -- 每次执行改脚本时，都会判断处理1、2两步
  ********************************************************/

  declare v_max_parttime date;-- 表当前最大分区时间戳
  declare v_today date;-- 今天
  declare v_current_month date;-- 当前月份
  declare v_next_2month_firstday date;-- 下个月第一天
  declare v_last_month date;
  declare v_two_month_ago date;
  declare v_starttime datetime;
  declare v_sql varchar(20000);
  declare v_event_name varchar(200);
  declare log_delete_partition varchar(20000) default 'SQL:  ';
  declare v_cur cursor for
    select concat('alter table ', table_name, ' drop PARTITION ', partition_name)
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName
      and partition_description
      and partition_description < unix_timestamp(delete_before_this_time + interval 1 day );
  declare continue handler for not found set @done = true;

  label01:
  begin
    -- 初始化参数
    set v_today := current_date();
    set v_current_month := adddate(curdate(), interval 1 - dayofmonth(curdate()) day);
    set v_next_2month_firstday := adddate(v_current_month, interval 2 month);
    set v_last_month := adddate(v_current_month, interval -1 month);
    set v_two_month_ago := adddate(v_current_month, interval -2 month);
    -- 获取当前表分区信息
    select cast(from_unixtime(max(partition_description)) as date) into v_max_parttime
    from information_schema.partitions a
    where a.table_schema = database()
      and a.table_name = p_tableName;

    if v_max_parttime is null then
      -- 表不存在则退出
      select concat('table[', p_tableName, '] partitions info not exists!!') msg;
      leave label01;
    end if;

    -- --------------------------------------------------------
    label02:
    begin

      if v_max_parttime >= v_next_2month_firstday then
         select v_max_parttime,v_next_2month_firstday;
        -- 分区已经存在，不需要增加了
        leave label02;
      end if;

      -- 增加分区

      set @part_value := adddate(v_max_parttime, interval 1 day);

      select v_max_parttime, adddate(v_max_parttime, interval 1 day),  concat('p_', date_format(adddate(@part_value, interval -1 day), '%Y%m%d'));
      while @part_value <= v_next_2month_firstday do
      set @new_parti_name := concat('p_', date_format(adddate(@part_value, interval -1 day), '%Y%m%d'));
      set @add_parti_sql := concat('alter table ', p_tableName, ' add partition(partition ', @new_parti_name,
                                   ' VALUES LESS THAN (', unix_timestamp(@part_value), '))');
      prepare stmt from @add_parti_sql;
      execute stmt;
      deallocate prepare stmt;

      set @part_value := adddate(@part_value, interval 1 day);
      end while;

    end label02;

    -- ------------------------------------------------------------
    if p_delete then
      set v_starttime := now();
      set v_event_name := concat('p_manage_all_day_partition_tables_', p_tableName);
      insert into maintain_events_log(eventName, startTime, finishTime)
      values (v_event_name, v_starttime, null);

      -- 删除分区
      open v_cur;
      set @done = false;
      fetch v_cur into v_sql;
      while not @done do
      set log_delete_partition := concat(log_delete_partition, v_sql, ';  ');
      set @v_sql := v_sql;
      prepare stmt from @v_sql;
      execute stmt;
      deallocate prepare stmt;
      fetch v_cur into v_sql;
      end while;
      close v_cur;

      update maintain_events_log set finishTime = now() , comments = log_delete_partition where eventName = v_event_name and startTime = v_starttime;
    end if;
  end label01;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_delete_default_alarm_level_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_delete_default_alarm_level_setting`;
delimiter ;;
CREATE PROCEDURE `p_delete_default_alarm_level_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN
    delete  from t_alarmlevelinfo where deptId = p_comany_dept_id;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_delete_default_driving_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_delete_default_driving_setting`;
delimiter ;;
CREATE PROCEDURE `p_delete_default_driving_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN
    delete  from stat_drivingconfig where dept_id = p_comany_dept_id;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_delete_default_remind_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_delete_default_remind_setting`;
delimiter ;;
CREATE PROCEDURE `p_delete_default_remind_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN
    delete  from t_vehicleremindconfig where companyDeptId = p_comany_dept_id;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_delete_deviceid_yue_detail
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_delete_deviceid_yue_detail`;
delimiter ;;
CREATE PROCEDURE `p_delete_deviceid_yue_detail`(pre_deviceid varchar(20))
BEGIN
 DELETE from  t_alarmsummary WHERE deviceId = pre_deviceid ;
 DELETE from  terminal_app where device_id=pre_deviceid;
 DELETE from  driver_attendance WHERE deviceId = pre_deviceid ;
 DELETE from  last_vehicle_miles WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_api_data WHERE deviceid = pre_deviceid ;
 DELETE from  stat_battery_analyse_voltandtemp_day WHERE DeviceId = pre_deviceid ;
 DELETE from  stat_battery_analyse_voltandtemp_hour WHERE DeviceId = pre_deviceid ;
 DELETE from  stat_battery_analyse_voltandtemp_month WHERE DeviceId = pre_deviceid ;
 DELETE from  stat_driving_violation_detail WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_driving_violation_detail_java WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_driving_violation_summary WHERE deviceId = pre_deviceid ;
 DELETE from  stat_energy_compare WHERE deviceId = pre_deviceid ;
 DELETE from  stat_energy_saving_detail WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_energy_saving_summary WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_energy_saving_summary_day WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_speed_analyse WHERE DeviceId = pre_deviceid ;
 DELETE from  stat_speed_analyse_forhour WHERE DeviceId = pre_deviceid ;
 DELETE from  stat_statealarm_summary_tmp WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  stat_vehicle_status WHERE deviceId = pre_deviceid ;
 DELETE from  stat_vehicle_totalinfo WHERE deviceId = pre_deviceid ;
 DELETE from  stat_vehicleenergy WHERE deviceId = pre_deviceid ;
 DELETE from  t_alarmsummary_unfinished WHERE deviceId = pre_deviceid ;
 DELETE from  t_datamonitor WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  t_outlinedates WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  t_vehicle_current_postion WHERE vehicleDeviceId = pre_deviceid ;
 DELETE from  t_vehicle_monitor_info WHERE deviceid = pre_deviceid ;
--  DELETE from  t_vehicleinfo where deviceId = pre_deviceid ;
 DELETE from  t_vehiclemiles WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp1 WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_analoginfo WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_config WHERE deviceId = pre_deviceid ;
 DELETE from  temp_electric02 WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_electricstate WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_state1 WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_state2 WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  temp_state3 WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  test WHERE vehicledeviceid = pre_deviceid ;
 DELETE from  tmp_alarm01 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_alarm02 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_alarm03 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_alarm04 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_alarm2 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_alarm3 WHERE deviceId = pre_deviceid ;
 DELETE from  tmp_driver_attendance WHERE deviceid = pre_deviceid ;
 DELETE from  tmp_gps WHERE vehicledeviceid = pre_deviceid ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_del_terminal_log
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_del_terminal_log`;
delimiter ;;
CREATE PROCEDURE `p_del_terminal_log`()
begin 
  create table terminal_app_state_log_bak like terminal_app_state_log;
  drop table terminal_app_state_log;
  rename table terminal_app_state_log_bak to terminal_app_state_log;


  create table terminal_app_activity_log_bak like terminal_app_activity_log;
  drop table terminal_app_activity_log;
  rename table terminal_app_activity_log_bak to terminal_app_activity_log;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_driver_analyse_count_by_day
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_driver_analyse_count_by_day`;
delimiter ;;
CREATE PROCEDURE `p_driver_analyse_count_by_day`(IN `p_date` date)
  COMMENT '按天生成驾驶员违规日统计表'
BEGIN
  -- 创建：zhangzhufu 2019.04.04
  -- 驾驶员违规日汇总 

  DECLARE v_startTime TIMESTAMP ; 
  SET v_startTime:=current_timestamp() ;
	#防止重复，执行前清除原有当日记录
	DELETE FROM stat_driving_violation_day WHERE stat_date= p_date;
	
  INSERT INTO stat_driving_violation_day(
			driverId,driverName,deviceid,lineId,lineName,
      groupId,groupName,subCompanyId,subCompanyName,
			companyId,companyName,stat_date,month,actiontype,
			actionTypeDesc,totalNum,scores,total_seconds)
  SELECT t.driverId,t.driverName,t.deviceid,t2.lineDeptId,t2.lineName,
   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,
	 t2.companyDeptId,t2.companyName,t.stat_date,MONTH(t.stat_date),
   t.actiontype,t.actionTypeDesc,cnt as times,t.scores,total_seconds
  from (
    select a.stat_date,a.vehicledeviceid as deviceid,actiontype,actionTypeDesc,sum(score) as scores,count(1) as cnt,
    -- 超速时长 和 夜间行驶是计算时长的 
    case when actionType in ('overspeed','driveInNight') then sum(timestampdiff(second,begin_time,end_time)) else 0 end as total_seconds,
	max(driverId) as driverid,max(driverName) as drivername,lineDeptId
	from stat_driving_violation_detail a 
    where a.stat_date = p_date
    and ifnull(driverName,'')<>''
    group by a.vehicledeviceid,lineDeptId,actiontype,actionTypeDesc,driverId ) t
  inner join v_lineInfo t2 on t.lineDeptId=t2.linedeptid ;

  -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime,comments)values('p_driver_analyse_count_by_day',v_startTime,now(),CONCAT('驾驶员违规日汇总',p_date));
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_driver_analysis_by_day
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_driver_analysis_by_day`;
delimiter ;;
CREATE PROCEDURE `p_driver_analysis_by_day`(IN p_date DATE)
BEGIN
    declare v_startTime timestamp ;
    declare v_logid int;
    set v_startTime:=current_timestamp() ;
  -- 按天统计司机驾驶违规行为
  -- 输入日期 ： 2016-06-01
   SET SQL_SAFE_UPDATES=0;
   -- 记录日志
	insert into maintain_events_log(eventName,startTime,finishTime)
    values('p_driver_analysis_by_day',v_startTime,null);
    select max(id) into v_logid from maintain_events_log;
    -- 统计当天
    call p_stat_ChaoChangDaiSu_byDay(p_date);
    -- call p_stat_ChaoSu_byDay(p_date);
    call p_stat_DaiSuKongTiao_byDay(p_date);
    call p_stat_FaDongJiChaoZhuan_ByDay(p_date);
    -- call p_stat_JiJiaSu_byDay(p_date);
    -- call p_stat_JiShaChe_byDay(p_date);
    call p_stat_KongDangHuaXing_byDay(p_date);
    -- 2016-12-29 要求去掉疲劳驾驶的统计
    -- call p_stat_PiLaoJiaShi_ByDay(p_date);
    call p_stat_QiBuBuGuanCheMen_byDay(p_date);
    call p_stat_QiBuJiJiaSu_byDay(p_date);
    call p_stat_QiDongWuShaChe_byDay(p_date);
    call p_stat_WeiTingWenKaiCheMen_byDay(p_date);
    call p_stat_XiHuoHuaXing_byDay(p_date);
    call p_stat_YeJianBuKaiDaDeng_ByDay(p_date);
    call p_stat_YeJianXingShi_ByDay(p_date);
    
   --    CALL p_makefakeeneger_day(p_date);  -- 造数据
  -- 关联司机
   call p_update_driver_violation(p_date);
   -- 添加 黑点区域统计  2018年9月22日 by 韩亚璋
 --  call p_stat_blankZone_byDay(p_date);  由java 执行
  -- 违规汇总到月
 /*   call p_driver_analysis_by_month(p_date);
    -- 车速统计
    call p_stat_vehicle_speed(p_date);
  -- 扣分排名
    call p_stat_driver_rank(p_date);*/
  -- api接口数据统计
  -- 记录日志
    update maintain_events_log set finishTime=now() where id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_driver_analysis_by_day_sum
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_driver_analysis_by_day_sum`;
delimiter ;;
CREATE PROCEDURE `p_driver_analysis_by_day_sum`(IN p_date DATE)
BEGIN
    declare v_startTime timestamp ;
    declare v_logid int;
    set v_startTime:=current_timestamp() ;
  -- 按天统计司机驾驶违规行为
  -- 输入日期 ： 2016-06-01
   SET SQL_SAFE_UPDATES=0;
   -- 记录日志
	insert into maintain_events_log(eventName,startTime,finishTime)
    values('p_driver_analysis_by_day_sum',v_startTime,null);
    select max(id) into v_logid from maintain_events_log where eventName='p_driver_analysis_by_day_sum';
 /*   -- 统计当天
    call p_stat_ChaoChangDaiSu_byDay(p_date);
    -- call p_stat_ChaoSu_byDay(p_date);
    call p_stat_DaiSuKongTiao_byDay(p_date);
    call p_stat_FaDongJiChaoZhuan_ByDay(p_date);
    call p_stat_JiJiaSu_byDay(p_date);
    -- call p_stat_JiShaChe_byDay(p_date);
    call p_stat_KongDangHuaXing_byDay(p_date);
    -- 2016-12-29 要求去掉疲劳驾驶的统计
    -- call p_stat_PiLaoJiaShi_ByDay(p_date);
    call p_stat_QiBuBuGuanCheMen_byDay(p_date);
    call p_stat_QiBuJiJiaSu_byDay(p_date);
    call p_stat_QiDongWuShaChe_byDay(p_date);
    call p_stat_WeiTingWenKaiCheMen_byDay(p_date);
    call p_stat_XiHuoHuaXing_byDay(p_date);
    call p_stat_YeJianBuKaiDaDeng_ByDay(p_date);
    call p_stat_YeJianXingShi_ByDay(p_date);
    
      CALL p_makefakeeneger_day(p_date);  -- 造数据
  -- 关联司机
   call p_update_driver_violation(p_date); */
   -- 添加 黑点区域统计  2018年9月22日 by 韩亚璋
 --  call p_stat_blankZone_byDay(p_date);  由java 执行
  -- 违规汇总到月
  --   call p_driver_analysis_by_month(p_date);
    CALL p_stat_driveranalyses_with_statdate(p_date);  -- 添加了 统计时间
    -- 车速统计
    call p_stat_vehicle_speed(p_date);
   call p_stat_vehicle_speed_forhour(p_date);
  -- 扣分排名
    call p_stat_driver_rank(p_date);
  -- api接口数据统计
  -- 记录日志
    update maintain_events_log set finishTime=now() where id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_driver_analysis_by_month
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_driver_analysis_by_month`;
delimiter ;;
CREATE PROCEDURE `p_driver_analysis_by_month`(p_date date)
BEGIN
  -- 更新：sohay 2017.03.30
  -- 违规汇总到月 
  delete from stat_driving_violation_summary where stat_date=p_date-interval day(p_date)-1 day;
  
  insert into stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,month,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
  select t.driverId,t.driverName,t.deviceid,t2.lineDeptId,t2.lineName,
   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
   t2.companyName,p_date - interval day(p_date)-1 day as stat_date,month(p_date),
   t.actiontype,t.actionTypeDesc,cnt as times,t.scores,total_seconds
  from (
    select a.vehicledeviceid as deviceid,actiontype,actionTypeDesc,sum(score) as scores,count(1) as cnt,
    -- 超速时长 和 夜间行驶是计算时长的 
    case when actionType in ('overspeed','driveInNight') then sum(timestampdiff(second,begin_time,end_time)) else 0 end as total_seconds,
	max(driverId) as driverid,max(driverName) as drivername,lineDeptId
	from stat_driving_violation_detail a 
    /* inner join driver_attendance t1 
     on a.vehicledeviceid=t1.deviceid 
     and t1.signIntime >= a.stat_date and t1.signIntime < a.stat_date+interval 1 day */
    where a.stat_date >= p_date - interval day(p_date)-1 day
    and a.stat_date < last_day(p_date)+interval 1 day
    and ifnull(driverName,'')<>''
    group by a.vehicledeviceid,lineDeptId,actiontype,actionTypeDesc ) t
  inner join v_lineInfo t2 on t.lineDeptId=t2.linedeptid ;
  
  -- 没有违规就插入一条为0的记录 
  insert into stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,month,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
  select t1.driverId,t1.driverName,null,t2.lineDeptId,t2.lineName,
    t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
    t2.companyName,p_date - interval day(p_date)-1 day as stat_date,month(p_date),
    'overspeed','超速',0 as times,0,0
  from (
    select distinct driverid,driverName,linedeptid from driver_attendance a
    where 
    -- signInTime>=p_date - interval day(p_date)-1 day 
    -- and signInTime<last_day(p_date)+interval 1 day and 
    -- 孙天恒 2017/09/25 修改，由于司机考勤方式改变，表中签到时间停留在4月，因此去掉该条件
    not exists(select 1 from stat_driving_violation_summary b
       where b.driverid=a.driverId and b.stat_date>=p_date - interval day(p_date)-1 day
       and b.stat_date<last_day(p_date)+interval 1 day ) ) t1
  inner join v_lineinfo t2 on t1.linedeptid=t2.linedeptid ;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_driver_analysis_by_timerange
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_driver_analysis_by_timerange`;
delimiter ;;
CREATE PROCEDURE `p_driver_analysis_by_timerange`(p_start date,p_end date)
BEGIN
  -- 统计一个时间段的驾驶行为，用于初始化数据或重新计算
  declare v_day date;
  
  set v_day:=p_start;
  
  while v_day<=p_end do
    call p_driver_analyse_count_by_day(v_day);
		set v_day:=v_day+1;
  end while;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_drop_driver_cascade
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_drop_driver_cascade`;
delimiter ;;
CREATE PROCEDURE `p_drop_driver_cascade`(p_driverId int)
BEGIN
   #p_driverId 司机ID
   # p_deviceId 车载设备ID
   # p_vehicleNo 车牌号
delete from driver_attendance where driverId=p_driverId;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_drop_vehicle_cascade
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_drop_vehicle_cascade`;
delimiter ;;
CREATE PROCEDURE `p_drop_vehicle_cascade`(IN p_deviceId VARCHAR(32), IN p_vehicleNo VARCHAR(32), IN p_vehicleId INT)
BEGIN
   #p_vehicleId 车辆ID
   # p_deviceId 车载设备ID
   # p_vehicleNo 车牌号
delete from stat_driving_violation_detail where vehicledeviceid=p_deviceId;
delete from stat_driving_violation_summary where deviceId=p_deviceId;
delete from stat_energy_saving_detail where vehicledeviceid=p_deviceId;
delete from stat_energy_saving_summary where vehicleNo=p_vehicleNo;
delete from stat_speed_analyse where deviceId=p_deviceId;
delete from stat_vehicle_status where vehicleNo=p_vehicleNo;
delete from stat_vehicle_totalinfo where vehicleNo=p_vehicleNo;
delete from stat_vehicleenergy where deviceId=p_deviceId;
delete from t_alarmsummary where deviceId=p_deviceId;
delete from t_departplan where vehicleid=p_vehicleId;
delete from t_energyinfo where vehicleNo=p_vehicleNo;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_energy
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_energy`;
delimiter ;;
CREATE PROCEDURE `p_energy`(p_date date)
BEGIN
    
DECLARE v_logid INT;
INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('p_energy',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_energy'; 
  
-- 去除异常数据
 DELETE FROM stat_energy_saving_detail WHERE stat_date = p_date ;
 
-- 统计类型1
  INSERT INTO stat_energy_saving_detail(vehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds,speed)
  SELECT vehicledeviceid,'idleTime','怠速时长',MIN(begintime),MAX(endtime),p_date,TIMESTAMPDIFF(SECOND,MIN(begintime),MAX(endtime)),NULL FROM(
     SELECT a.vehicledeviceid,MIN(a.time)AS begintime,MAX(a.time)AS endtime
     FROM t_vehicleanaloginfo a 
     WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY AND a.engine BETWEEN 500 AND 700  GROUP BY vehicledeviceid,ENGINE ORDER BY vehicledeviceid
  )t GROUP BY vehicledeviceid ORDER BY NULL;
 
-- 统计类型2
  INSERT INTO stat_energy_saving_detail(vehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
  SELECT a.vehicledeviceid,'runTime','运行时长',MIN(a.time),MAX(a.time),p_date,TIMESTAMPDIFF(SECOND,MIN(TIME),MAX(TIME))
  FROM t_vehicleanaloginfo a 
  WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY  GROUP BY vehicledeviceid ORDER BY vehicledeviceid;
 
 
 
 -- 统计类型3
  INSERT INTO stat_energy_saving_detail(vehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
  SELECT vehicledeviceid,'efficientSpeedTime','经济车速时长',MIN(begintime),MAX(endtime),p_date,TIMESTAMPDIFF(SECOND,MIN(begintime),MAX(endtime)) FROM(
     SELECT a.vehicledeviceid,MIN(a.time)AS begintime,MAX(a.time)AS endtime
     FROM t_vehicleanaloginfo a 
     WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY AND a.engine BETWEEN 1200 AND 1800  GROUP BY vehicledeviceid,ENGINE ORDER BY vehicledeviceid
  )t GROUP BY vehicledeviceid ORDER BY NULL;
  
  
 -- 统计类型4
  INSERT INTO stat_energy_saving_detail(vehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
  SELECT vehicledeviceid,'engineOverRun','发动机超转',MIN(begintime),MAX(endtime),p_date,TIMESTAMPDIFF(SECOND,MIN(begintime),MAX(endtime)) FROM(
     SELECT a.vehicledeviceid,MIN(a.time)AS begintime,MAX(a.time)AS endtime
     FROM t_vehicleanaloginfo a 
     WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY AND a.engine>=2500 GROUP BY vehicledeviceid,ENGINE ORDER BY vehicledeviceid
  )t GROUP BY vehicledeviceid ORDER BY NULL;
  
  
  -- 统计类型5：加热器开启时长，需要字段未上传有效数据，已从数据库删除，不再进行统计； 
  
  
-- 统计类型6,改由存储过程p_conditiontime进行按小时统计   2020-08-14
--  INSERT INTO stat_energy_saving_detail(vehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
--  SELECT vehicledeviceid,'conditionTime' ,'空调开启时长',MIN(begintime),MAX(endtime),p_date,TIMESTAMPDIFF(SECOND,MIN(begintime),MAX(endtime)) FROM (
--     SELECT a.vehicledeviceid,MIN(a.time) AS begintime,MAX(a.time) AS endtime 
--     FROM t_vehiclestateinfo2 a 
--     WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY AND a.conditioneron  ='1' group by vehicledeviceid,conditioneron
--  )t GROUP BY vehicledeviceid ORDER BY NULL;
 
 UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
 
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_energy_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_energy_old`;
delimiter ;;
CREATE PROCEDURE `p_energy_old`(p_date date)
BEGIN
	#Routine body goes here...
-- 定义变量存储游标值
declare deviceid varchar(16);
declare done int default 0;
-- 定义游标
DECLARE mc CURSOR FOR SELECT DISTINCT(a.vehicledeviceid) AS vehicledeviceid FROM t_vehicleanaloginfo a WHERE a.time>=p_date AND a.time<adddate(p_date,INTERVAL 1 DAY);
-- 游标中的内容执行完后将done设置为1  
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=1;
 DELETE FROM stat_energy_saving_detail
 WHERE stat_date = p_date AND TYPE = 'idleTime' ;
 delete from stat_energy_saving_detail 
 where stat_date=p_date and type='runTime';
 DELETE FROM stat_energy_saving_detail
 WHERE stat_date = p_date AND TYPE = 'heaterTime' ;
 delete from stat_energy_saving_detail 
 where stat_date=p_date and type='efficientSpeedTime';
  DELETE FROM stat_energy_saving_detail
  WHERE stat_date = p_date AND TYPE = 'engineOverRun' ;
  delete from stat_energy_saving_detail 
  where stat_date=p_date and type='conditionTime';
open mc;  
-- 执行循环  
	posLoop:LOOP  
-- 判断是否结束循环  
  IF done=1 THEN    
      LEAVE posLoop;  
  END IF;   
-- 取游标中的值  
	FETCH mc INTO deviceid;
	
  DROP TABLE IF EXISTS tmp;
  DROP TABLE IF EXISTS tmp2;
  -- 创建临时表
	CREATE TABLE tmp AS  
	(SELECT * from t_vehicleanaloginfo a where a.vehicledeviceid=deviceid and a.time>=p_date and a.time<adddate(p_date,interval 1 day));  
 
  -- 创建临时表
	CREATE TABLE tmp2 AS  
	(SELECT * from t_vehiclestateinfo2 a where a.vehicledeviceid=deviceid and a.time>=p_date and a.time<adddate(p_date,interval 1 day)); 
 
	-- 从临时表中统计数据
	-- 统计类型1
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'idleTime','怠速时长',
    min(a.time),max(a.time),p_date,count(1),null
  from tmp a 
  where a.engine between 500 and 700;
	-- 统计类型2
	insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  select a.VEHICLEDEVICEID,'runTime','运行时长',
    min(a.time),max(a.time),p_date,count(1)
  from tmp a 
  where a.engine >0 OR a.speed>0;
	-- 统计类型3
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'efficientSpeedTime','经济车速时长',
    min(a.time),max(a.time),p_date,count(1),avg(a.speed)
  from tmp a 
  where a.engine between 1200 and 1800;
-- 统计类型4
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'engineOverRun','发动机超转',
    min(a.time),max(a.time),p_date,count(1),null
  from tmp a 
  where a.engine >=2500;
  -- 统计类型5
	INSERT INTO stat_energy_saving_detail (VehicleDeviceID,TYPE,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  SELECT a.VEHICLEDEVICEID,'heaterTime','加热器开启时长',
     min(a.time),max(a.time),p_date,count(1)
  FROM tmp2 a
  WHERE a.heater = '1' ;
  -- 统计类型6
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
	select VEHICLEDEVICEID,conditionTime,type,minTime,maxTime,state,number from (
  select a.VEHICLEDEVICEID,'conditionTime' as conditionTime,'空调开启时长' as type,
     min(a.time) as minTime,max(a.time) as maxTime ,p_date as state ,count(1) as number,DATE_FORMAT(time,'%Y%m%d%H') hours
  from tmp2 a 
  where a.conditioneron  ='1'
  group by a.vehicledeviceid,hours) as b;
  END LOOP posLoop;  
-- 释放游标  
CLOSE mc;  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_get_api_data
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_get_api_data`;
delimiter ;;
CREATE PROCEDURE `p_get_api_data`(p_date date)
BEGIN
declare v_logid int;
insert into maintain_events_log(eventName,startTime,finishTime)
values('p_get_api_data',now(),null);
select max(id) into v_logid from maintain_events_log;
    
delete from stat_api_data where stat_date=p_date;
insert into stat_api_data(deviceid,type,value,stat_date)
select vehicledeviceid,r,
  case r when 1 then m when 2 then o else g end,
  p_date
from (
select vehicledeviceid,ifnull(max(mileage),0) as m,
   ifnull(max(totalfuelcost)-min(totalfuelcost),0) as o,
   ifnull(max(totalgasuse)-min(totalgasuse),0) as g 
from t_vehicleanaloginfo 
where time >=p_date and time<p_date+interval 1 day
and mileage<400000
and ifnull(totalfuelcost,0)<100000 #过滤异常数据 
and ifnull(totalgasuse,0)<100000
group by vehicledeviceid )t1 inner join (select 1 r union all select 2 union all select 3) t2;
insert into stat_api_data(deviceid,type,value,stat_date)
select vehicledeviceid,4,ifnull(max(consumeperday)-min(consumeperday),0) as e,p_date 
from t_electricvehicleana 
 where time >=p_date and time<p_date+interval 1 day
 and ifnull(consumeperday,0)<100000
 group by vehicledeviceid;
 
 -- 车辆故障次数
 insert into stat_api_data(deviceid,type,value,stat_date)
 select deviceId,5,count(*),p_date from t_vehiclealarminfo 
 where (not (alarmTypeId regexp '^1+$'))
 -- and dismissTime is null
 and alarmtime>=p_date and alarmtime<p_date+interval 1 day
 group by deviceId;
 
update maintain_events_log set finishTime=now() where id=v_logid;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_get_vehicle_status
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_get_vehicle_status`;
delimiter ;;
CREATE PROCEDURE `p_get_vehicle_status`()
BEGIN
#20190522添加保证数据一致
#DECLARE t_error INTEGER DEFAULT 0;  
#DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET t_error=1; 

    DROP TABLE IF EXISTS tmp;
    CREATE TEMPORARY TABLE tmp AS
      SELECT *
      FROM stat_vehicle_status
      WHERE 1 = 2;
    INSERT INTO tmp
      SELECT
        v1.vehicleNo,
	c.driverName,
        v3.lineName,
        v3.groupName,
        v3.subCompanyName,
        v3.companyName,
        null as gpsx,
        null as gpsy,
        v1.`online`,
        v1.`status`,
        v1.isReparing,
        v1.deviceId,
        now(),
        null as mileage,
        if(v1.paymentExpiredDate < curdate(), TRUE, FALSE  ) AS hasArreage
      FROM t_vehicleinfo v1 LEFT JOIN 
(select driverName,vehicleNo from  (select driverName,vehicleNo from driver_attendance ORDER BY signInTime DESC) t GROUP BY t.vehicleNo) as c on v1.vehicleNo=c.vehicleNo
        LEFT JOIN t_mauth_dept v3 ON v1.deptId = v3.linedeptId;


	start transaction; 
    TRUNCATE stat_vehicle_status;

    INSERT INTO stat_vehicle_status SELECT *
                                    FROM tmp;
  COMMIT; 

				#	IF t_error = 1 THEN  
         #    ROLLBACK;  
        # ELSE  
         #    COMMIT;  
       #  END IF;  
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_get_vehicle_status_bak20200331
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_get_vehicle_status_bak20200331`;
delimiter ;;
CREATE PROCEDURE `p_get_vehicle_status_bak20200331`()
BEGIN
#20190522添加保证数据一致
#DECLARE t_error INTEGER DEFAULT 0;  
#DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET t_error=1; 

    DROP TABLE IF EXISTS tmp;
    CREATE TEMPORARY TABLE tmp AS
      SELECT *
      FROM stat_vehicle_status
      WHERE 1 = 2;
    INSERT INTO tmp
      SELECT
        v1.vehicleNo,
        (SELECT v4.driverName
         FROM driver_attendance v4
         WHERE v1.vehicleNo = v4.vehicleno
         ORDER BY signInTime DESC
         LIMIT 1)  AS driverName,
        v3.lineName,
        v3.groupName,
        v3.subCompanyName,
        v3.companyName,
        v2.gpsx,
        v2.gpsy,
        v1.`online`,
        v1.`status`,
        v1.isReparing,
        v1.deviceId,
        now(),
        v2.mileage,
        if(v1.paymentExpiredDate < curdate(), TRUE, FALSE  ) AS hasArreage
      FROM t_vehicleinfo v1 LEFT JOIN
        (SELECT
           devid,
           time,
           gpsx,
           gpsy,
           mileage
         FROM (
                SELECT
                  if(@vid <> devid, @r := 1, @r := @r + 1) r,
                  devid,
                  time,
                  gpsx,
                  gpsy,
                  @vid := devid,
                  mileage
                FROM (
                       SELECT
                         vehicledeviceid AS devid,
                         time,
                         gpsx,
                         gpsy,
                        if(isempty(mileage), NULL , mileage) as mileage
                       FROM t_vehicleanaloginfo
                       WHERE time >= now() - INTERVAL 60 SECOND and time<=NOW()
                       ORDER BY vehicledeviceid, time DESC) t1 INNER JOIN (SELECT
                                                                             @vid := '',
                                                                             @r := 0) t2) tt
         WHERE tt.r = 1) v2 ON v1.deviceid = v2.devid
        LEFT JOIN t_mauth_dept v3 ON v1.deptId = v3.linedeptId;


	start transaction; 
    TRUNCATE stat_vehicle_status;

    INSERT INTO stat_vehicle_status SELECT *
                                    FROM tmp;
  COMMIT; 

				#	IF t_error = 1 THEN  
         #    ROLLBACK;  
        # ELSE  
         #    COMMIT;  
       #  END IF;  
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_get_vehicle_status_bak20200413
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_get_vehicle_status_bak20200413`;
delimiter ;;
CREATE PROCEDURE `p_get_vehicle_status_bak20200413`()
BEGIN
#20190522添加保证数据一致
#DECLARE t_error INTEGER DEFAULT 0;  
#DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET t_error=1; 

    DROP TABLE IF EXISTS tmp;
    CREATE TEMPORARY TABLE tmp AS
      SELECT *
      FROM stat_vehicle_status
      WHERE 1 = 2;
    INSERT INTO tmp
      SELECT
        v1.vehicleNo,
	c.driverName,
        v3.lineName,
        v3.groupName,
        v3.subCompanyName,
        v3.companyName,
        v2.gpsx,
        v2.gpsy,
        v1.`online`,
        v1.`status`,
        v1.isReparing,
        v1.deviceId,
        now(),
        v2.mileage,
        if(v1.paymentExpiredDate < curdate(), TRUE, FALSE  ) AS hasArreage
      FROM t_vehicleinfo v1 LEFT JOIN 
(select driverName,vehicleNo from  (select driverName,vehicleNo from driver_attendance ORDER BY signInTime DESC) t GROUP BY t.vehicleNo) as c on v1.vehicleNo=c.vehicleNo
				LEFT JOIN
        (SELECT
           devid,
           time,
           gpsx,
           gpsy,
           mileage
         FROM (
                SELECT
                  if(@vid <> devid, @r := 1, @r := @r + 1) r,
                  devid,
                  time,
                  gpsx,
                  gpsy,
                  @vid := devid,
                  mileage
                FROM (
                       SELECT
                         vehicledeviceid AS devid,
                         time,
                         gpsx,
                         gpsy,
                        if(isempty(mileage), NULL , mileage) as mileage
                       FROM t_vehicleanaloginfo
                       WHERE time >= now() - INTERVAL 60 SECOND and time<=NOW()
                       ORDER BY vehicledeviceid, time DESC) t1 INNER JOIN (SELECT
                                                                             @vid := '',
                                                                             @r := 0) t2) tt
         WHERE tt.r = 1) v2 ON v1.deviceid = v2.devid
        LEFT JOIN t_mauth_dept v3 ON v1.deptId = v3.linedeptId;


	start transaction; 
    TRUNCATE stat_vehicle_status;

    INSERT INTO stat_vehicle_status SELECT *
                                    FROM tmp;
  COMMIT; 

				#	IF t_error = 1 THEN  
         #    ROLLBACK;  
        # ELSE  
         #    COMMIT;  
       #  END IF;  
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_insert_default_alarm_level_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_insert_default_alarm_level_setting`;
delimiter ;;
CREATE PROCEDURE `p_insert_default_alarm_level_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN
    INSERT into t_alarmlevelinfo(deptId, alarmTypeName, alarmLevel)
    SELECT p_comany_dept_id as deptId, alarmTypeName, alarmLevel FROM t_alarmlevelinfo WHERE deptId = '-1';
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_insert_default_driving_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_insert_default_driving_setting`;
delimiter ;;
CREATE PROCEDURE `p_insert_default_driving_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN
    INSERT into stat_drivingconfig(type, type_desc, parameter, para_value, remark, dept_id)
    SELECT type, type_desc, parameter, para_value, remark,p_comany_dept_id as dept_id FROM stat_drivingconfig
    WHERE dept_id = '-1';
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_insert_default_remind_setting
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_insert_default_remind_setting`;
delimiter ;;
CREATE PROCEDURE `p_insert_default_remind_setting`(IN p_comany_dept_id VARCHAR(11))
BEGIN 
    INSERT INTO t_vehicleremindconfig(companyDeptId, remindtypeid, remindDays) 
    SELECT p_comany_dept_id as companyDeptId, remindtypeid, remindDays
    FROM t_vehicleremindconfig WHERE companyDeptId = '-1';
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_makefakeeneger_day
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_makefakeeneger_day`;
delimiter ;;
CREATE PROCEDURE `p_makefakeeneger_day`(p_date date)
BEGIN
 /*   
    -- 为了造数据
-- 清楚异常
UPDATE api_energe SET miles=ROUND(120+RAND()*10,1) WHERE miles<0;
update api_energe set gas=0,ele=0 where motorType=1 and stat_date=p_date;
UPDATE api_energe SET gas=0,oil=0 WHERE motorType=2 and stat_date=p_date;
UPDATE api_energe SET gas=0 WHERE motorType=3 and stat_date=p_date;
UPDATE api_energe SET ele=0,oil=0 WHERE motorType=4 and stat_date=p_date;
UPDATE api_energe SET oil=0 WHERE motorType=5 and stat_date=p_date;
-- 增加 可能 有效数据
UPDATE api_energe SET oil=ROUND((30+RAND()*10)*miles/100,1)  WHERE motorType=1 and stat_date=p_date;
UPDATE api_energe SET ele=ROUND((30+RAND()*10)*miles/100,1) WHERE motorType=2 and stat_date=p_date;
UPDATE api_energe SET oil=ROUND((30+RAND()*10)*miles/100,1),ele=ROUND((15+RAND()*10)*miles/100,1) WHERE motorType=3 and stat_date=p_date;
UPDATE api_energe SET gas=ROUND((30+RAND()*10)*miles/100,1), ele=ROUND((15+RAND()*10)*miles/100,1) WHERE motorType=4 and stat_date=p_date;
UPDATE api_energe SET gas=ROUND((30+RAND()*10)*miles/100,1), ele=ROUND((15+RAND()*10)*miles/100,1) WHERE motorType=5 and stat_date=p_date;
update stat_energy_compare set gasHundredMiles=0,elecHundredMiles=0 where motorType=1 and stat_date=p_date;
UPDATE stat_energy_compare SET gasHundredMiles=0,fuleHundredMiles=0 WHERE motorType=2 and stat_date=p_date;
UPDATE stat_energy_compare SET gasHundredMiles=0 WHERE motorType=3 and stat_date=p_date;
UPDATE stat_energy_compare SET elecHundredMiles=0,fuleHundredMiles=0 WHERE motorType=4 and stat_date=p_date;
UPDATE stat_energy_compare SET fuleHundredMiles=0 WHERE motorType=5 and stat_date=p_date ;
update stat_energy_compare set fuleHundredMiles=ROUND((30+RAND()*10),1) where motorType=1 and stat_date=p_date;
UPDATE stat_energy_compare SET elecHundredMiles=ROUND((15+RAND()*10),1),fuleHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=2 and stat_date=p_date;
UPDATE stat_energy_compare SET elecHundredMiles=ROUND((15+RAND()*10),1),fuleHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=3 and stat_date=p_date;
UPDATE stat_energy_compare SET gasHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=4 and stat_date=p_date;
UPDATE stat_energy_compare SET gasHundredMiles=ROUND((30+RAND()*10),1),elecHundredMiles=ROUND((15+RAND()*10),1) WHERE motorType=5 and stat_date=p_date;
update stat_vehicleenergy set gasHundredMiles=0,elecHundredMiles=0 where motorType=1 and stat_date=p_date;
UPDATE stat_vehicleenergy SET gasHundredMiles=0,fuleHundredMiles=0 WHERE motorType=2 and stat_date=p_date;
UPDATE stat_vehicleenergy SET gasHundredMiles=0 WHERE motorType=3 and stat_date=p_date;
UPDATE stat_vehicleenergy SET elecHundredMiles=0,fuleHundredMiles=0 WHERE motorType=4 and stat_date=p_date;
UPDATE stat_vehicleenergy SET fuleHundredMiles=0 WHERE motorType=5 and stat_date=p_date ;
update stat_vehicleenergy set fuleHundredMiles=ROUND((30+RAND()*10),1) where motorType=1 and stat_date=p_date;
UPDATE stat_vehicleenergy SET elecHundredMiles=ROUND((15+RAND()*10),1),fuleHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=2 and stat_date=p_date;
UPDATE stat_vehicleenergy SET elecHundredMiles=ROUND((15+RAND()*10),1),fuleHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=3 and stat_date=p_date;
UPDATE stat_vehicleenergy SET gasHundredMiles=ROUND((30+RAND()*10),1) WHERE motorType=4 and stat_date=p_date;
UPDATE stat_vehicleenergy SET gasHundredMiles=ROUND((30+RAND()*10),1),elecHundredMiles=ROUND((15+RAND()*10),1) WHERE motorType=5 and stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'blockCamera','摄像头遮挡',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='起步不关车门' and stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'smokingAlarm','吸烟报警',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='怠速空调' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'danger','危险',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='怠速空调' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'calling','打电话',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='超长怠速' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'wrongInSite','不规范进出站',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='到站超时' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'wrongTurnAround','不规范转弯',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='夜间不开大灯' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'areaOverSpeed','区域超速',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='到站超时' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'lookLeftAndRight','左顾右盼',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='怠速空调' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'wrongTrumpet','不文明鸣笛',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='夜间不开大灯' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'overSpeedonBanma','斑马线超速',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='起步不关车门' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'beSleepy','打哈欠',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='起步急加速' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'lowSpeedCrash','低速碰撞',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='超长怠速' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'shortDistance','车距过近',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='滞站' AND stat_date=p_date; 
      
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'leftOnLine','车道左压线',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='起步不关车门' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'RightOnLine','车道右压线',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='车辆未停稳开车门' AND stat_date=p_date; 
INSERT INTO stat_driving_violation_detail
SELECT vehicledeviceid,'routeKeepAbilityDown','车道保持能力下降',stat_date,begin_time,end_time,gpsx,gpsy,bz_id,score,speed,`engine`,driverId,driverName,lineDeptId,begin_site,end_site,realduration 
FROM stat_driving_violation_detail WHERE actiontypeDesc='滞站' AND stat_date=p_date; 
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='车道保持能力下降' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='车道右压线' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='车道左压线' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='车距过近' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='低速碰撞' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='打哈欠' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='斑马线超速' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
 DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='不文明鸣笛' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
   DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='左顾右盼' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
   DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='区域超速' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
    DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='不规范转弯' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
     DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='不规范进出站' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
 
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='打电话' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='危险' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);
DELETE FROM stat_driving_violation_detail WHERE stat_date=p_date AND actiontypeDesc='摄像头遮挡' AND lineDeptid IN (SELECT deptId FROM t_vehicleinfo WHERE vehicleNo LIKE '京%' GROUP BY deptid);*/
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_manage_all_day_partition_tables
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_manage_all_day_partition_tables`;
delimiter ;;
CREATE PROCEDURE `p_manage_all_day_partition_tables`()
BEGIN
  -- 保留历史数据天数（执行当天不算在历史天数内）
  declare to_keep_history_data_days int default 0;
  declare to_delete_partitions_before_this_time date default current_date - interval to_keep_history_data_days day;
  declare v_starttime timestamp default now();

  -- 执行删除
 call p_day_partition_management('t_vehicleanaloginfo', to_delete_partitions_before_this_time, true);
 call p_day_partition_management('t_electricvehicleana', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_electricvehicleana2', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_electricvehicleana3', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_electricvehiclestateinfo', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_vehiclestateinfo1', to_delete_partitions_before_this_time, true);
 call p_day_partition_management('t_vehiclestateinfo2', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_vehiclestateinfo3', to_delete_partitions_before_this_time, true);
 call p_day_partition_management('t_vehiclealarminfo', to_delete_partitions_before_this_time, true);
  call p_day_partition_management('t_vehiclealarminfo2', to_delete_partitions_before_this_time, true);

  -- 记录日志
  insert into maintain_events_log(eventName, startTime, finishTime, comments)
  values ('p_manage_all_day_partition_tables', v_starttime, now(), concat('Keep history data for ', to_keep_history_data_days, ' days:','Do delete partitions before date ', to_delete_partitions_before_this_time));

  -- 记录表条数和存储空间
  insert into maintain_table_status(table_name, table_rows, data_gb, index_gb)
  select table_name,
         table_rows,
         round(data_length / 1024 / 1024 / 1024, 1)  data_GB,
         round(index_length / 1024 / 1024 / 1024, 1) index_GB
  from information_schema.tables
  where table_schema = database()
  having data_gb >= 0.1;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_modify_alarm_v13
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_modify_alarm_v13`;
delimiter ;;
CREATE PROCEDURE `p_modify_alarm_v13`()
BEGIN
	declare new_name varchar(55);
	DECLARE old_name VARCHAR(55);
	declare  cur01 CURSOR for select * from tmp_alarmname;
   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET @done = TRUE;
      set @done=false;
      
      drop table IF EXISTS tmp_alarmname ;
   create temporary table tmp_alarmname as 
     SELECT a.`alarmtypename` as new_name,b.`alarmtypename` as old_name FROM t_vehiclealarmtype a INNER JOIN t_vehiclealarmtype_copy b ON a.`alarmtypeid` =b.`alarmtypeid` WHERE a.alarmtypename<>b.`alarmtypename`;
     
	open cur01;
	fetch cur01 into new_name,old_name;
	WHILE NOT @done DO
	
		UPDATE t_alarmsummary SET alarmType=new_name WHERE alarmType=old_name    ;
		UPDATE api_breakdowns SET alarmtypename=new_name WHERE alarmtypename=old_name ;
		UPDATE api_breakdowns_hour  SET alarmtypename=new_name WHERE alarmtypename=old_name ;
		UPDATE api_breakdowns_month  SET alarmtypename=new_name WHERE alarmtypename=old_name ;
		
		
		
		FETCH cur01 INTO new_name,old_name;
     END WHILE;
     close cur01;
     select 1;
	
     
    
    
    
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_modify_deviceid_yue_detail
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_modify_deviceid_yue_detail`;
delimiter ;;
CREATE PROCEDURE `p_modify_deviceid_yue_detail`(pre_deviceid varchar(20),new_deviceid varchar(20))
BEGIN
  UPDATE	t_alarmsummary	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;

UPDATE	driver_attendance	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	last_vehicle_miles	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_api_data	SET	deviceid	=	new_deviceid	WHERE	deviceid	=	pre_deviceid		;
UPDATE	stat_battery_analyse_voltandtemp_day	SET	DeviceId	=	new_deviceid	WHERE	DeviceId	=	pre_deviceid		;
UPDATE	stat_battery_analyse_voltandtemp_hour	SET	DeviceId	=	new_deviceid	WHERE	DeviceId	=	pre_deviceid		;
UPDATE	stat_battery_analyse_voltandtemp_month	SET	DeviceId	=	new_deviceid	WHERE	DeviceId	=	pre_deviceid		;
UPDATE	stat_driving_violation_detail	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_driving_violation_detail_java	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_driving_violation_summary	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	stat_energy_compare	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	stat_energy_saving_detail	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_energy_saving_summary	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_energy_saving_summary_day	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_speed_analyse	SET	DeviceId	=	new_deviceid	WHERE	DeviceId	=	pre_deviceid		;
UPDATE	stat_speed_analyse_forhour	SET	DeviceId	=	new_deviceid	WHERE	DeviceId	=	pre_deviceid		;
UPDATE	stat_statealarm_summary_tmp	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	stat_vehicle_status	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	stat_vehicle_totalinfo	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	stat_vehicleenergy	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	t_alarmsummary_unfinished	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	t_datamonitor	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	t_outlinedates	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	t_vehicle_current_postion	SET	vehicleDeviceId	=	new_deviceid	WHERE	vehicleDeviceId	=	pre_deviceid		;
UPDATE	t_vehicle_monitor_info	SET	deviceid	=	new_deviceid	WHERE	deviceid	=	pre_deviceid		;
-- update	t_vehicleinfo	set	deviceId	=	new_deviceid	where	deviceId	=	pre_deviceid		;
UPDATE	t_vehiclemiles	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp1	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_analoginfo	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_config	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	temp_electric02	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_electricstate	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_state1	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_state2	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	temp_state3	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	test	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
UPDATE	tmp_alarm01	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_alarm02	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_alarm03	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_alarm04	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_alarm2	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_alarm3	SET	deviceId	=	new_deviceid	WHERE	deviceId	=	pre_deviceid		;
UPDATE	tmp_driver_attendance	SET	deviceid	=	new_deviceid	WHERE	deviceid	=	pre_deviceid		;
UPDATE	tmp_gps	SET	vehicledeviceid	=	new_deviceid	WHERE	vehicledeviceid	=	pre_deviceid		;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_modify_deviceid_yue_sum
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_modify_deviceid_yue_sum`;
delimiter ;;
CREATE PROCEDURE `p_modify_deviceid_yue_sum`(pre_deviceid VARCHAR(20),new_deviceid VARCHAR(20),p_date date)
BEGIN
#修改 车辆 设备id 号 后 需要修改的历史数据 韩亚璋 2019年3月22日

UPDATE	t_vehiclealarminfo a INNER JOIN 
(SELECT deviceId, alarmTime,lcd FROM t_vehiclealarminfo WHERE deviceId=pre_deviceid AND alarmTime <p_date+INTERVAL 1 DAY AND alarmTime >p_date) b 
ON a.alarmTime=b.alarmTime SET	a.deviceId	=	new_deviceid, a.alarmTime =b.alarmTime	,a.lcd=b.lcd
WHERE	a.deviceId	=	pre_deviceid	and a.alarmTime <p_date+interval 1 day and a.alarmTime >p_date; 

UPDATE	t_vehiclealarminfo2 a INNER JOIN 
(SELECT deviceId, alarmTime,lcd FROM t_vehiclealarminfo2 WHERE deviceId=pre_deviceid AND alarmTime <p_date+INTERVAL 1 DAY AND alarmTime >p_date) b 
ON a.alarmTime=b.alarmTime SET	a.deviceId	=	new_deviceid, a.alarmTime =b.alarmTime	,a.lcd=b.lcd
WHERE	a.deviceId	=	pre_deviceid	and a.alarmTime <p_date+interval 1 day and a.alarmTime >p_date; 


UPDATE	t_vehicleanaloginfo a INNER JOIN 
(SELECT vehicledeviceid, TIME FROM t_vehicleanaloginfo WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	and a.time <p_date+interval 1 day and a.time >p_date; 




 
 UPDATE	t_electricvehicleana	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_electricvehicleana WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_electricvehicleana2	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_electricvehicleana2 WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_electricvehicleana3	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_electricvehicleana3 WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_electricvehiclestateinfo	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_electricvehiclestateinfo WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_vehiclestateinfo1	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_vehiclestateinfo1 WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_vehiclestateinfo2	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_vehiclestateinfo2 WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
 UPDATE	t_vehiclestateinfo3	a INNER JOIN 
 (SELECT vehicledeviceid, TIME FROM t_vehiclestateinfo3 WHERE vehicledeviceid=pre_deviceid AND TIME <p_date+INTERVAL 1 DAY AND TIME >p_date) b 
ON a.time=b.time SET	a.vehicledeviceid	=	new_deviceid, a.time =b.time	
WHERE	a.vehicledeviceid	=	pre_deviceid	AND a.time <p_date+INTERVAL 1 DAY AND a.time >p_date; 
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_optimize_table
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_optimize_table`;
delimiter ;;
CREATE PROCEDURE `p_optimize_table`()
BEGIN
	#Routine body goes here...
	declare v_starttime timestamp default now();
	optimize table t_vehiclealarminfo;
	optimize table t_vehiclealarminfo2;
  insert into maintain_events_log(eventName, startTime, finishTime, comments)
  values ('p_optimize_table', v_starttime, now(), '东莞库碎片清理');

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_optimize_t_alarmsummary_unfinished
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_optimize_t_alarmsummary_unfinished`;
delimiter ;;
CREATE PROCEDURE `p_optimize_t_alarmsummary_unfinished`()
BEGIN
	#Routine body goes here...
	declare v_starttime timestamp default now();
	optimize table t_alarmsummary_unfinished;
  insert into maintain_events_log(eventName, startTime, finishTime, comments)
  values ('p_optimize_t_alarmsummary_unfinished', v_starttime, now(), '东莞库持续报警碎片清理');

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_set_driver_attendance
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_set_driver_attendance`;
delimiter ;;
CREATE PROCEDURE `p_set_driver_attendance`(p_date date)
BEGIN
declare v_signintime datetime;
declare v_signouttime datetime;
set v_signintime :=date_add(p_date,interval 8 hour) ;
set v_signouttime :=date_add(p_date,interval 20 hour) ;
set sql_safe_updates=0;
delete from driver_attendance where signintime between p_date and p_date + interval 1 day ;
insert into driver_attendance(driverid,driverName,vehicleno,signInTime,signOutTime,workHours,created_at)values
(2,'蔡子英','黑AH1497',v_signintime,v_signouttime,8,now()),
(3,'陈建平','黑AH1736',v_signintime,v_signouttime,8,now()),
(4,'戴胜军','黑AK0001',v_signintime,v_signouttime,8,now()),
(5,'邓芳兰','黑AK0011',v_signintime,v_signouttime,8,now()),
(6,'韩鹏飞','黑AK1234',v_signintime,v_signouttime,8,now()),
(7,'革新','黑AK2982',v_signintime,v_signouttime,8,now()) ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_alarminfo2_min
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_alarminfo2_min`;
delimiter ;;
CREATE PROCEDURE `p_stat_alarminfo2_min`(IN p_start DATETIME, IN p_end DATETIME)
BEGIN
declare v_start datetime default now() ;  
  
  
  SET SQL_SAFE_UPDATES=0;
  
  truncate tmp_gps;
  insert into tmp_gps 
  select vehicledeviceid,gx,gy from (
  select vehicledeviceid,gpsx as gx,gpsy as gy,
	if(@vid=vehicledeviceid,@r:=@r+1,@r:=1) r,
	@vid:=vehicledeviceid
  from (select vehicledeviceid,gpsx,gpsy from t_vehicleanaloginfo 
		  where time >= p_end-interval 1 minute and time<p_end
               order by vehicledeviceid,time desc) gxy
		inner join (select @vid:=null,@r:=1) tt0
		on 1=1 )tt
  where r=1;
  
  
  truncate tmp_alarm01;
  -- 合并原始报警数据
  insert into tmp_alarm01 
  select deviceId,alarmTypeId,alarmLevel,alarmtime,stime,ltime,etime,is_new
  from (
    select tt0.*,if(gno=@g,@rr:=@rr+1,@rr:=1) as rr,@g:=gno
    from (
      select t1.*,
      -- 车和报警类型都相同，则为同一个组
        if(deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111',@gno,@gno:=@gno+1) as gno, -- 组编号
        if(deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111',@r:=@r+1,@r:=1) as r, -- 组成员序号
        -- 同组，则开始时间跟上一条一样
        case when deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111' then @stime 
        -- 新组，并且报警标志为开始
        else @stime:=alarmtime end as stime,-- 报警开始时间
        alarmtime as ltime,-- 报警持续时间  
        if(alarmLevel='11111111',@etime:=alarmtime,@etime:=null) as etime,
        -- 如果上一条报警完成，那么这条一定是新产生的
        case when deviceId=@devid and alarmTypeId=@typeid and @level='11111111' then @is_new:='Y'
        when deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111' then @is_new
        else @is_new:='N' end as is_new,
        @devid:=deviceid,@typeid:=alarmtypeid,@level:=alarmlevel
	from (
      select * from t_vehiclealarminfo2 -- alarmlevel 表示开始结束
      where alarmtime>=p_start and alarmtime < p_end
      -- 按车、报警类型和报警时间分组排序
      order by deviceid,alarmTypeId,alarmtime asc ) t1 
      inner join (select @devid:='',@typeid:='',@level:='',@stime:=null,@etime:=null,@gno:=0,@r:=0,@is_new:='') t2 on 1=1 
    order by gno,r desc) tt0
  inner join (select @g:=null,@rr:=0 ) tt1 on 1=1 )ttt 
  where rr=1 -- 取每组最后一条记录，就是合并好的记录
  ;
  
 
  
  
  -- 关联坐标、司机等信息
  truncate tmp_alarm02 ;
  insert into tmp_alarm02 
   select t2.vehicleNo,t1.deviceId,t3.driverName,t2.motortype,t6.alarmTypeName,
     t1.stime,t1.ltime,t1.eTime,t1.alarmLevel|ifnull(t5.alarmLevel,0) as alarmLevel,
     t7.gx,t7.gy,t1.alarmtypeid,1 as alarmflag,t4.companyName,t4.companyDeptId,
     t4.subCompanyName,t4.subCompanyDeptId,t4.groupName,t4.groupDeptId,t4.lineName,
     t4.lineDeptId,t1.is_new
   from tmp_alarm01 t1 
   inner join t_vehicleinfo t2
     on t1.deviceId=t2.deviceId 
   left join (select deviceid,driverName  
   -- 取车的最后一次登记的司机
     from (select d1.*,if(d1.deviceid=@devid,@r:=@r+1,@r:=1) as r,@devid:=d1.deviceid 
       from (select deviceid,driverName from driver_attendance order by deviceid,signInTime desc) d1
         inner join (select @r:=0,@devid:='') d2 on 1=1) dd
         where r=1) t3
     on t3.deviceid=t2.deviceid 
   inner join v_lineinfo t4  on t2.deptId=t4.lineDeptId
   inner join t_vehiclealarmtype t6 on t1.alarmtypeid=t6.alarmtypeid
   left join t_alarmlevelinfo t5  on t5.alarmtypename=t6.alarmname and t4.companyDeptId=t5.deptId
   -- 获取最后一条gps
   left join tmp_gps t7 on t1.deviceid=t7.vehicledeviceid
  ;
  
  -- 去掉重复数据 
  delete t_alarmsummary from tmp_alarm02,t_alarmsummary
  where  tmp_alarm02.deviceid=t_alarmsummary.deviceid 
     and tmp_alarm02.alarmtypeid=t_alarmsummary.alarmtypeid
      and t_alarmsummary.alarmstarttime=tmp_alarm02.stime
      and t_alarmsummary.alarmstarttime>=p_start 
      and t_alarmsummary.alarmstarttime<p_end 
      ;
  -- 更新待更新的数据标志 
  update tmp_alarm02 t2 
  inner join t_alarmsummary t1 
    on t1.deviceid=t2.deviceid and t1.alarmtypeid=t2.alarmtypeid
      and t1.finished='N' and t1.alarmstarttime>=current_date-interval 15 day 
      and t2.is_new='N'
  set t2.is_new='U'
  ;  
  -- 更新未完成的报警   
  update t_alarmsummary t1 
  inner join tmp_alarm02 t2 
    on t1.deviceid=t2.deviceid and t1.alarmtypeid=t2.alarmtypeid
      and t1.finished='N' and t1.alarmstarttime>=current_date-interval 15 day 
      and t2.is_new='U'
  set t1.lastAlarmTime=t2.ltime,t1.dismissTime=t2.etime,
    t1.finished=if(t2.etime is null,'N','Y'),duration=timestampdiff(second,t1.alarmstarttime,ifnull(t2.etime,t2.ltime))
  ; 
  -- 插入新报警 
 -- 先删除数据，避免重复插入
  insert into t_alarmsummary(vehicleNo,deviceId,driverName,alarmtype,alarmstarttime,duration,motorType,
    dismissTime,alarmLevel,stattime,gx,gy,lastAlarmTime,alarmTypeId,alarmFlag,companyName,companyDeptId,
    subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId,finished)
  select vehicleNo,deviceId,driverName,alarmtypename,stime,timestampdiff(second,stime,ifnull(etime,ltime)), motorType,etime,
    alarmLevel,now(),gx,gy,ltime,alarmtypeid,1,companyName,companyDeptId,subCompanyName,subCompanyDeptId,
    groupName,groupDeptId,lineName,lineDeptId,if(etime is null,'N','Y')
  from tmp_alarm02 t -- 车同一个报警类型之前不存在未完成的，则插入一条
  where t.is_new<>'U' ;
  
  -- 删除重复统计的数据，by 韩亚璋 2017年11月14日
  delete from t_alarmsummary where alarmstarttime<=p_end and alarmstarttime>=p_start and duration<0;
 -- 插入日志 
 -- insert into maintain_events_log(eventname,starttime,finishTime) 
 -- values('p_stat_alarminfo_min',v_start,now()) ;
 
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_alarminfo_min
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_alarminfo_min`;
delimiter ;;
CREATE PROCEDURE `p_stat_alarminfo_min`(IN p_start DATETIME, IN p_end DATETIME)
BEGIN
   declare v_start datetime default now() ;  
  
  
  SET SQL_SAFE_UPDATES=0;
  
  truncate tmp_gps;
  insert into tmp_gps 
  select vehicledeviceid,gx,gy from (
  select vehicledeviceid,gpsx as gx,gpsy as gy,
	if(@vid=vehicledeviceid,@r:=@r+1,@r:=1) r,
	@vid:=vehicledeviceid
  from (select vehicledeviceid,gpsx,gpsy from t_vehicleanaloginfo 
		  where time >= p_end-interval 1 minute and time<p_end
               order by vehicledeviceid,time desc) gxy
		inner join (select @vid:=null,@r:=1) tt0
		on 1=1 )tt
  where r=1;
  
  
  truncate tmp_alarm01;
  -- 合并原始报警数据
  insert into tmp_alarm01 
  select deviceId,alarmTypeId,alarmLevel,alarmtime,stime,ltime,etime,is_new
  from (
    select tt0.*,if(gno=@g,@rr:=@rr+1,@rr:=1) as rr,@g:=gno
    from (
      select t1.*,
      -- 车和报警类型都相同，则为同一个组
        if(deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111',@gno,@gno:=@gno+1) as gno, -- 组编号
        if(deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111',@r:=@r+1,@r:=1) as r, -- 组成员序号
        -- 同组，则开始时间跟上一条一样
        case when deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111' then @stime 
        -- 新组，并且报警标志为开始
        else @stime:=alarmtime end as stime,-- 报警开始时间
        alarmtime as ltime,-- 报警持续时间  
        if(alarmLevel='11111111',@etime:=alarmtime,@etime:=null) as etime,
        -- 如果上一条报警完成，那么这条一定是新产生的
        case when deviceId=@devid and alarmTypeId=@typeid and @level='11111111' then @is_new:='Y'
        when deviceId=@devid and alarmTypeId=@typeid and @level<>'11111111' then @is_new
        else @is_new:='N' end as is_new,
        @devid:=deviceid,@typeid:=alarmtypeid,@level:=alarmlevel
	from (
      select * from t_vehiclealarminfo 
      where alarmtime>=p_start and alarmtime < p_end
      -- 按车、报警类型和报警时间分组排序
      order by deviceid,alarmTypeId,alarmtime asc ) t1 
      inner join (select @devid:='',@typeid:='',@level:='',@stime:=null,@etime:=null,@gno:=0,@r:=0,@is_new:='') t2 on 1=1 
    order by gno,r desc) tt0
  inner join (select @g:=null,@rr:=0 ) tt1 on 1=1 )ttt 
  where rr=1 -- 取每组最后一条记录，就是合并好的记录
  ;
  
  
  
  
  
  
  -- 关联坐标、司机等信息
  truncate tmp_alarm02 ;
  insert into tmp_alarm02 
   select t2.vehicleNo,t1.deviceId,t3.driverName,t2.motortype,t6.alarmTypeName,
     t1.stime,t1.ltime,t1.eTime,t1.alarmLevel|ifnull(t5.alarmLevel,0) as alarmLevel,
     t7.gx,t7.gy,t1.alarmtypeid,1 as alarmflag,t4.companyName,t4.companyDeptId,
     t4.subCompanyName,t4.subCompanyDeptId,t4.groupName,t4.groupDeptId,t4.lineName,
     t4.lineDeptId,t1.is_new
   from tmp_alarm01 t1 
   inner join t_vehicleinfo t2
     on t1.deviceId=t2.deviceId 
   left join (select deviceid,driverName  
   -- 取车的最后一次登记的司机
     from (select d1.*,if(d1.deviceid=@devid,@r:=@r+1,@r:=1) as r,@devid:=d1.deviceid 
       from (select deviceid,driverName from driver_attendance order by deviceid,signInTime desc) d1
         inner join (select @r:=0,@devid:='') d2 on 1=1) dd
         where r=1) t3
     on t3.deviceid=t2.deviceid 
   inner join v_lineinfo t4  on t2.deptId=t4.lineDeptId
   inner join t_vehiclealarmtype t6 on t1.alarmtypeid=t6.alarmtypeid
   left join t_alarmlevelinfo t5  on t5.alarmtypename=t6.alarmname and t4.companyDeptId=t5.deptId
   -- 获取最后一条gps
   left join tmp_gps t7 on t1.deviceid=t7.vehicledeviceid
  ;
  
  -- 去掉重复数据 
  delete t_alarmsummary from tmp_alarm02,t_alarmsummary
  where  tmp_alarm02.deviceid=t_alarmsummary.deviceid 
     and tmp_alarm02.alarmtypeid=t_alarmsummary.alarmtypeid
      and t_alarmsummary.alarmstarttime=tmp_alarm02.stime
      and t_alarmsummary.alarmstarttime>=p_start 
      and t_alarmsummary.alarmstarttime<p_end 
      ;
  -- 更新待更新的数据标志 
  update tmp_alarm02 t2 
  inner join t_alarmsummary t1 
    on t1.deviceid=t2.deviceid and t1.alarmtypeid=t2.alarmtypeid
      and t1.finished='N' and t1.alarmstarttime>=current_date-interval 15 day 
      and t2.is_new='N'
  set t2.is_new='U'
  ;  
  -- 更新未完成的报警   
  update t_alarmsummary t1 
  inner join tmp_alarm02 t2 
    on t1.deviceid=t2.deviceid and t1.alarmtypeid=t2.alarmtypeid
      and t1.finished='N' and t1.alarmstarttime>=current_date-interval 15 day 
      and t2.is_new='U'
  set t1.lastAlarmTime=t2.ltime,t1.dismissTime=t2.etime,
    t1.finished=if(t2.etime is null,'N','Y'),duration=timestampdiff(second,t1.alarmstarttime,ifnull(t2.etime,t2.ltime))
  ; 
  -- 插入新报警 
 -- 先删除数据，避免重复插入
  insert into t_alarmsummary(vehicleNo,deviceId,driverName,alarmtype,alarmstarttime,duration,motorType,
    dismissTime,alarmLevel,stattime,gx,gy,lastAlarmTime,alarmTypeId,alarmFlag,companyName,companyDeptId,
    subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId,finished)
  select vehicleNo,deviceId,driverName,alarmtypename,stime,timestampdiff(second,stime,ifnull(etime,ltime)), motorType,etime,
    alarmLevel,now(),gx,gy,ltime,alarmtypeid,1,companyName,companyDeptId,subCompanyName,subCompanyDeptId,
    groupName,groupDeptId,lineName,lineDeptId,if(etime is null,'N','Y')
  from tmp_alarm02 t -- 车同一个报警类型之前不存在未完成的，则插入一条
  where t.is_new<>'U' ;
  
  -- 删除重复统计的数据，by 韩亚璋 2017年11月14日
  delete from t_alarmsummary where alarmstarttime<=p_end and alarmstarttime>=p_start and duration<0;
 -- 插入日志 
 -- insert into maintain_events_log(eventname,starttime,finishTime) 
 -- values('p_stat_alarminfo_min',v_start,now()) ;
 
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_battery_voltandtemp
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_battery_voltandtemp`;
delimiter ;;
CREATE PROCEDURE `p_stat_battery_voltandtemp`(IN p_date DATE)
BEGIN
declare v_end_time datetime;
DECLARE v_begin_time DATETIME;
declare v_cnt int;
set v_cnt:=0;
SET v_begin_time:=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00');
SET v_end_time:=v_begin_time+ interval 1 hour;
 DELETE FROM stat_battery_analyse_voltandtemp_hour WHERE stat_date=p_date ;
 
while v_cnt< 24  do
     -- 求每日最大温差压差 按小时分 
  -- 添加偏移量
  insert into stat_battery_analyse_voltandtemp_hour(deviceId,vehicleNo,
    deptId,stat_date,temp,volt,`hour`)
  select vehicledeviceid,t2.vehicleNo,t2.deptId,
    p_date,temp,volt, v_cnt
  from (
  SELECT vehicledeviceid,MAX((singlehightemp*singlehightempres+singlehightempoffset)-(singlelowtemp*singlelowtempres+singlelowtempoffset)) AS temp,
	MAX((singlehighvolt*singlehighvoltres+singlehighvoltoffset)-(singlelowvolt*singlelowvoltres+singlelowvoltoffset)) AS volt
  FROM (SELECT vehicledeviceid,singlehightemp,singlelowtemp,singlehighvolt,singlelowvolt FROM t_electricvehicleana  
  WHERE TIME>=v_begin_time AND TIME<v_end_time )  a  INNER JOIN 
  (SELECT   deviceid,
  SUBSTR(singlehightemp,9,INSTR(singlehightemp,'","offset')-9)+0 AS singlehightempres,
  
SUBSTR(singlehightemp,INSTR(singlehightemp,'offset":"')+9,INSTR(singlehightemp,'","unit')-(INSTR(singlehightemp,'offset":"')+9))+0 AS singlehightempoffset, 
SUBSTR(singlelowtemp,9,INSTR(singlelowtemp,'","offset')-9)+0 AS singlelowtempres,
SUBSTR(singlelowtemp,INSTR(singlelowtemp,'offset":"')+9,INSTR(singlelowtemp,'","unit')-(INSTR(singlelowtemp,'offset":"')+9))+0 AS singlelowtempoffset, 
SUBSTR(singlehighvolt,9,INSTR(singlehighvolt,'","offset')-9)+0 AS singlehighvoltres,
SUBSTR(singlehighvolt,INSTR(singlehighvolt,'offset":"')+9,INSTR(singlehighvolt,'","unit')-(INSTR(singlehighvolt,'offset":"')+9))+0 AS singlehighvoltoffset, 
SUBSTR(singlelowvolt,9,INSTR(singlelowvolt,'","offset')-9)+0 AS singlelowvoltres,
SUBSTR(singlelowvolt,INSTR(singlelowvolt,'offset":"')+9,INSTR(singlelowvolt,'","unit')-(INSTR(singlelowvolt,'offset":"')+9))+0 AS singlelowvoltoffset
  FROM t_vehicleanaloginfo_offset a INNER JOIN t_vehicleinfo b ON a.vehicleId=b.vehicleid
  ) b ON a.vehicledeviceid=b.deviceid
  
  group by vehicledeviceid ) t1
  left join t_vehicleinfo t2 on t1.vehicledeviceid=t2.deviceId ;
  
  SET v_begin_time:=v_end_time;
  SET v_end_time:=v_begin_time+ INTERVAL 1 HOUR;
  
  
  set v_cnt:=v_cnt+1;
    
  
  end while;
  
  
 
  
  
   DELETE FROM stat_battery_analyse_voltandtemp_day WHERE stat_date=p_date ;
      -- 求每日最大温差压差
      INSERT INTO stat_battery_analyse_voltandtemp_day(deviceId,vehicleNo,
    deptId,stat_date,temp,volt)
  SELECT deviceId,MAX(vehicleNo),
      MAX(deptId),p_date ,max(temp),max(volt)
  FROM stat_battery_analyse_voltandtemp_hour
  WHERE stat_date=p_date 
  GROUP BY deviceId ;  
  
    -- 求每月最大温差压差
  DELETE FROM stat_battery_analyse_voltandtemp_month WHERE stat_date=p_date - INTERVAL (DAY(p_date)-1) DAY  ;
  INSERT INTO stat_battery_analyse_voltandtemp_month(deviceId,vehicleNo,
    deptId,stat_date,temp,volt)
    SELECT deviceId,MAX(vehicleNo),
      MAX(deptId),p_date - INTERVAL (DAY(p_date)-1) DAY ,MAX(temp),MAX(volt)
  FROM stat_battery_analyse_voltandtemp_hour
  WHERE stat_date>=p_date - INTERVAL (DAY(p_date)-1) DAY
  AND stat_date<LAST_DAY(p_date)+INTERVAL 1 DAY
  GROUP BY deviceId ;  
  
  
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_blankZone_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_blankZone_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_blankZone_byDay`(p_date date)
BEGIN
-- 更新 stat_driving_violation_detail 中的黑点区域
  declare v_id int;
-- declare v_name varchar(45); 
 declare v_gpsx varchar(45);
 declare v_gpsy varchar(45);
 declare v_radius VARCHAR(45);
    
 DECLARE  cur01 CURSOR FOR SELECT id,gpsx,gpsy,radius from blank_zone;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE; 
  SET @cursor_not_found :=FALSE;
    
    open cur01;
    
    fetch cur01 into v_id,v_gpsx,v_gpsy,v_radius;
    
    
    while not @cursor_not_found do
    -- 黑点区域设为正方形地带
    update stat_driving_violation_detail set bz_id=v_id where stat_date=p_date and
   gpsx < v_gpsx+v_radius and gpsx>v_gpsx-v_radius and gpsy <v_gpsy+v_radius and gpsy>v_gpsy-v_radius  and bz_id=0 ;
    
    
    
   FETCH cur01 INTO v_id,v_gpsx,v_gpsy,v_radius;
   end while;
   close cur01;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_ChaoChangDaiSu_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_ChaoChangDaiSu_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_ChaoChangDaiSu_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：超长怠速 
  -- 算法描述：车速为0时，转速在300-800RPM时，连续累计时间大于15分钟
  -- 1、先找出所有满足车速=0，转速再300-800之间的候选记录，按时间升序排序 ，存入数组 t[n]
  -- 开始循环读取数组t[n]
  -- first=t[1]，current=t[1]，next=t[2] ,done='N'
  -- 2、判断 first、current、next
  -- 若current与next之间有记录，说明current与next不是连续的候选 ，
  --     则first=next，done='N'，current=first,next=current+1 继续2
  -- 若current与next之间无记录，说明current与next是连续的候选 ，继续判断:
  --    若 next-first < 15分钟 ，current=next,next=next+1，继续2
  --    若 next-first > 15分钟 ，并且done='N',则 first/next就是一组违规记录 ，
  --                                 done='Y',current=next,next=next+1，继续2
  --    
  
  declare v_time_interval int;
  declare v_score int;
  declare v_pre_score int;
  declare v_cur_score int;
  
  declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  declare v_cur_gpsx varchar(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  declare v_first_gpsx varchar(45);
  DECLARE v_first_gpsy VARCHAR(45);
  declare v_pre_gpsx varchar(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
  declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,time_interval,score from tmp01  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'min_engine_speed' then para_value else null end) as min_engine_speed,
  max(case parameter when 'max_engine_speed' then para_value else null end) as max_engine_speed,
  max(case parameter when 'time_interval' then para_value else null end) as time_interval,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='超长怠速'
  group by dept_id; 
  
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.time_interval,t3.score  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  select VEHICLEDEVICEID,time,engine,gpsx,gpsy -- 发动机转速
  from t_vehicleanaloginfo a
  where a.time >= p_date and a.time < adddate(p_date,interval 1 day)
  and speed=0 ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id 
  where t1.engine between t3.min_engine_speed and t3.max_engine_speed ;
  
  delete from stat_driving_violation_detail where stat_date=p_date and actiontype='longIdling';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_time_interval,v_pre_score;    -- 新增 gps信息  2018年9月20日  by 韩亚璋
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_time_interval,v_cur_score;    -- 新增 gps信息  2018年9月20日  by 韩亚璋
    if @cursor_not_found then
       leave label01;
	end if;
    
    set v_timediff :=timestampdiff(minute,v_first_time,v_cur_time);
    
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehicleanaloginfo a 
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_first_gpsx:=v_cur_gpsx;
          set v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time; 
      -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      set v_pre_gpsx:=v_first_gpsx;
      set v_pre_gpsy:=v_first_gpsy;
      set v_pre_score:=v_cur_score;
      set v_success:='N';
	-- 是连续的，继续判断
	elseif v_timediff>=v_time_interval and v_success='N' then
    -- 是一次违规 
	  set v_success :='Y';
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score)   -- 新增 gps信息  2018年9月20日  by 韩亚璋
		 values(v_first_vid,'longIdling','超长怠速',v_first_time,v_cur_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score);  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	elseif v_timediff>=v_time_interval and v_success='Y' then
	-- 已经算一次违规了，不能再算，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	else 
	-- 不算违规，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
           
    
  end while label01;
  
  close cur01;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_ChaoSu_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_ChaoSu_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_ChaoSu_byDay`(IN p_date DATE)
BEGIN
  -- 驾驶行为分析：超速
  -- 算法描述：当前车速大于设定值 ，则认为超速
  declare v_max_value int;
  declare v_pre_score int;
  declare v_cur_score int;
  -- declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  
  declare v_cnt int;
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,score from tmp01  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  set @cursor_not_found :=false;
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'speed' then para_value else null end) as speed,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='超速'
  group by dept_id;
  -- 获取基本数据
  drop table if exists tmp01;
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t1.speed,t3.score -- 增加gps信息 2018年9月20日 by 韩亚璋
  from (
  select VEHICLEDEVICEID,time,gpsx,gpsy ,speed--    gps信息添加 2018年9月20日 by 韩亚璋
  from t_vehicleanaloginfo a
  where a.time >= p_date and a.time < adddate(p_date,interval 1 day) ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id
  where t1.speed > t3.speed ;
  delete from stat_driving_violation_detail
  where stat_date=p_date and actiontype='overspeed';
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score;  -- gps信息添加 2018年9月20日 by 韩亚璋
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
    -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score;-- 添加 gps信息  2018年9月20日 by 韩亚璋
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录
	select count(1) into v_cnt from
    (select 1 from t_vehicleanaloginfo a
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    if v_cur_vid<>v_pre_vid or v_cnt=1 then
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy, stat_date,score)  -- gps信息添加 2018年9月20日 by 韩亚璋
	  values(v_first_vid,'overspeed','超速',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score);  -- gps信息添加 2018年9月20日 by 韩亚璋
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	   -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time;
      -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      set v_pre_gpsx:=v_first_gpsx;
      set v_pre_gpsy:=v_first_gpsy;
      
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  set v_pre_time:=v_cur_time;
	 -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
  end while label01;
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_DaiSuKongTiao_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_DaiSuKongTiao_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_DaiSuKongTiao_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：怠速空调
  -- 算法描述：处于怠速（300-800RPM）且空调开关有效
  declare v_pre_score int;
  declare v_cur_score int;
  declare v_min_engineSpeed int;
  declare v_max_engineSpeed int;
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
	DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
  -- declare v_timediff int;
	-- 游标
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,score from tmp01  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
	-- 若没有数据返回,程序继续
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
-- 获取怠速空调 最大速度和最小速度
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'min_engine_speed' then para_value else null end) as min_engine_speed,
  max(case parameter when 'max_engine_speed' then para_value else null end) as max_engine_speed,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='怠速空调'
  group by dept_id; 
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score -- 增加gps信息 2018年9月20日 by 韩亚璋
  from (
  select a.VEHICLEDEVICEID,a.time,gpsx,gpsy,a.Engine, -- 发动机转速  增加gps信息 2018年9月20日 by 韩亚璋
    b.conditioneron -- 空调启动  -- 由 condition 修改为conditioneron  2019年4月22日
  from t_vehicleanaloginfo a inner join t_vehiclestateinfo2 b  -- 由状态量3 改为状态量2  2019年4月22日
  on a.time=b.time and a.VEHICLEDEVICEID=b.VEHICLEDEVICEID
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and b.time>=p_date and b.time<adddate(p_date,interval 1 day)
  and b.conditioneron='1' ) t1  -- 由 condition 修改为conditioneron  2019年4月22日
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id
  where t1.engine between t3.min_engine_speed and t3.max_engine_speed;
  
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='idlingWithAirConditionerOpen';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; -- 添加 gps信息  2018年9月20日 by 韩亚璋
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
-- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score; -- gps信息添加 2018年9月20日 by 韩亚璋
    
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehicleanaloginfo a 
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score)   -- gps信息添加 2018年9月20日 by 韩亚璋
	  values(v_first_vid,'idlingWithAirConditionerOpen','怠速空调',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score); -- gps信息添加 2018年9月20日 by 韩亚璋
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	   -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time;  
      -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else 
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
           
    
  end while label01;
  
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_DaiSuShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_DaiSuShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_DaiSuShiChang_byDay`(p_date DATE)
BEGIN
  -- 节能分析：怠速时长
  -- 算法描述：发动机转速持续在500-700rpm，累加时间
  DELETE FROM stat_energy_saving_detail
  WHERE stat_date = p_date AND TYPE = 'idleTime' ;
    
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'idleTime','怠速时长',
    min(a.time),max(a.time),p_date,count(1),null
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and a.engine between 500 and 700
  group by a.VEHICLEDEVICEID;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_driveranalyses_with_statdate
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_driveranalyses_with_statdate`;
delimiter ;;
CREATE PROCEDURE `p_stat_driveranalyses_with_statdate`(IN p_date DATE)
BEGIN
# 新考勤 2019年3月6日 韩亚璋
DECLARE v_companDeptId INT;
DECLARE v_stat_day INT;
DECLARE v_statisticalDate INT;
DECLARE v_begin_time DATE;
DECLARE v_end_time DATE;
DECLARE v_stat_date DATE;
-- 游标  统计的时候区分公司
DECLARE cur01 CURSOR  FOR
SELECT companyDeptId,stat_day,CASE statisticalDate WHEN '下月' THEN 1 ELSE 2 END AS statisticalDate FROM  `t_company_month_compare_date` ;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
 SET @cursor_not_found:=FALSE;
 OPEN cur01;
 FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
 
 
 
 
 
 
WHILE NOT @cursor_not_found DO 
-- 确定 统计月份       
       IF v_statisticalDate=1  -- 下月 统计
       THEN    
       IF DAY(p_date)>v_stat_day 
		THEN  	-- 属于当月		
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE    -- 属于上月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY -INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_begin_time:=v_stat_date+INTERVAL v_stat_day -1 DAY;	-- 开始时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_begin_time) -- 越界 取v_begin_time 所在月1号
			THEN SET v_begin_time:=v_begin_time -INTERVAL DAY(v_begin_time) -1 DAY;
		END IF;
		SET v_end_time:=v_stat_date+INTERVAL 1 MONTH +INTERVAL v_stat_day-1 DAY; -- 结束时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)-1   -- 越界 取 v_end_time 所在月份1号
			  THEN SET v_end_time:=v_end_time - INTERVAL DAY(v_end_time)-1  DAY ;
		END IF;		
	ELSE 			-- 当月 统计
		IF DAY(p_date)< v_stat_day   
		THEN  		-- 属于当月	
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE 		-- 属于下月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY +INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_end_time:=v_stat_date+INTERVAL v_stat_day-1 DAY ;		
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)  -- 越界 取v_end_time所在月1号
			  THEN SET v_end_time:=v_end_time -INTERVAL DAY(v_end_time)-1 DAY;
		END IF;
	SET v_begin_time:=v_stat_date-INTERVAL 1 MONTH+INTERVAL v_stat_day-1 DAY ;	
	-- 避免 越界
		IF MONTH(v_stat_date)=MONTH(v_begin_time)       -- 越界 取v_begin_time所在月1号
			  THEN SET v_begin_time:=v_begin_time- INTERVAL DAY(v_begin_time)-1 DAY ;
		END IF;	
	END IF;
	SELECT  v_begin_time,v_end_time,v_stat_date,v_stat_day;
	
	
	 DELETE FROM stat_driving_violation_summary WHERE stat_date=v_stat_date and companyId=v_companDeptId; 
	
	 INSERT INTO stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,MONTH,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
	SELECT t.driverId,t.driverName,t.deviceid,t2.lineDeptId,t2.lineName,
   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
   t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
   t.actiontype,t.actionTypeDesc,cnt AS times,t.scores,total_seconds
  FROM (
     SELECT a.deviceId AS deviceid,actiontype,actionTypeDesc,SUM(scores) AS scores,sum(totalNum) AS cnt,SUM(total_seconds) as total_seconds,
     MAX(driverId) AS driverid,MAX(driverName) AS drivername,lineId
	   FROM stat_driving_violation_day a 
    /* inner join driver_attendance t1 
     on a.vehicledeviceid=t1.deviceid 
     and t1.signIntime >= a.stat_date and t1.signIntime < a.stat_date+interval 1 day */
    WHERE a.stat_date >= v_begin_time
    AND a.stat_date < v_end_time
	  and CompanyId=v_companDeptId
    -- group by 添加  driverName 条件
    GROUP BY a.deviceid,lineId,actiontype,actionTypeDesc,driverName) t
  INNER JOIN v_lineInfo t2 ON t.lineId=t2.linedeptid ;
  
  
  
  
  
  
  -- 根据签到表 获取 有 签到和签退时间的 且  车辆最后一次签到的签退时间为null 的车辆驾驶员关系表 ，  用来代替 driver_attendance
  
--  DROP TABLE IF EXISTS tmp_driver_attendance1;
--  CREATE TEMPORARY TABLE tmp_driver_attendance1 AS
-- SELECT a.*,b.signInTime AS signOutTime FROM (
--  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
--  FROM (
--  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
--    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
--  FROM (
--    SELECT * FROM driver_attendance 
--    ORDER BY vehicleNo ,signInTime ASC)t1 
--  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  a
--   LEFT JOIN 
   
--   (
--  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
--  FROM (
--  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
--    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
--  FROM (
--    SELECT * FROM driver_attendance 
--   ORDER BY vehicleNo ,signInTime ASC)t1 
--  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  b ON a.r=b.r-1 AND a.deviceid=b.deviceid ;
 
  
  
  
  
  -- 如有需要打开 2019-12-19注释

 --   insert into stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
  --     groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,month,
 --      actiontype,actionTypeDesc,totalNum,scores,total_seconds)
 -- SELECT t1.driverId,t1.driverName,NULL,t2.lineDeptId,t2.lineName,
 --   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
 --   t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
 --   'overspeed','超速',0 AS times,0,0
--  FROM (
--    SELECT DISTINCT driverid,driverName,linedeptid FROM tmp_driver_attendance1 a
--    WHERE 
  --  -- signInTime>=p_date - interval day(p_date)-1 day 
  --  -- and signInTime<last_day(p_date)+interval 1 day and 
  --  -- 孙天恒 2017/09/25 修改，由于司机考勤方式改变，表中签到时间停留在4月，因此去掉该条件
--    NOT EXISTS(SELECT 1 FROM stat_driving_violation_summary b
--       WHERE b.driverid=a.driverId AND b.stat_date=v_stat_date
    
 --         AND deviceid IN (SELECT deviceid FROM v_vehicleinfo WHERE companyDeptId=v_companDeptId)
--        )  and ((a.signInTime>v_begin_time and a.signOutTime <v_end_time and a.signOutTime is not null) or a.signOutTime is null )) t1
-- INNER JOIN v_lineinfo t2 ON t1.linedeptid=t2.linedeptid ;  
	
FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
END WHILE ;
CLOSE cur01;
 
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_driveranalyses_with_statdate_20191219
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_driveranalyses_with_statdate_20191219`;
delimiter ;;
CREATE PROCEDURE `p_stat_driveranalyses_with_statdate_20191219`(IN p_date DATE)
BEGIN
# 新考勤 2019年3月6日 韩亚璋
DECLARE v_companDeptId INT;
DECLARE v_stat_day INT;
DECLARE v_statisticalDate INT;
DECLARE v_begin_time DATE;
DECLARE v_end_time DATE;
DECLARE v_stat_date DATE;
-- 游标  统计的时候区分公司
DECLARE cur01 CURSOR  FOR
SELECT companyDeptId,stat_day,CASE statisticalDate WHEN '下月' THEN 1 ELSE 2 END AS statisticalDate FROM  `t_company_month_compare_date` ;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
 SET @cursor_not_found:=FALSE;
 OPEN cur01;
 FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
 
 
 
 
 
 
WHILE NOT @cursor_not_found DO 
-- 确定 统计月份       
       IF v_statisticalDate=1  -- 下月 统计
       THEN    
       IF DAY(p_date)>v_stat_day 
		THEN  	-- 属于当月		
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE    -- 属于上月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY -INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_begin_time:=v_stat_date+INTERVAL v_stat_day -1 DAY;	-- 开始时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_begin_time) -- 越界 取v_begin_time 所在月1号
			THEN SET v_begin_time:=v_begin_time -INTERVAL DAY(v_begin_time) -1 DAY;
		END IF;
		SET v_end_time:=v_stat_date+INTERVAL 1 MONTH +INTERVAL v_stat_day-1 DAY; -- 结束时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)-1   -- 越界 取 v_end_time 所在月份1号
			  THEN SET v_end_time:=v_end_time - INTERVAL DAY(v_end_time)-1  DAY ;
		END IF;		
	ELSE 			-- 当月 统计
		IF DAY(p_date)< v_stat_day   
		THEN  		-- 属于当月	
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE 		-- 属于下月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY +INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_end_time:=v_stat_date+INTERVAL v_stat_day-1 DAY ;		
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)  -- 越界 取v_end_time所在月1号
			  THEN SET v_end_time:=v_end_time -INTERVAL DAY(v_end_time)-1 DAY;
		END IF;
	SET v_begin_time:=v_stat_date-INTERVAL 1 MONTH+INTERVAL v_stat_day-1 DAY ;	
	-- 避免 越界
		IF MONTH(v_stat_date)=MONTH(v_begin_time)       -- 越界 取v_begin_time所在月1号
			  THEN SET v_begin_time:=v_begin_time- INTERVAL DAY(v_begin_time)-1 DAY ;
		END IF;	
	END IF;
	SELECT  v_begin_time,v_end_time,v_stat_date,v_stat_day;
	
	
	 DELETE FROM stat_driving_violation_summary WHERE stat_date=v_stat_date and companyId=v_companDeptId; 
	
	 INSERT INTO stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,MONTH,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
	SELECT t.driverId,t.driverName,t.deviceid,t2.lineDeptId,t2.lineName,
   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
   t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
   t.actiontype,t.actionTypeDesc,cnt AS times,t.scores,total_seconds
  FROM (
    SELECT a.vehicledeviceid AS deviceid,actiontype,actionTypeDesc,SUM(score) AS scores,COUNT(1) AS cnt,
    -- 超速时长 和 夜间行驶是计算时长的 
    CASE WHEN actionType IN ('overspeed','driveInNight') THEN SUM(TIMESTAMPDIFF(SECOND,begin_time,end_time)) ELSE 0 END AS total_seconds,
	MAX(driverId) AS driverid,MAX(driverName) AS drivername,lineDeptId
	FROM stat_driving_violation_detail a 
    /* inner join driver_attendance t1 
     on a.vehicledeviceid=t1.deviceid 
     and t1.signIntime >= a.stat_date and t1.signIntime < a.stat_date+interval 1 day */
    WHERE a.stat_date >= v_begin_time
    AND a.stat_date < v_end_time
    AND IFNULL(driverName,'')<>''
    AND vehicledeviceid IN (SELECT deviceid FROM v_vehicleinfo WHERE companyDeptId=v_companDeptId)
    -- group by 添加  driverName 条件
    GROUP BY a.vehicledeviceid,lineDeptId,actiontype,actionTypeDesc,driverName ) t
  INNER JOIN v_lineInfo t2 ON t.lineDeptId=t2.linedeptid ;
  
  
  
  
  
  
  -- 根据签到表 获取 有 签到和签退时间的 且  车辆最后一次签到的签退时间为null 的车辆驾驶员关系表 ，  用来代替 driver_attendance
  
  DROP TABLE IF EXISTS tmp_driver_attendance1;
  CREATE TEMPORARY TABLE tmp_driver_attendance1 AS
SELECT a.*,b.signInTime AS signOutTime FROM (
  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
  FROM (
  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
  FROM (
    SELECT * FROM driver_attendance 
    ORDER BY vehicleNo ,signInTime ASC)t1 
  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  a
   LEFT JOIN 
   
   (
  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
  FROM (
  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
  FROM (
    SELECT * FROM driver_attendance 
    ORDER BY vehicleNo ,signInTime ASC)t1 
  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  b ON a.r=b.r-1 AND a.deviceid=b.deviceid ;
 
  
  
  
  
  
    insert into stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,month,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
  SELECT t1.driverId,t1.driverName,NULL,t2.lineDeptId,t2.lineName,
    t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
    t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
    'overspeed','超速',0 AS times,0,0
  FROM (
    SELECT DISTINCT driverid,driverName,linedeptid FROM tmp_driver_attendance1 a
    WHERE 
    -- signInTime>=p_date - interval day(p_date)-1 day 
    -- and signInTime<last_day(p_date)+interval 1 day and 
    -- 孙天恒 2017/09/25 修改，由于司机考勤方式改变，表中签到时间停留在4月，因此去掉该条件
    NOT EXISTS(SELECT 1 FROM stat_driving_violation_summary b
       WHERE b.driverid=a.driverId AND b.stat_date=v_stat_date
    
           AND deviceid IN (SELECT deviceid FROM v_vehicleinfo WHERE companyDeptId=v_companDeptId)
        )  and ((a.signInTime>v_begin_time and a.signOutTime <v_end_time and a.signOutTime is not null) or a.signOutTime is null )) t1
  INNER JOIN v_lineinfo t2 ON t1.linedeptid=t2.linedeptid ;  
	
FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
END WHILE ;
CLOSE cur01;
 
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_driveranalyses_with_statdate_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_driveranalyses_with_statdate_old`;
delimiter ;;
CREATE PROCEDURE `p_stat_driveranalyses_with_statdate_old`(IN p_date DATE)
BEGIN
DECLARE v_companDeptId INT;
DECLARE v_stat_day INT;
DECLARE v_statisticalDate INT;
DECLARE v_begin_time DATE;
DECLARE v_end_time DATE;
DECLARE v_stat_date DATE;
-- 游标  统计的时候区分公司
DECLARE cur01 CURSOR  FOR
SELECT companyDeptId,stat_day,CASE statisticalDate WHEN '下月' THEN 1 ELSE 2 END AS statisticalDate FROM  `t_company_month_compare_date` ;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
 SET @cursor_not_found:=FALSE;
 OPEN cur01;
 FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
 
 
 
 
 
 
WHILE NOT @cursor_not_found DO 
-- 确定 统计月份       
       IF v_statisticalDate=1  -- 下月 统计
       THEN    
       IF DAY(p_date)>v_stat_day 
		THEN  	-- 属于当月		
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE    -- 属于上月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY -INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_begin_time:=v_stat_date+INTERVAL v_stat_day -1 DAY;	-- 开始时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_begin_time) -- 越界 取v_begin_time 所在月1号
			THEN SET v_begin_time:=v_begin_time -INTERVAL DAY(v_begin_time) -1 DAY;
		END IF;
		SET v_end_time:=v_stat_date+INTERVAL 1 MONTH +INTERVAL v_stat_day-1 DAY; -- 结束时间
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)-1   -- 越界 取 v_end_time 所在月份1号
			  THEN SET v_end_time:=v_end_time - INTERVAL DAY(v_end_time)-1  DAY ;
		END IF;		
	ELSE 			-- 当月 统计
		IF DAY(p_date)< v_stat_day   
		THEN  		-- 属于当月	
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY ;
		ELSE 		-- 属于下月
			SET v_stat_date:= p_date - INTERVAL DAY(p_date)-1 DAY +INTERVAL 1 MONTH;
		END IF;
-- 确定统计范围
	SET v_end_time:=v_stat_date+INTERVAL v_stat_day-1 DAY ;		
	-- 避免 越界
		IF MONTH(v_stat_date)<>MONTH(v_end_time)  -- 越界 取v_end_time所在月1号
			  THEN SET v_end_time:=v_end_time -INTERVAL DAY(v_end_time)-1 DAY;
		END IF;
	SET v_begin_time:=v_stat_date-INTERVAL 1 MONTH+INTERVAL v_stat_day-1 DAY ;	
	-- 避免 越界
		IF MONTH(v_stat_date)=MONTH(v_begin_time)       -- 越界 取v_begin_time所在月1号
			  THEN SET v_begin_time:=v_begin_time- INTERVAL DAY(v_begin_time)-1 DAY ;
		END IF;	
	END IF;
	SELECT  v_begin_time,v_end_time,v_stat_date,v_stat_day;
	
	
	 DELETE FROM stat_driving_violation_summary WHERE stat_date=v_stat_date and companyId=v_companDeptId; 
	
	 INSERT INTO stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,MONTH,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
	SELECT t.driverId,t.driverName,t.deviceid,t2.lineDeptId,t2.lineName,
   t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
   t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
   t.actiontype,t.actionTypeDesc,cnt AS times,t.scores,total_seconds
  FROM (
    SELECT a.vehicledeviceid AS deviceid,actiontype,actionTypeDesc,SUM(score) AS scores,COUNT(1) AS cnt,
    -- 超速时长 和 夜间行驶是计算时长的 
    CASE WHEN actionType IN ('overspeed','driveInNight') THEN SUM(TIMESTAMPDIFF(SECOND,begin_time,end_time)) ELSE 0 END AS total_seconds,
	MAX(driverId) AS driverid,MAX(driverName) AS drivername,lineDeptId
	FROM stat_driving_violation_detail a 
    /* inner join driver_attendance t1 
     on a.vehicledeviceid=t1.deviceid 
     and t1.signIntime >= a.stat_date and t1.signIntime < a.stat_date+interval 1 day */
    WHERE a.stat_date >= v_begin_time
    AND a.stat_date < v_end_time
    AND IFNULL(driverName,'')<>''
    AND vehicledeviceid IN (SELECT deviceid FROM v_vehicleinfo WHERE companyDeptId=v_companDeptId)
    GROUP BY a.vehicledeviceid,lineDeptId,actiontype,actionTypeDesc ) t
  INNER JOIN v_lineInfo t2 ON t.lineDeptId=t2.linedeptid ;
  
    
  
    insert into stat_driving_violation_summary(driverId,driverName,deviceid,lineId,lineName,
       groupId,groupName,subCompanyId,subCompanyName,companyId,companyName,stat_date,month,
       actiontype,actionTypeDesc,totalNum,scores,total_seconds)
  SELECT t1.driverId,t1.driverName,NULL,t2.lineDeptId,t2.lineName,
    t2.groupDeptId,t2.groupName,t2.subCompanyDeptId,t2.subCompanyName,t2.companyDeptId,
    t2.companyName,v_stat_date AS stat_date,MONTH(v_stat_date),
    'overspeed','超速',0 AS times,0,0
  FROM (
    SELECT DISTINCT driverid,driverName,linedeptid FROM driver_attendance a
    WHERE 
    -- signInTime>=p_date - interval day(p_date)-1 day 
    -- and signInTime<last_day(p_date)+interval 1 day and 
    -- 孙天恒 2017/09/25 修改，由于司机考勤方式改变，表中签到时间停留在4月，因此去掉该条件
    NOT EXISTS(SELECT 1 FROM stat_driving_violation_summary b
    WHERE b.driverid=a.driverId AND b.stat_date=v_stat_date
           AND deviceid IN (SELECT deviceid FROM v_vehicleinfo WHERE companyDeptId=v_companDeptId)
        ) ) t1
  INNER JOIN v_lineinfo t2 ON t1.linedeptid=t2.linedeptid AND t2.companyDeptId=v_companDeptId ;  
	
FETCH cur01 INTO v_companDeptId,v_stat_day,v_statisticalDate;
END WHILE ;
CLOSE cur01;
 
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_driver_rank
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_driver_rank`;
delimiter ;;
CREATE PROCEDURE `p_stat_driver_rank`(p_date date)
BEGIN
  -- 司机驾驶行为月统计扣分排名 
  declare v_month date;
  declare v_year date;
  
  set v_month :=last_day(p_date)+interval 1 day-interval 1 month ;
  
  delete from stat_driving_violation_rank where stat_date=v_month;
  
  -- 按月汇总统计
  -- driver
  insert into stat_driving_violation_rank(type,deptId,deptName,parentDeptId,scores,
        stat_date,rank,statDateType)
  select 'driver' as type,driverId as deptId,driverName as name,
     line.lineId as parentDeptId,total_scores,stat_date,rank,'month'
  from (
  select driverId,driverName,lineId,total_scores,stat_date,
      if(@pre_lineId<>lineId,@rank:=1,if(@pre_total_scores=total_scores,@rank,@rank:=@rank+1)) as rank,
      @pre_lineId:=lineId,@pre_total_scores:=total_scores
  from (
  -- select driverId,driverName,lineId,sum(scores) as total_scores,v_month as stat_date 
  -- from stat_driving_violation_summary
  -- where stat_date=v_month
  -- and driverName is not null
  -- group by lineId,driverId,driverName 
  -- order by lineId,total_scores desc
  -- 孙天恒 2017/07/17
  SELECT driverId,driverName,lineId,SUM(scores) AS total_scores,v_month AS stat_date
  FROM stat_driving_violation_summary
  WHERE stat_date=v_month
  AND driverName IS NOT NULL
  GROUP BY lineId,driverId,driverName
  ORDER BY lineId,total_scores DESC
  ) t1 
  inner join (select @pre_lineId:=-9999,@rank=0,@pre_total_scores:=0) t2 )tt 
  inner join t_lineinfo line on tt.lineId=line.deptId;
  
  -- line
  insert into stat_driving_violation_rank(type,deptId,deptName,parentDeptId,scores,
        stat_date,rank,statDateType)
  select 'line' as type,linedeptId as deptId,lineName as name,
     groupDeptId as parentDeptId,total_scores,stat_date,rank,'month'
  from (
  select groupDeptId,linedeptId,lineName,total_scores,stat_date,
      if(@pre_groupDeptId<>groupDeptId,@rank:=1,if(@pre_total_scores=total_scores,@rank,@rank:=@rank+1)) as rank,
      @pre_groupDeptId:=groupDeptId,@pre_total_scores:=total_scores
  from (
  -- select l.groupDeptId,l.linedeptId,s.lineName,sum(scores) as total_scores,v_month as stat_date
  -- from stat_driving_violation_summary s
  -- inner join v_lineinfo l on s.lineId=l.lineId
  -- where stat_date=v_month
  -- group by l.groupDeptId,l.linedeptId,s.lineName
  -- order by l.groupDeptId,total_scores desc
  -- 孙天恒 2017/07/17 修改
  SELECT s.groupId AS groupDeptId,s.lineId AS linedeptId,s.lineName,SUM(scores) AS total_scores,v_month AS stat_date
  FROM stat_driving_violation_summary s
  INNER JOIN t_lineinfo l ON s.lineId=l.deptId
  WHERE stat_date=v_month
  GROUP BY s.groupId,s.lineId,s.lineName
  ORDER BY s.groupId,total_scores DESC
  ) t1 
  inner join (select @pre_groupDeptId:=-9999,@rank=0,@pre_total_scores:=0) t2 )tt ;  
  
  -- group 
  insert into stat_driving_violation_rank(type,deptId,deptName,parentDeptId,scores,
        stat_date,rank,statDateType)
  select 'group' as type,groupDeptId as deptId,groupName as name,
     subCompanyDeptId as parentDeptId,total_scores,stat_date,rank,'month'
  from (
  select subCompanyDeptId,groupDeptId,groupName,total_scores,stat_date,
      if(@pre_subCompanyDeptId<>subCompanyDeptId,@rank:=1,if(@pre_total_scores=total_scores,@rank,@rank:=@rank+1)) as rank,
      @pre_subCompanyDeptId:=subCompanyDeptId,@pre_total_scores:=total_scores
  from (
  -- select l.subCompanyDeptId,l.groupDeptId,l.groupName,sum(scores) as total_scores,v_month as stat_date 
  -- from stat_driving_violation_summary s 
  -- inner join v_lineinfo l on s.lineId=l.lineId
  -- where stat_date=v_month
  -- group by l.subCompanyDeptId,l.groupDeptId,l.groupName
  -- order by l.subCompanyDeptId,total_scores desc
  -- 孙天恒 2017/07/17
  SELECT s.subCompanyId AS subCompanyDeptId,s.groupId AS groupDeptId,s.groupName,SUM(scores) AS total_scores,v_month AS stat_date
  FROM stat_driving_violation_summary s
  INNER JOIN t_lineinfo l ON s.lineId=l.deptId
  WHERE stat_date=v_month
  GROUP BY s.subCompanyId,s.groupId,s.groupName
  ORDER BY s.subCompanyId,total_scores DESC
  ) t1 
  inner join (select @pre_subCompanyDeptId:=-9999,@rank=0,@pre_total_scores:=0) t2 )tt ;
  
  -- subcompany
  insert into stat_driving_violation_rank(type,deptId,deptName,parentDeptId,scores,
        stat_date,rank,statDateType)
  select 'subcompany' as type,subCompanyDeptId as deptId,subCompanyName as name,
     companyDeptId as parentDeptId,total_scores,stat_date,rank,'month'
  from (
  select companyDeptId,subCompanyDeptId,subCompanyName,total_scores,stat_date,
      if(@pre_companyDeptId<>companyDeptId,@rank:=1,if(@pre_total_scores=total_scores,@rank,@rank:=@rank+1)) as rank,
      @pre_companyDeptId:=companyDeptId,@pre_total_scores:=total_scores
  from (
  -- select l.companyDeptId,l.subCompanyDeptId,l.subCompanyName,sum(scores) as total_scores,v_month as stat_date 
  -- from stat_driving_violation_summary s 
  -- inner join v_lineinfo l on s.lineId=l.lineId
  -- where stat_date=v_month
  -- group by l.companyDeptId,l.subCompanyDeptId,l.subCompanyName
  -- order by l.companyDeptId,total_scores desc
  -- 孙天恒 2017/07/17 修改
  SELECT s.companyId AS companyDeptId, s.subCompanyId AS subCompanyDeptId, s.subCompanyName, SUM(scores) AS total_scores, v_month AS stat_date
  FROM stat_driving_violation_summary s INNER JOIN t_lineinfo l ON s.lineId = l.deptId
  WHERE stat_date = v_month
  GROUP BY s.companyId, s.subCompanyId, s.subCompanyName
  ORDER BY s.companyId, total_scores DESC
  ) t1 
  inner join (select @pre_companyDeptId:=-9999,@rank=0,@pre_total_scores:=0) t2 )tt ;
  
  -- 按年排名 
  -- 2018.01.09 by heli .修复bug：1、delete 语句增加条件 statdatetype='year'
  --   2、下面insert语句增加条件 statdatetype='month'
  set v_year := v_month -interval month(p_date)-1 month;
  
  delete from stat_driving_violation_rank where statdatetype='year'
     and stat_date=v_year;
  
  insert into stat_driving_violation_rank(type,deptId,deptName,parentDeptId,scores,
        stat_date,rank,statDateType)
  select type,deptId,deptName,parentDeptId,total_scores,v_year,rank,'year'
  from (
  select type,deptId,deptName,parentDeptId,total_scores,
    case when @pre_type<>type or @pre_parentDeptId<>parentDeptId then @rank:=1
	when @pre_type=type and @pre_parentDeptId=parentDeptId and @pre_total_scores=total_scores then @rank
    else @rank:=@rank+1 end as rank,
     @pre_type:=type,@pre_parentDeptId:=parentDeptId,@pre_total_scores:=total_scores
  from (
  select type,deptId,deptName,parentDeptId,sum(scores) as total_scores
  from stat_driving_violation_rank  
  where stat_date >=v_year
  and stat_date <v_year +interval 1 year
  and statdatetype='month'
  group by type,deptId,deptName,parentDeptId
  order by type,parentDeptId,total_scores desc) t1
  inner join (select @pre_type:='',@pre_parentDeptId:=-999,@pre_total_scores:=0,@rank:=0)t2
  ) tt ;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy`(IN p_date DATE)
BEGIN
 declare v_logid bigint;
  -- 记录日志
insert into maintain_events_log(eventName,startTime,finishTime)values('p_stat_energy',now(), null);
select max(id) into v_logid from maintain_events_log;
-- 先删除避免重复统计
delete from stat_vehicleenergy where stat_date=p_date;
-- 1. 获取结束时间
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'获取结束时间');
DROP TABLE IF EXISTS a;
CREATE TEMPORARY TABLE a  SELECT vehicledeviceid,MAX(TIME) AS end_time FROM t_electricvehicleana WHERE  TIME >= p_date AND TIME < p_date+INTERVAL 1 DAY GROUP BY vehicledeviceid;
-- 2. 获取结束时能耗
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'获取结束能耗');
DROP TABLE IF EXISTS b;
CREATE TEMPORARY TABLE b  SELECT a.vehicledeviceid, consumeperday FROM a INNER JOIN t_electricvehicleana ON a.vehicledeviceid = t_electricvehicleana.vehicledeviceid AND a.end_time = TIME;
-- 3. 获取加油量
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'获取加油量');
DROP TABLE IF EXISTS c;
CREATE TEMPORARY TABLE c SELECT vehicleno,SUM(IF(energytype="gas",energyVolume,0))AS gas
                 ,SUM(IF(energytype="oil",energyVolume,0))AS oil
                 ,SUM(IF(energytype="ele",energyVolume,0))AS ele  
                 FROM t_energyinfo GROUP BY vehicleno;
                 
-- 4. 组织数据
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'组织数据');
INSERT INTO stat_vehicleenergy(
                                      deviceId,
                                      vehicleNo,
                                      motorType,
                                      vehicleType,
                                      gasStandard,
                                      gasAvg,
                                      gasInstant,
                                      gasHundredMiles,
                                      gasTotal,
                                      gasSumAll,
                                      fuleStandard,
                                      fuleAvg,
                                      fuleInstant,
                                      fuleHundredMiles,
                                      fuleTotal,
                                      fuleSumAll,
                                      elecStandard,
                                      elecAvg,
                                      elecPerDay,
                                        elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                      elecTotal,
                                      elecSumAll,
                                      energyStandard,
                                      deptId,
                                      stat_date)
  SELECT
                                      m.deviceId AS  deviceId,
                                      n.vehicleNo AS vehicleNo,
                                      n.motortype AS motorType,
                                      n.`vehicleType` AS vehicleType,
                                      n.`gasCost` AS gasStandard,
                                      m.gasAvg AS gasAvg,
                                      0 AS gasInstant,
                                      m.gasHundredMiles AS gasHundredMiles,
                                      m.gasTotal AS gasTotal,
                                      c.gas AS gasSumAll,
                                      n.`oilCost` AS fuleStandard,
                                      m.fuleAvg AS fuleAvg,
                                      0 AS fuleInstant,
                                      m.fuleHundredMiles AS fuleHundredMiles,
                                      m.fuleTotal AS fuleTotal,
                                      c.oil AS fuleSumAll,
                                      n.`eleCost` AS elecStandard,
                                      m.elecAvg AS elecAvg,
                                      b.consumeperday AS elecPerDay,
                                      m.elecHundredMiles AS elecHundredMiles,
                                      m.elecTotal AS elecTotal,
                                      c.ele AS elecSumAll,
                                      (CASE n.motorType
                                          WHEN '1' THEN n.`oilCost`
                                          WHEN '2' THEN n.`eleCost`
                                          WHEN '3' THEN n.`oilCost` + n.`eleCost`
                                          WHEN '4' THEN n.`gasCost`
                                          WHEN '5' THEN n.`gasCost` + n.`eleCost`
                                        END) AS energyStandard,
                                      n.`deptId` AS deptId,
                                      p_date AS stat_date
       FROM stat_energy_compare m INNER JOIN t_vehicleinfo n ON m.`deviceId`=n.`deviceId`
       INNER JOIN b ON m.`deviceId`=b.vehicledeviceid LEFT JOIN c ON c.`vehicleNo`=n.`vehicleNo` 
       WHERE m.timetype = '1' AND stat_date = p_date;
-- 记录日志
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'记录日志');
update maintain_events_log set finishTime=now() where id=v_logid;
INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments)VALUES('p_stat_energy',NOW(), NULL,'此存储过程执行结束');   
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_compare
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_compare`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_compare`(IN p_shtime DATETIME, IN p_ehtime DATETIME, IN p_dtime DATETIME,
IN p_mtime  DATETIME)
BEGIN
    -- 功能:获取车辆能耗对比图所需数据
    --    返回所选时间类型内，所选车辆的能耗的统计结果
    -- author:fanyin,2017/10/16
DECLARE shtime DATETIME; -- 统计的开始时间
DECLARE ehtime DATETIME; -- 统计的结束时间（前一小时）
DECLARE dtime DATETIME; -- 统计的结束日期（当天）
DECLARE mtime DATETIME; -- 统计的结束日期（当月）
DECLARE v_logid BIGINT; -- 用于日志
-- 记录日志
INSERT INTO maintain_events_log (eventName, startTime, finishTime)VALUES ('p_stat_energy_compare', NOW(), NULL);
SELECT MAX(id)INTO v_logid FROM maintain_events_log; 
IF ISNULL(p_shtime)
THEN
  SET shtime := DATE_FORMAT(now() - INTERVAL 2 HOUR, '%Y-%m-%d %H:00:00');
ELSE
  SET shtime := p_shtime;
END IF;
IF ISNULL(p_ehtime)
THEN
  SET ehtime := DATE_FORMAT(now() - INTERVAL 1 HOUR, '%Y-%m-%d %H:00:00');
ELSE
  SET ehtime := p_ehtime;
END IF;
IF ISNULL(p_dtime)
THEN
  SET dtime := CURDATE();
ELSE
  SET dtime := p_dtime;
END IF;
IF ISNULL(p_mtime)
THEN
  SET mtime := DATE_ADD(CURDATE(), INTERVAL -DAY(CURDATE()) + 1 DAY);
ELSE
  SET mtime := p_mtime;
END IF;
    
-- 1.获取时间
DROP TABLE IF EXISTS a;
create TEMPORARY table a  select vehicledeviceid,max(time) as end_time,min(time)as start_time from t_vehicleanaloginfo where  TIME >= shtime AND TIME < ehtime group by vehicledeviceid;
-- 2. 获取结束时里程,油耗，气耗
DROP TABLE IF EXISTS c_end;
create TEMPORARY table c_end  select a.vehicledeviceid, mileage,totalfuelcost,totalgasuse from a inner join t_vehicleanaloginfo on a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid and a.end_time = time;
-- 3. 获取开始时里程,油耗，气耗
DROP TABLE IF EXISTS c_start;
CREATE TEMPORARY TABLE c_start  SELECT a.vehicledeviceid, mileage,totalfuelcost,totalgasuse FROM a INNER JOIN t_vehicleanaloginfo ON a.vehicledeviceid = t_vehicleanaloginfo.vehicledeviceid AND a.start_time = TIME;
-- 4. 整理计算实时里程,油耗，气耗
DROP TABLE IF EXISTS c;
CREATE TEMPORARY TABLE c  SELECT c_end.vehicledeviceid, (c_end.mileage-c_start.mileage)as mileage,(c_end.totalfuelcost-c_start.totalfuelcost)AS totalfuelcost,(c_end.totalgasuse-c_start.totalgasuse)AS totalgasuse FROM c_end INNER JOIN c_start ON c_end.vehicledeviceid = c_start.vehicledeviceid ;
-- 5.获取时间
DROP TABLE IF EXISTS f;
CREATE TEMPORARY TABLE f  SELECT vehicledeviceid,MAX(TIME) AS end_time,MIN(TIME) AS start_time  FROM t_electricvehicleana WHERE  TIME >= shtime AND TIME < ehtime GROUP BY vehicledeviceid;
-- 6.获取结束时电耗
DROP TABLE IF EXISTS f_end;
CREATE TEMPORARY TABLE f_end  SELECT f.vehicledeviceid,bmstotalconsume FROM t_electricvehicleana INNER JOIN f ON f.vehicledeviceid=t_electricvehicleana.`vehicledeviceid`AND f.end_time = time;
-- 7.获取开始时电耗
DROP TABLE IF EXISTS f_start;
CREATE TEMPORARY TABLE f_start  SELECT f.vehicledeviceid,bmstotalconsume FROM t_electricvehicleana INNER JOIN f ON f.vehicledeviceid=t_electricvehicleana.`vehicledeviceid`AND f.start_time = TIME;
-- 8.合并能耗信息
DROP TABLE IF EXISTS b; 
CREATE TEMPORARY TABLE b
select c.*,n.bmstotalconsume from (
select f_end.vehicledeviceid, (f_end.bmstotalconsume-f_start.bmstotalconsume)as bmstotalconsume from f_end  inner join f_start on f_end.vehicledeviceid=f_start.`vehicledeviceid`)n inner join c on c.vehicledeviceid=n.vehicledeviceid;
-- 9.组织数据
DROP TABLE IF EXISTS tmp_table;
CREATE TEMPORARY TABLE tmp_table
 select d.vehicleno ,d.deviceid, d.motorType, totalfuelcost as fuleTotal, totalgasuse as gasTotal, bmstotalconsume as electotal,
        IF(mileage > 0, ROUND(totalfuelcost / mileage, '2'), 0)as fuleAvg,
        IF(mileage > 0, ROUND(totalgasuse / mileage, '2'), 0)as gasAVG,
        IF(mileage > 0, ROUND(bmstotalconsume / mileage, '2'), 0)as elecAvg,
        IF(mileage > 0, ROUND(totalfuelcost / mileage, '2') * 100, 0)as FuLEHUndredMiles,
        IF(mileage > 0, ROUND(totalgasuse / mileage, '2') * 100, 0)as gasHundredMileS , 
        IF(mileage > 0, ROUND(bmstotalconsume / mileage, '2') * 100, 0)as ELEcHundredMiles
 from b inner join t_vehicleinfo d on b.vehicledeviceid=d.deviceid;
-- 10.组织数据后处理
UPDATE tmp_table SET  fuleTotal =0,        fuleAvg=0  ,        fuleHundredMiles =0 WHERE motorType=2 OR   motorType=4 OR motorType=5;
UPDATE tmp_table SET  gasTotal =0,          gasAvg =0  ,        gasHundredMiles =0 WHERE motorType=1 OR   motorType=3 OR motorType=2;
UPDATE tmp_table SET  elecTotal=0,        elecAvg=0  ,        elecHundredMiles=0 WHERE motorType=1 OR   motorType=4 ;
-- 11.更新数据
DELETE FROM stat_energy_compare WHERE stat_date = ehtime;
INSERT INTO stat_energy_compare SELECT * FROM(
                                 select vehicleNo,
                                        deviceId,
                                        motorType,
                                        '2'    AS timetype,
                                        ehtime AS TIME,
                                        ehtime AS stat_date,
                                        gasAvg,
                                        gasHundredMiles,
                                        gasTotal,
                                        fuleAvg,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        elecAvg,
                                        elecHundredMiles, 
                                        elecTotal from tmp_table where gasHundredMiles>=0 and fuleHundredMiles>=0 and elecHundredMiles>=0 order by time desc)w group by vehicleNo;
                                        
DELETE FROM stat_energy_compare WHERE stat_date = DATE_FORMAT(dtime, '%Y-%m-%d');
INSERT INTO stat_energy_compare SELECT * FROM(
                                 SELECT vehicleNo,
                                        deviceId,
                                        motorType,
                                        '1'  AS timetype,
                                        TIME,
                                        DATE_FORMAT(dtime, '%Y-%m-%d')AS stat_date,
                                        gasAvg,
                                        gasHundredMiles,
                                        gasTotal,
                                        fuleAvg,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        elecAvg,
                                        elecHundredMiles, 
                                        elecTotal FROM stat_energy_compare 
                                        WHERE timetype = '2' AND stat_date BETWEEN dtime AND DATE_ADD(dtime, INTERVAL 1 DAY) ORDER BY TIME DESC )w GROUP BY vehicleNo;
                                        
DELETE FROM stat_energy_compare WHERE stat_date = DATE_FORMAT(mtime, '%Y-%m');
INSERT INTO stat_energy_compare select * from(
                                 SELECT vehicleNo,
                                        deviceId,
                                        motorType,
                                        '0'  AS timetype,
                                        TIME,
                                        DATE_FORMAT(mtime, '%Y-%m') AS stat_date,
                                        gasAvg,
                                        gasHundredMiles,
                                        gasTotal,
                                        fuleAvg,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        elecAvg,
                                        elecHundredMiles, 
                                        elecTotal FROM stat_energy_compare 
                                        WHERE timetype = '2'
                                        AND stat_date BETWEEN DATE_FORMAT(mtime, '%Y-%m-1') AND DATE_ADD(DATE_FORMAT(mtime, '%Y-%m-1'), INTERVAL 1 MONTH)order by time desc )w GROUP BY vehicleNo;  
-- 记录日志
UPDATE maintain_events_log SET finishTime = NOW() WHERE id = v_logid;                                                                            
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_compare_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_compare_old`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_compare_old`(IN p_shtime DATETIME, IN p_ehtime DATETIME, IN p_dtime DATETIME,
IN p_mtime  DATETIME)
main:BEGIN
    -- ----------------------------------------------------------------------
    -- 功能:获取车辆能耗对比图所需数据
    --    返回所选时间类型内，所选车辆的能耗的统计结果
    -- author:fanyin,2017/10/16
    DECLARE shtime DATETIME; -- 统计的开始时间
    DECLARE ehtime DATETIME; -- 统计的结束时间（前一小时）
    DECLARE dtime DATETIME; -- 统计的结束日期（当天）
    DECLARE mtime DATETIME; -- 统计的结束日期（当月）
    DECLARE has_ele BOOLEAN DEFAULT FALSE ;
    DECLARE has_gas_oil BOOLEAN DEFAULT FALSE ;
    DECLARE has_data BOOLEAN DEFAULT FALSE ;
    DECLARE v_vehicleNo VARCHAR(32);
    DECLARE v_deviceId VARCHAR(32);
    DECLARE v_motorType ENUM ('1', '2', '3', '4', '5');
    DECLARE v_fule, v_gas, v_last_fule, v_last_gas VARCHAR(45);
    DECLARE v_ele, v_last_ele, v_mile VARCHAR(10);
    DECLARE v_logid BIGINT; -- 用于日志
    DECLARE done INT DEFAULT FALSE;
    DECLARE cur CURSOR FOR SELECT
                             a.vehicleNo,
                             a.deviceId,
                             a.motorType
                           FROM t_vehicleinfo a;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    -- 记录日志
    INSERT INTO maintain_events_log (eventName, startTime, finishTime)
    VALUES ('p_stat_energy_compare', NOW(), NULL);
    SELECT MAX(id)
    INTO v_logid
    FROM maintain_events_log; -- 韩亚璋，添加2017/10/16
    IF ISNULL(p_shtime)
    THEN
      SET shtime := DATE_FORMAT(CURRENT_TIME() - INTERVAL 2 HOUR, '%Y-%m-%d %H:00:00');
    ELSE
      SET shtime := p_shtime;
    END IF;
    IF ISNULL(p_ehtime)
    THEN
      SET ehtime := DATE_FORMAT(CURRENT_TIME() - INTERVAL 1 HOUR, '%Y-%m-%d %H:00:00');
    ELSE
      SET ehtime := p_ehtime;
    END IF;
    IF ISNULL(p_dtime)
    THEN
      SET dtime := CURDATE();
    ELSE
      SET dtime := p_dtime;
    END IF;
    IF ISNULL(p_mtime)
    THEN
      SET mtime := DATE_ADD(CURDATE(), INTERVAL -DAY(CURDATE()) + 1 DAY);
    ELSE
      SET mtime := p_mtime;
    END IF;
    DROP TABLE IF EXISTS tmp_table;
    -- 创建临时表存储各个量
    CREATE TEMPORARY TABLE tmp_table (
      vehicleNo        VARCHAR(45)                    NOT NULL,
      deviceId         VARCHAR(16)                    NOT NULL,
      motorType        ENUM ('1', '2', '3', '4', '5') NOT NULL,
      mile             VARCHAR(10),
      fuleTotal        VARCHAR(10),
      gasTotal         VARCHAR(10),
      elecTotal        VARCHAR(10),
      fuleAvg          VARCHAR(10),
      gasAvg           VARCHAR(10),
      elecAvg          VARCHAR(10),
      fuleHundredMiles VARCHAR(10),
      gasHundredMiles  VARCHAR(10),
      elecHundredMiles VARCHAR(10)   -- 添加 百公里电耗  韩亚璋 2018年7月27日修改
    );
    OPEN cur;
    read_loop: LOOP
      SET done := FALSE;
      FETCH cur
      INTO v_vehicleNo, v_deviceId, v_motorType;
      IF done
      THEN
        LEAVE read_loop;
      END IF;
      -- 添加限制条件 2019年1月23日 韩亚璋
      SELECT MAX(mileage + 0) AS mileage
      INTO v_mile
      FROM t_vehicleanaloginfo
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId;
      SELECT MAX(totalfuelcost + 0) AS totalfuelcost
      INTO v_fule
      FROM t_vehicleanaloginfo
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId
      and totalfuelcost+0<100000 ;
      SELECT MAX(totalgasuse + 0) AS totalgasuse
      INTO v_gas
      FROM t_vehicleanaloginfo
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId
        AND totalgasuse+0<100000 ;
      SELECT MAX(bmstotalconsume + 0) AS bmstotalconsume
      INTO v_ele
      FROM t_electricvehicleana
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId;
      
      SELECT IF(COUNT(*) > 0, TRUE, FALSE) INTO has_gas_oil FROM  t_vehicleanaloginfo
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId
       AND totalfuelcost+0<100000 ;
      
      SELECT IF(COUNT(*) > 0, TRUE, FALSE) INTO has_ele FROM t_electricvehicleana
      WHERE TIME BETWEEN shtime AND ehtime AND vehicledeviceid = v_deviceId;
      IF has_gas_oil OR has_ele  THEN
        INSERT INTO tmp_table VALUES (v_vehicleNo, v_deviceId, v_motorType, v_mile, v_fule, v_gas, v_ele,
                                                   IF(v_mile > 0, ROUND(v_fule / v_mile, '2'), 0),
                                                   IF(v_mile > 0, ROUND(v_gas / v_mile, '2'), 0),
                                                   IF(v_mile > 0, ROUND(v_ele / v_mile, '2'), 0),
                                                   IF(v_mile > 0, ROUND(v_fule / v_mile, '2') * 100, 0),
                                      IF(v_mile > 0, ROUND(v_gas / v_mile, '2') * 100, 0) , 
                                    IF(v_mile > 0, ROUND(v_ele / v_mile, '2') * 100, 0)-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
        );
      END IF;
    END LOOP;
    -- 修改日期 2019年1月19日
    update tmp_table set  fuleTotal =0,        fuleAvg=0  ,        fuleHundredMiles =0 where motorType=2 or   motorType=4 or motorType=5;
     update tmp_table set  gasTotal =0,          gasAvg =0  ,        gasHundredMiles =0 where motorType=1 or   motorType=3 or motorType=2;
     update tmp_table set  elecTotal=0,        elecAvg=0  ,        elecHundredMiles=0 where motorType=1 or   motorType=4 ;  
    CLOSE cur;
    OPEN cur;
    read_loop: LOOP
      SET done := FALSE;
      FETCH cur
      INTO v_vehicleNo, v_deviceId, v_motorType;
      IF done
      THEN
        LEAVE read_loop;
      END IF;
      SELECT IF(COUNT(1)>0, TRUE, FALSE )
      INTO has_data
      FROM tmp_table
      WHERE vehicleNo = v_vehicleNo
      LIMIT 1;
      IF has_data THEN
            -- 更新小时最新数据,当天最新数据,当月最新数据
        DELETE FROM stat_energy_compare
        WHERE stat_date = ehtime AND vehicleNo = v_vehicleNo;
        INSERT INTO stat_energy_compare SELECT
                                        vehicleNo,
                                        deviceId,
                                        motorType,
                                        '2'    AS timetype,
                                        ehtime AS TIME,
                                        ehtime AS stat_date,
                                        gasAvg,
                                        gasHundredMiles,
                                        gasTotal,
                                        fuleAvg,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        elecAvg,
                                         elecHundredMiles, -- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                        elecTotal
                                      FROM tmp_table
                                      WHERE vehicleNo = v_vehicleNo
                                      LIMIT 1;
        DELETE FROM stat_energy_compare
        WHERE stat_date = DATE_FORMAT(dtime, '%Y-%m-%d') AND vehicleNo = v_vehicleNo;
        INSERT INTO stat_energy_compare SELECT
                                          vehicleNo,
                                          deviceId,
                                          motorType,
                                          '1'                            AS timetype,
                                          TIME,
                                          DATE_FORMAT(dtime, '%Y-%m-%d') AS stat_date,
                                          gasAvg,
                                          gasHundredMiles,
                                          gasTotal,
                                          fuleAvg,
                                          fuleHundredMiles,
                                          fuleTotal,
                                          elecAvg,
                                          elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                          elecTotal
                                        FROM stat_energy_compare
                                        WHERE timetype = '2' AND vehicleNo = v_vehicleNo AND stat_date BETWEEN dtime AND DATE_ADD(dtime, INTERVAL 1 DAY)
                                        ORDER BY TIME DESC
                                        LIMIT 1;
        DELETE FROM stat_energy_compare
        WHERE stat_date = DATE_FORMAT(mtime, '%Y-%m') AND vehicleNo = v_vehicleNo;
        INSERT INTO stat_energy_compare SELECT
                                          vehicleNo,
                                          deviceId,
                                          motorType,
                                          '0'                         AS timetype,
                                          TIME,
                                          DATE_FORMAT(mtime, '%Y-%m') AS stat_date,
                                          gasAvg,
                                          gasHundredMiles,
                                          gasTotal,
                                          fuleAvg,
                                          fuleHundredMiles,
                                          fuleTotal,
                                          elecAvg,
                                           elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                          elecTotal
                                        FROM stat_energy_compare
                                        WHERE timetype = '2' AND
                                              vehicleNo = v_vehicleNo AND
                                              stat_date BETWEEN DATE_FORMAT(mtime, '%Y-%m-1') AND DATE_ADD(DATE_FORMAT(mtime, '%Y-%m-1'), INTERVAL 1 MONTH)
                                        ORDER BY TIME DESC
                                        LIMIT 1;
      END IF;
    END LOOP;
    CLOSE cur;
    -- 记录日志
    UPDATE maintain_events_log
    SET finishTime = NOW()
    WHERE id = v_logid; -- 韩亚璋添加，2017/10/16
  END
;
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_ele
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_ele`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_ele`(IN p_deviceId VARCHAR(32), IN p_date DATE)
BEGIN
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(45);
  declare v_vehicleType varchar(32);
  declare v_motorType smallint;
  declare v_statndardCost LONG;
  declare v_deptId int;
  -- energy cost
  declare v_avgcost float;
  declare v_perdaycost LONG;
  -- declare v_realtimecost int;
  -- declare v_hundredcost int;
  declare v_totalcost LONG;
  declare v_totalmiles LONG;
  -- add energy
  declare v_volumeAdd LONG;
  declare not_found boolean default false;
  declare continue handler for not found set not_found=true;
  
  
  tx:begin
  -- 获取车辆基本信息 
  select deviceid,vehicleNo,vehicleType,motorType,deptId,eleCost 
  into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_deptId,v_statndardCost
  from t_vehicleinfo where deviceId=p_deviceId;
  
  -- 获取能耗 
  select bmstotalconsume,consumeperday   into v_totalcost,v_perdaycost
  from t_electricvehicleana 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date + INTERVAL 1 DAY -- 以前直接是p_date，连加1都没有,孙天恒2017-05-27修改
  order by time desc limit 1 ;
  
  -- 如果没有数据直接退出 
  if not_found then
    leave tx;
  end if;
  
  -- 获取加电量 
  select energyVolume into v_volumeAdd
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='ele' ;
  
  select accruedmiles into v_totalmiles from t_vehiclemiles
  where vehicledeviceid=p_deviceId and stat_date=p_date;
  
  if v_totalmiles > 0 then
    set v_avgcost:=v_totalcost/v_totalmiles ;
  else 
    set v_avgcost:=0 ;
  end if;
  
  -- 插入统计数据 
  insert into stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    elecStandard,elecAvg,elecTotal,elecPerDay,elecSumAll,deptId,stat_date)
  values(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_statndardCost,
     v_avgcost,v_totalcost,v_perdaycost,v_volumeAdd,v_deptId,p_date);
  end tx;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_gas
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_gas`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_gas`(IN p_deviceId VARCHAR(32), IN p_date DATE)
BEGIN
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(45);
  declare v_vehicleType varchar(32);
  declare v_motorType smallint;
  declare v_statndardCost LONG;
  declare v_deptId int;
  -- energy cost
  declare v_avgcost LONG;
  declare v_realtimecost LONG;
  declare v_hundredcost LONG;
  declare v_totalcost LONG;
  -- add energy
  declare v_volumeAdd LONG;
  declare not_found boolean default false;
  declare continue handler for not found set not_found=true;
  
  tx:begin
  -- 获取车辆基本信息 
  select deviceid,vehicleNo,vehicleType,motorType,deptId,gasCost 
  into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_deptId,v_statndardCost
  from t_vehicleinfo where deviceId=p_deviceId;
  
  -- 获取能耗 
  select singletotalgasuse,realtimegasuse,hundredgasuse,totalgasuse
  into v_avgcost,v_realtimecost,v_hundredcost,v_totalcost
  from t_vehicleanaloginfo 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date+1
  order by time desc limit 1 ;
  -- 如果没有数据直接退出 ， 修改为如果该车有历史数据就插入,否则退出，韩亚璋2017年10月19日修改
  if not_found  then
    
     SELECT   deviceId,vehicleNo,vehicleType,motorType,
    gasStandard,gasAvg,gasHundredMiles,gasTotal,gasSumAll,deptId   
    INTO v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_statndardCost,v_avgcost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId
     FROM stat_vehicleenergy 
     WHERE deviceid=p_deviceid 
     AND gasAvg IS NOT NULL AND gasTotal IS NOT NULL and gasHundredMiles is not null-- 取最近的有效数据
     ORDER BY stat_date DESC LIMIT 1 ;
     
     
  IF v_deviceid IS NOT NULL  -- 判断是否有历史数据
  THEN               INSERT INTO stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    gasStandard,gasAvg,gasHundredMiles,gasTotal,gasSumAll,deptId,stat_date)
  VALUES(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_statndardCost,v_avgcost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId,p_date) ;
   END IF;
     
    leave tx;
  end if;
  
  -- 获取加气量 
  select energyVolume into v_volumeAdd
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='gas' ;
  
  -- 插入统计数据 
  insert into stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    gasStandard,gasAvg,gasInstant,gasHundredMiles,gasTotal,gasSumAll,deptId,stat_date)
  values(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_statndardCost,
     v_avgcost,v_realtimecost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId,p_date);
     
  end tx;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_gas_ele
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_gas_ele`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_gas_ele`(IN p_deviceId VARCHAR(32), IN p_date DATE)
BEGIN
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(45);
  declare v_vehicleType varchar(32);
  declare v_motorType smallint;
  declare v_gasStatndard LONG;
  declare v_eleStatndard LONG;
  declare v_deptId int;
  -- energy cost
  declare v_avgcost LONG;-- 平均气耗
  declare v_realtimecost LONG;-- 瞬时气耗
  declare v_hundredcost LONG;-- 百公里气耗
  declare v_gastotal LONG;-- 总气耗
  declare v_eletotal LONG;-- 总电耗
  declare v_eleperday LONG;
  declare v_eleAvg float;
  declare v_totalmiles LONG;-- 总里程
  -- add energy
  declare v_volumeAddgas LONG;
  declare v_volumeAddEle LONG;
  declare not_found boolean default false;
  declare continue handler for not found set not_found=true;
  
  tx:begin
  -- 获取车辆基本信息 
  select deviceid,vehicleNo,vehicleType,motorType,deptId,gasCost,eleCost 
  into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_deptId,v_gasStatndard,v_eleStatndard
  from t_vehicleinfo where deviceId=p_deviceId;
  
  -- 获取能耗 
  -- select singletotalfueluse,realtimegfueluse,hundredfueluse,totalfuelcost
  -- 2月13日修改，修改前是上面的那行，不符合需求，因此修改
  select singletotalgasuse,realtimegasuse,hundredgasuse,totalgasuse
  into v_avgcost,v_realtimecost,v_hundredcost,v_gastotal
  from t_vehicleanaloginfo 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date+ interval 1 day -- 以前是直接加1,孙天恒2017-05-27修改
  order by time desc limit 1 ;
  
  select bmstotalconsume,consumeperday into v_eletotal,v_eleperday
  from t_electricvehicleana 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date + INTERVAL 1 DAY -- 以前直接是p_date，连加1都没有,孙天恒2017-05-27修改
  order by time desc limit 1 ;
  
  -- 如果没有数据直接退出 
  if not_found then
    leave tx;
  end if;
  
  -- 获取加气量 
  select energyVolume into v_volumeAddgas
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='gas' ;
  
  select energyVolume into v_volumeAddEle
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='ele' ;
  
  select accruedmiles into v_totalmiles from t_vehiclemiles
  where vehicledeviceid=p_deviceId and stat_date=p_date;
  
  if v_totalmiles > 0 then
    set v_eleAvg:=v_eletotal/v_totalmiles ;
  else 
    set v_eleAvg:=0 ;
  end if;
  
  -- 插入统计数据 
  insert into stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    gasStandard,gasAvg,gasInstant,gasHundredMiles,gasTotal,gasSumAll,
    deptId,stat_date,elecStandard,elecAvg,elecTotal,elecPerDay,elecSumAll)
  values(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_gasStatndard,
     v_avgcost,v_realtimecost,v_hundredcost,v_gastotal,v_volumeAddgas,v_deptId,
     p_date,v_eleStatndard,v_eleAvg,v_eletotal,v_eleperday,v_volumeAddEle);
  
  end tx;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_oil
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_oil`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_oil`(IN p_deviceId VARCHAR(32), IN p_date DATE)
BEGIN
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(45);
  declare v_vehicleType varchar(32);
  declare v_motorType smallint;
  declare v_statndardCost LONG;
  declare v_deptId int;
  -- energy cost
  declare v_avgcost LONG;
  declare v_realtimecost LONG;
  declare v_hundredcost LONG;
  declare v_totalcost LONG;
  -- add energy
  declare v_volumeAdd LONG;
  declare not_found boolean default false;
  declare continue handler for not found set not_found=true;
  
  tx:begin
  -- 获取车辆基本信息 
  select deviceid,vehicleNo,vehicleType,motorType,deptId,oilCost 
  into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_deptId,v_statndardCost
  from t_vehicleinfo where deviceId=p_deviceId;
  
  -- 获取能耗 
  select singletotalfueluse,realtimegfueluse,hundredfueluse,totalfuelcost
  into v_avgcost,v_realtimecost,v_hundredcost,v_totalcost
  from t_vehicleanaloginfo 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date+1
  order by time desc limit 1 ;
  
  -- 如果没有数据直接退出 ， 修改为如果该车有历史数据就插入,否则退出，韩亚璋2017年10月19日修改
  if not_found then
  select deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleHundredMiles,fuleTotal,fuleSumAll,deptId
    into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_statndardCost,v_avgcost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId
  FROM stat_vehicleenergy 
     WHERE deviceid=p_deviceid 
     AND fuleAvg IS NOT NULL AND fuleTotal IS NOT NULL AND fuleHundredMiles IS NOT NULL-- 取最近的有效数据
     ORDER BY stat_date DESC LIMIT 1 ;
     
  IF v_deviceid IS NOT NULL  -- 判断是否有历史数据
  then    INSERT INTO stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleHundredMiles,fuleTotal,fuleSumAll,deptId,stat_date)
  VALUES(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_statndardCost,v_avgcost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId,p_date);
     end if;
    leave tx;
  end if;
  
  -- 获取加气量 
  select energyVolume into v_volumeAdd
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='oil' ;
  
  -- 插入统计数据 
  insert into stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleInstant,fuleHundredMiles,fuleTotal,fuleSumAll,deptId,stat_date)
  values(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_statndardCost,
     v_avgcost,v_realtimecost,v_hundredcost,v_totalcost,v_volumeAdd,v_deptId,p_date);
  
  end tx;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_oil_ele
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_oil_ele`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_oil_ele`(IN p_deviceId VARCHAR(32), IN p_date DATE)
BEGIN
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(45);
  declare v_vehicleType varchar(32);
  declare v_motorType smallint;
  declare v_oilStatndard LONG;
  declare v_eleStatndard LONG;
  declare v_deptId int;
  -- energy cost
  declare v_avgcost LONG;-- 平均油耗
  declare v_realtimecost LONG;-- 瞬时油耗
  declare v_hundredcost LONG;-- 百公里油耗
  declare v_oiltotal LONG;-- 总油耗
  declare v_eletotal LONG;-- 总电耗
  declare v_eleperday LONG;
  declare v_eleAvg float;
  declare v_totalmiles LONG;-- 总里程
  -- add energy
  declare v_volumeAddOil LONG;
  declare v_volumeAddEle LONG;
  declare not_found boolean default false;
  declare continue handler for not found set not_found=true;
  
  tx:begin
  -- 获取车辆基本信息 
  select deviceid,vehicleNo,vehicleType,motorType,deptId,oilCost,eleCost 
  into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_deptId,v_oilStatndard,v_eleStatndard
  from t_vehicleinfo where deviceId=p_deviceId;
  
  -- 获取能耗 
  select singletotalfueluse,realtimegfueluse,hundredfueluse,totalfuelcost
  into v_avgcost,v_realtimecost,v_hundredcost,v_oiltotal
  from t_vehicleanaloginfo 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date+1
  order by time desc limit 1 ;
  
  select bmstotalconsume,consumeperday   into v_eletotal,v_eleperday
  from t_electricvehicleana 
  where vehicledeviceid=p_deviceId
  and time>=p_date and time<p_date + INTERVAL 1 DAY -- 以前直接是p_date，连加1都没有,孙天恒2017-05-27修改
  order by time desc limit 1 ;
  
  -- 如果没有数据直接退出 , 修改为如果该车有历史数据就插入,否则退出，韩亚璋2017年10月19日修改
  if not_found then
  
  select deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleHundredMiles,fuleTotal,fuleSumAll,
    deptId,elecStandard,elecAvg,elecTotal,0,elecSumAll
    into v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_oilStatndard,  v_avgcost,v_hundredcost,v_oiltotal,v_volumeAddOil,
  v_deptId, v_eleStatndard,v_eleAvg,v_eletotal,v_eleperday,v_volumeAddEle
  FROM stat_vehicleenergy 
     WHERE deviceid=p_deviceid 
     AND fuleAvg IS NOT NULL AND fuleTotal IS NOT NULL AND fuleHundredMiles IS NOT NULL 
     AND elecAvg IS NOT NULL AND elecTotal IS NOT NULL -- 取最近的有效数据，其中v_perdaycost(当天消耗量)置为0
     ORDER BY stat_date DESC LIMIT 1 ;
  
  
  
  IF v_deviceid IS NOT NULL  -- 判断是否有历史数据
  THEN    INSERT INTO stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleHundredMiles,fuleTotal,fuleSumAll,
    deptId,stat_date,elecStandard,elecAvg,elecTotal,elecPerDay,elecSumAll)
  VALUES(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,
  v_oilStatndard,  v_avgcost,v_hundredcost,v_oiltotal,v_volumeAddOil,
  v_deptId, p_date,v_eleStatndard,v_eleAvg,v_eletotal,v_eleperday,v_volumeAddEle);
     END IF;
  
    leave tx;
  end if;
  
  -- 获取加气量 
  select energyVolume into v_volumeAddOil
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='oil' ;
  
  select energyVolume into v_volumeAddEle
  from t_energyinfo 
  where vehicleNo=v_vehicleNo
  and energyType='ele' ;
  
  select accruedmiles into v_totalmiles from t_vehiclemiles
  where vehicledeviceid=p_deviceId and stat_date=p_date;
  
  if v_totalmiles > 0 then
    set v_eleAvg:=v_eletotal/v_totalmiles ;
  else 
    set v_eleAvg:=0 ;
  end if;
  
  -- 插入统计数据 
  insert into stat_vehicleenergy(deviceId,vehicleNo,vehicleType,motorType,
    fuleStandard,fuleAvg,fuleInstant,fuleHundredMiles,fuleTotal,fuleSumAll,
    deptId,stat_date,elecStandard,elecAvg,elecTotal,elecPerDay,elecSumAll)
  values(v_deviceId,v_vehicleNo,v_vehicleType,v_motorType,v_oilStatndard,
     v_avgcost,v_realtimecost,v_hundredcost,v_oiltotal,v_volumeAddOil,v_deptId,
     p_date,v_eleStatndard,v_eleAvg,v_eletotal,v_eleperday,v_volumeAddEle);
  
  end tx;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_old`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_old`(IN p_date DATE)
BEGIN
  declare done bool default false;
  declare get_last bool default false;
  declare v_deviceId varchar(32);
  declare v_vehicleNo varchar(32);
  declare v_motorType smallint;
  declare v_vehicleType VARCHAR(100);
  declare v_deptId LONG;
  declare v_statndardOilCost LONG; -- 标准油耗
  declare v_statndardGasCost LONG; -- 标准气耗
  declare v_statndardEleCost LONG; -- 标准电耗
  declare v_logid bigint;
  declare c01 cursor for select deviceid, vehicleNo, motorType, vehicleType,oilCost, gasCost, eleCost, deptId  from t_vehicleinfo ;
  declare continue handler for not found set done=true;
  -- -----------------------------------
   -- 记录日志
	insert into maintain_events_log(eventName,startTime,finishTime)
    values('p_stat_energy',now(), null);
    select max(id) into v_logid from maintain_events_log;
  -- 先删除避免重复统计
  delete from stat_vehicleenergy where stat_date=p_date;
  -- 统计
  open c01;
  fetch c01 into v_deviceId,v_vehicleNo, v_motorType, v_vehicleType, v_statndardOilCost, v_statndardGasCost, v_statndardEleCost,v_deptId;
  while not done do
    DELETE FROM stat_vehicleenergy WHERE deviceId = v_deviceId and stat_date = p_date;
    INSERT INTO stat_vehicleenergy(
                                      deviceId,
                                      vehicleNo,
                                      motorType,
                                      vehicleType,
                                      gasStandard,
                                      gasAvg,
                                      gasInstant,
                                      gasHundredMiles,
                                      gasTotal,
                                      gasSumAll,
                                      fuleStandard,
                                      fuleAvg,
                                      fuleInstant,
                                      fuleHundredMiles,
                                      fuleTotal,
                                      fuleSumAll,
                                      elecStandard,
                                      elecAvg,
                                      elecPerDay,
                                        elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                      elecTotal,
                                      elecSumAll,
                                      energyStandard,
                                      deptId,
                                      stat_date
    )
      SELECT
                                      deviceId as  deviceId,
                                      vehicleNo as vehicleNo,
                                      motortype as motorType,
                                      v_vehicleType as vehicleType,
                                      v_statndardGasCost as gasStandard,
                                      gasAvg as gasAvg,
                                      0 as gasInstant,
                                      gasHundredMiles as gasHundredMiles,
                                      gasTotal as gasTotal,
                                      f_get_total('gas', v_vehicleNo) as gasSumAll,
                                      v_statndardOilCost as fuleStandard,
                                      fuleAvg as fuleAvg,
                                      0 as fuleInstant,
                                      fuleHundredMiles as fuleHundredMiles,
                                      fuleTotal as fuleTotal,
                                       f_get_total('oil', v_vehicleNo) as fuleSumAll,
                                      v_statndardEleCost as elecStandard,
                                      elecAvg as elecAvg,
                                    
                                      (SELECT max(consumeperday) FROM
                                        t_electricvehicleana WHERE
                                        vehicledeviceid = v_deviceId AND
                                        time BETWEEN p_date and date_add(p_date, INTERVAL 1 DAY))   as elecPerDay,
                                            elecHundredMiles as elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                      elecTotal as elecTotal,
                                      f_get_total('ele', v_vehicleNo) elecSumAll,
                                      (CASE motorType
                                          WHEN '1' then v_statndardOilCost
                                          WHEN '2' then v_statndardEleCost
                                          WHEN '3' then v_statndardOilCost + v_statndardEleCost
                                          WHEN '4' then v_statndardGasCost
                                          WHEN '5' then v_statndardGasCost + v_statndardEleCost
                                        END
                                      ) as energyStandard,
                                      v_deptId as deptId,
                                      p_date as stat_date
       FROM stat_energy_compare WHERE deviceId = v_deviceId and timetype = '1' and stat_date = p_date;
    SELECT if(count(*) > 0, false, true ) into get_last FROM stat_vehicleenergy  WHERE deviceId = v_deviceId and stat_date = p_date;
    IF get_last THEN
          INSERT INTO stat_vehicleenergy(
                                        deviceId,
                                        vehicleNo,
                                        motorType,
                                        vehicleType,
                                        gasStandard,
                                        gasAvg,
                                        gasInstant,
                                        gasHundredMiles,
                                        gasTotal,
                                        gasSumAll,
                                        fuleStandard,
                                        fuleAvg,
                                        fuleInstant,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        fuleSumAll,
                                        elecStandard,
                                        elecAvg,
                                        elecPerDay,
                                          elecHundredMiles,-- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                        elecTotal,
                                        elecSumAll,
                                        energyStandard,
                                        deptId,
                                        stat_date
          ) SELECT
                                        deviceId,
                                        vehicleNo,
                                        motorType,
                                        vehicleType,
                                        gasStandard,
                                        gasAvg,
                                        gasInstant,
                                        gasHundredMiles,
                                        gasTotal,
                                        gasSumAll,
                                        fuleStandard,
                                        fuleAvg,
                                        fuleInstant,
                                        fuleHundredMiles,
                                        fuleTotal,
                                        fuleSumAll,
                                        elecStandard,
                                        elecAvg,
                                        elecPerDay,
                                             elecHundredMiles, -- 添加 百公里电耗  韩亚璋 2018年7月27日修改
                                            
                                        elecTotal,
                                        elecSumAll,
                                        energyStandard,
                                        deptId,
                                        p_date  as stat_date
        FROM stat_vehicleenergy WHERE deviceId = v_deviceId   and stat_date < p_date ORDER BY id DESC LIMIT 1;
      END IF;
    fetch c01 into v_deviceId,v_vehicleNo, v_motorType, v_vehicleType, v_statndardOilCost, v_statndardGasCost, v_statndardEleCost,v_deptId;
  end while;
  close c01;
  -- 记录日志
    update maintain_events_log set finishTime=now() where id=v_logid;
    
    -- 为测试造数据 韩亚璋 2018年9月4日添加，9月6日后删除一下两行
   --    CALL p_tmp_update_gasconsume();
   --   CALL p_tmp_update_elecconsume();
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_energy_saving_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_energy_saving_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_energy_saving_byDay`(p_date date)
BEGIN
  declare v_startTime timestamp ; 
  set v_startTime:=current_timestamp() ;
  
  -- 节能分析
  call p_energy(p_date);
  -- 非营运空调开启时长计算
  call p_stat_FeiYingYunKongTiaoKaiQiShiChang_byDay(p_date);
  -- 空调开启时长计算
  call P_conditiontime(p_date);
  
  -- 汇总到天
  delete from stat_energy_saving_summary_day where stat_date=p_date ;
  
  insert into stat_energy_saving_summary_day(vehicleNo,stat_date,idleTime,heaterTime,conditionTime,efficientSpeed,efficientSpeedTime,NotRunconditionTime,greenRunTime,runTime,vehicledeviceid,idleRate,heaterRate,greenRunRate,engineOverRunTime,deptid)
  select t2.vehicleNo,stat_date,idleTime,heaterTime,conditionTime,efficientSpeed,efficientSpeedTime,NotRunconditionTime,greenRunTime,runTime,t1.vehicledeviceid,idleRate,heaterRate,greenRunRate,engineOverRunTime,deptid
  from (
     select vehicledeviceid,stat_date,
     sum(case when type='idleTime' then total_seconds else 0 end) as idleTime,
     sum(case when type='heaterTime' then total_seconds else 0 end) as heaterTime,
     sum(case when type='conditionTime' then total_seconds else 0 end) as conditionTime,
     avg(case when type='efficientSpeedTime' then speed else null end) as efficientSpeed,
     sum(case when type='efficientSpeedTime' then total_seconds else null end) as efficientSpeedTime,
     sum(case when type='NotRunconditionTime' then total_seconds else 0 end) as NotRunconditionTime,
     sum(case when type='efficientSpeedTime' then total_seconds else 0 end) as greenRunTime,
     sum(case when type='runTime' then total_seconds else 0 end) as runTime,
     round(sum(case when type='idleTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as idleRate,
     round(sum(case when type='heaterTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as heaterRate,
     round(sum(case when type='efficientSpeedTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as greenRunRate,
     SUM(CASE WHEN TYPE='engineOverRun' THEN total_seconds ELSE 0 END) AS engineOverRunTime
     from stat_energy_saving_detail a
     where 1=1 and stat_date=p_date 
     group by vehicledeviceid ) t1 
  inner join t_vehicleinfo t2 on t1.vehicledeviceid=t2.deviceId;
  -- 汇总到月 
  delete from stat_energy_saving_summary where stat_date=last_day(p_date)+interval 1 day-interval 1 month ;
  
  insert into stat_energy_saving_summary(vehicleNo,stat_date,idleTime,heaterTime,conditionTime,efficientSpeed,efficientSpeedTime,NotRunconditionTime,greenRunTime,runTime,vehicledeviceid,idleRate,heaterRate,greenRunRate,engineOverRunTime)
  select t2.vehicleNo,p_date - interval day(p_date)-1 day,idleTime,heaterTime,conditionTime,efficientSpeed,efficientSpeedTime,NotRunconditionTime,greenRunTime,runTime,t1.vehicledeviceid,idleRate,heaterRate,greenRunRate,engineOverRunTime
  from (
     select vehicledeviceid,
     sum(case when type='idleTime' then total_seconds else 0 end) as idleTime,
     sum(case when type='heaterTime' then total_seconds else 0 end) as heaterTime,
     sum(case when type='conditionTime' then total_seconds else 0 end) as conditionTime,
     avg(case when type='efficientSpeedTime' then speed else null end) as efficientSpeed,
     sum(case when type='efficientSpeedTime' then total_seconds else null end) as efficientSpeedTime,
     sum(case when type='NotRunconditionTime' then total_seconds else 0 end) as NotRunconditionTime,
     sum(case when type='efficientSpeedTime' then total_seconds else 0 end) as greenRunTime,
     sum(case when type='runTime' then total_seconds else 0 end) as runTime,
     round(sum(case when type='idleTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as idleRate,
     round(sum(case when type='heaterTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as heaterRate,
     round(sum(case when type='efficientSpeedTime' then total_seconds else 0 end)*1.0000/sum(case when type='runTime' then total_seconds else 0 end),4) as greenRunRate,
     SUM(CASE WHEN TYPE='engineOverRun' THEN total_seconds ELSE 0 END) AS engineOverRunTime
     from stat_energy_saving_detail a
     where 1=1
     and stat_date>=p_date - interval day(p_date)-1 day
     and stat_date<last_day(p_date)+ interval 1 day
     group by vehicledeviceid ) t1 
  left join t_vehicleinfo t2 on t1.vehicledeviceid=t2.deviceId ; 
   
 
  -- 记录日志
    insert into maintain_events_log(eventName,startTime,finishTime)values('p_stat_energy_saving_byDay',v_startTime,now());
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_FaDongJiChaoZhuanTime_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_FaDongJiChaoZhuanTime_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_FaDongJiChaoZhuanTime_byDay`(p_date DATE)
BEGIN
  -- 节能分析：发动机超转时长
  -- 算法描述：发动机转速超过2500rpm，累加时间
  DELETE FROM stat_energy_saving_detail
  WHERE stat_date = p_date AND TYPE = 'engineOverRun' ;
    
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'engineOverRun','发动机超转',
    min(a.time),max(a.time),p_date,count(1),null
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and a.engine >=2500
  group by a.VEHICLEDEVICEID;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_FaDongJiChaoZhuan_ByDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_FaDongJiChaoZhuan_ByDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_FaDongJiChaoZhuan_ByDay`(p_date date)
BEGIN
  -- 驾驶行为分析：发动机超转
  -- 算法描述：直接判断报警量
  
  declare v_pre_score int;
  declare v_cur_score int;
  declare v_alarmtype_id int;
  
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,score from tmp01  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='发动机超转'
  group by dept_id; 
  select alarmTypeId into v_alarmtype_id
  from t_vehiclealarmtype where alarmname='enginespeedhigh';
 
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score-- 增加gps信息 2018年9月20日 by 韩亚璋
  from (
  select a.deviceId as VEHICLEDEVICEID,a.alarmTime as time,b.gpsx,b.gpsy   -- 增加gps信息 2018年9月20日 by 韩亚璋
  from t_vehiclealarminfo a  left  join t_vehicleanaloginfo b on a.deviceid=b.VEHICLEDEVICEID and a.alarmtime=b.time     -- 关联gps数据
  where alarmtypeid=v_alarmtype_id
  and a.alarmTime>=p_date and a.alarmTime<adddate(p_date,interval 1 day) ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
  
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='engineOverspeed';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; -- 添加 gps信息  2018年9月20日 by 韩亚璋
  set v_pre_vid:=v_first_vid; 
  set v_pre_time:=v_first_time;
  -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score;-- gps信息添加 2018年9月20日 by 韩亚璋
  
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehiclealarminfo a 
	where a.deviceId=v_first_vid
	and a.alarmTime>v_pre_time and a.alarmTime<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score) -- gps信息添加 2018年9月20日 by 韩亚璋
	  values(v_first_vid,'engineOverspeed','发动机超转',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score); -- gps信息添加 2018年9月20日 by 韩亚璋
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	  -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time;
       -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else 
	
	-- 因为数据关联用的是 left join，所以在此做判断 第一条记录是否为空，是则取下一条记录 
	 SET v_first_gpsx:=  IFNULL(v_first_gpsx,v_cur_gpsx);
         SET v_first_gpsy:=  IFNULL(v_first_gpsy,v_cur_gpsy);
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	    -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
           
    
  end while label01;
  
  close cur01;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_fan1alarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_fan1alarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_fan1alarm_byDay`(in p_date date)
BEGIN
-- ATS系统监控故障月报表 风扇1
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  declare v_gx varchar(45);
  declare v_gy varchar(45);
  declare v_duration int;
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE temporary TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.fan1
  FROM (
  SELECT VEHICLEDEVICEID,TIME,fan1
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.fan1=1;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='风扇1故障';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT count(1)  into v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time limit 1 ;
		
		if v_cnt2=1 then
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		else set v_gx:=' ';
		     set v_gy:=' ';
		end if;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'风扇1故障',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),
    v_gx,v_gy,p_date,'散热(ATS)系统监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
drop table tmp01;  
  
  CLOSE cur01;
  
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_fan2alarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_fan2alarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_fan2alarm_byDay`(in p_date date)
BEGIN
-- ATS系统监控故障月报表下风扇2
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  declare v_gx varchar(45);
  declare v_gy varchar(45);
  
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE temporary TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.fan2
  FROM (
  SELECT VEHICLEDEVICEID,TIME,fan2
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.fan2=1;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='风扇2故障';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT count(1)  into v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time limit 1 ;
		
		if v_cnt2=1 then
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		else set v_gx:=' ';
		     set v_gy:=' ';
		end if;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'风扇2故障',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),v_gx,v_gy,p_date,'散热(ATS)系统监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
drop table tmp01;  
  
  CLOSE cur01;
  
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_FeiYingYunKongTiaoKaiQiShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_FeiYingYunKongTiaoKaiQiShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_FeiYingYunKongTiaoKaiQiShiChang_byDay`(p_date DATE)
BEGIN
  -- 节能分析：非营运空调开启时长
  -- 算法描述：空调开启且转速为0时，累加时间
  -- 2017-04-26 威帝修改了新需求，将转速为0改为车速为0
  -- 2017-04-26 孙天恒修改
    DECLARE v_startTime TIMESTAMP ; 
    DECLARE cont INT;
    set v_startTime:=current_timestamp() ;
    
DELETE FROM stat_energy_saving_detail WHERE stat_date = p_date AND TYPE = 'NotRunconditionTime' ;
    
SET @stime:=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00');
SET @etime:=@stime+INTERVAL 1 HOUR;
SET cont:=0;
WHILE cont<23 DO
  INSERT INTO stat_energy_saving_detail (VehicleDeviceID,TYPE,typeDesc,begin_time,end_time,stat_date,total_seconds)
  SELECT a.vehicledeviceid,'NotRunconditionTime','非营运空调开启时长', min(a.time),max(a.time),p_date,count(1)
  FROM t_vehiclestateinfo2 a  
  INNER JOIN t_vehicleanaloginfo b
  ON a.time = b.time AND a.vehicledeviceid = b.vehicledeviceid
  WHERE a.time >= @stime AND a.time < @etime
    AND a.conditioneron  = '1'  
    AND b.speed = 0 
  group by a.vehicledeviceid order by null;
  
SET @stime:=@etime;
SET @etime:=@stime+INTERVAL 1 HOUR;
SET cont:=cont+1;
 END WHILE;
 
  -- 记录日志
    INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments)VALUES('p_stat_FeiYingYunKongTiaoKaiQiShiChang_byDay',v_startTime,NOW(),"非营运空调开启时长");
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_JiaReQiKaiQiShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_JiaReQiKaiQiShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_JiaReQiKaiQiShiChang_byDay`(p_date DATE)
BEGIN
  -- 节能分析：加热器开启时长
  -- 算法描述：加热器在开启状态，累计时间
  DELETE FROM stat_energy_saving_detail
  WHERE stat_date = p_date AND TYPE = 'heaterTime' ;
  INSERT INTO stat_energy_saving_detail (VehicleDeviceID,TYPE,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  SELECT a.VEHICLEDEVICEID,'heaterTime','加热器开启时长',
     min(a.time),max(a.time),p_date,count(1)
  FROM t_vehiclestateinfo2 a
  WHERE a.time >= p_date
    AND a.time < ADDDATE(p_date, INTERVAL 1 DAY)
    AND a.heater = '1' 
    group by a.VEHICLEDEVICEID;
    
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_JiJiaSu_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_JiJiaSu_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_JiJiaSu_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：急加速
  -- 需求描述：转速大于规定值后，判断车速上升加速度
  -- 算法：（1）找出车速大于0的连续记录片段，存入临时表tmp01、tmp02
  --       （2）对于每个片段，计算加速度，通过tmp01、tmp02表关联的方式找出满足条件的组，存入临时表tmp03
  --       （3）对于临时表tmp03进行排序，去重，最终结果插入目的表
  declare v_score int;
  declare v_time_interval int;
  declare v_va_speed int;
  -- declare v_engineSpeed int;
  -- 2017年4月26日，孙天恒修改
  declare v_devid varchar(32);
 
  
  declare  cur01 cursor for select deviceId,va_speed, time_interval,score
     from t_vehicleinfo t1 
     inner join tmp_stat_config t2 on t1.deptid=t2.dept_id;
  declare continue handler for not found set @cursor_not_found=true;
  
  -- -----------------------------------------------------------------------
  set @cursor_not_found :=false;
  
  -- 获取参数 
   -- select para_value  into v_engineSpeed from stat_drivingconfig 
   -- where type_desc='急加速' and parameter='engine_speed'; 
   -- 2017年4月26日，威帝修改了新模型，取消了判断发动机转速的设定
   -- 孙天恒修改
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'va_speed' then para_value else null end) as va_speed,
  max(case parameter when 'time_interval' then para_value else null end) as time_interval,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='急加速'
  group by dept_id; 
  -- 删除数据，避免多次计算导致重复 
  delete from stat_driving_violation_detail where stat_date=p_date and actiontype='suddenlySpeedUp';
  
  -- 开始游标
  open cur01;
  fetch cur01 into v_devid,v_va_speed,v_time_interval,v_score;
  
  while not @cursor_not_found do
  -- 获取基础数据
  drop table if exists tmp01;
  create temporary table tmp01(VEHICLEDEVICEID varchar(64),time datetime,speed int,gpsx varchar(45),gpsy varchar(45),  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                    gid INT,r INT,  pre_time datetime,pre_speed int);
  insert into tmp01
  select VEHICLEDEVICEID,time,speed,gpsx,gpsy,  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	case when timestampdiff(second,@time,time)=1 and speed>@speed then @gid
	-- 连续的两条记录速度递增，则为同一组;不连续，产生新组 
	else  @gid:=@gid+1 end as gid,
	case when timestampdiff(second,@time,time)=1 and speed>@speed then @r:=@r+1
	else  @r:=1  end as r,
	@time:=time as pre_time,@speed:=speed as pre_speed
  from (
    select a.VEHICLEDEVICEID,a.time,a.speed,a.gpsx,a.gpsy    -- 新增 gps信息  2018年9月20日  by 韩亚璋
    from t_vehicleanaloginfo a 
    where a.time>=p_date and a.time<p_date+interval 1 day
     -- 对一辆车全天的数据按照时间排序 
     and vehicledeviceid=v_devid
     -- and engine > v_engineSpeed
     -- 2017年4月26日，孙天恒修改
     and speed>0
     order by time asc ) t1 
     inner join (select @gid:=0,@r:=0,@time:=null,@speed:=null) t2 on 1=1 ;
    
    -- 找出有多条数据的组,过滤掉只有一条数据的组，尽量减少计算的数据集 
    drop table if exists tmp02;
    create temporary table tmp02 as select gid from tmp01 where r=2;
    create index idx01 on tmp01(gid);
    
    drop table if exists tmp03;
	create temporary table tmp03 as 
    select * from tmp01 where gid in (select gid from tmp02);
    
    
    -- 找出符合条件的数据
    drop table if exists tmp04;
    create  temporary table tmp04 as  
    select a.VEHICLEDEVICEID,a.time as bt,a.speed as bp,b.time as et,
      b.speed as ep,a.gpsx,a.gpsy, a.gid,b.r-a.r+1 as total_sec  -- 新增 gps信息  2018年9月20日  by 韩亚璋
    from tmp03 a 
    inner join tmp01 b on a.gid=b.gid 
    where b.time>a.time 
    and b.r-a.r=v_time_interval
    -- AND b.r-a.r<=v_time_interval
    -- 之前是这样的，孙天恒2017-04-17修改
    and (b.speed-a.speed)/(b.r-a.r)>=v_va_speed 
    order by a.gid,a.time,b.time ;
   
   -- 去重
   insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
        begin_time,end_time,gpsx,gpsy,stat_date,score,speed)
   select VEHICLEDEVICEID,'suddenlySpeedUp','急加速',bt,et,gpsx,gpsy,p_date,v_score,ep from (
   select t1.*,
    case when @gid=null then @r:=1
      when @gid=gid then @r:=@r+1
      else @r:=1 end as r ,@gid:=gid
   from (
    select * from tmp04 order by gid,bt,et)t1
    inner join (select @gid:=null,@r:=1) t2) tt
    where r=1;
    
    fetch cur01 into v_devid,v_va_speed,v_time_interval,v_score;
  end while;
  -- 关闭游标 
  close cur01;
 
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_JinJiCheSuShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_JinJiCheSuShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_JinJiCheSuShiChang_byDay`(p_date date)
BEGIN
  -- 节能分析：经济车速时长 
  -- 算法描述：发动机是否处于（1200-1800RPM），累计时间 
  
  -- --------------------------------------------------------------
  -- 获取基本数据
  delete from stat_energy_saving_detail 
  where stat_date=p_date and type='efficientSpeedTime';
  
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,begin_time,
       end_time,stat_date,total_seconds,speed)
  select a.VEHICLEDEVICEID,'efficientSpeedTime','经济车速时长',
    min(a.time),max(a.time),p_date,count(1),avg(a.speed)
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and a.engine between 1200 and 1800
  group by a.VEHICLEDEVICEID;
 
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_JiShaChe_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_JiShaChe_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_JiShaChe_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：急刹车 
  -- 需求描述：在刹车灯或缓速器有效的情况下，判断在在规定时间段内平均加速度值是否大于设定，则认为急刹车
  -- 算法：（1）找出车速大于0的连续记录片段，存入临时表tmp01、tmp02
  --       （2）对于每个片段，计算加速度，通过tmp01、tmp02表关联的方式找出满足条件的组，存入临时表tmp03 
  --       （3）对于临时表tmp03进行排序，去重，最终结果插入目的表 
  declare v_score int;  
  declare v_time_interval int;
  declare v_va_speed int;
  -- declare v_engineSpeed int;
 
  declare v_devid varchar(32);
  declare  cur01 cursor for select deviceId,va_speed, time_interval,score
     from t_vehicleinfo t1 
     inner join tmp_stat_config t2 on t1.deptid=t2.dept_id;
  declare continue handler for not found set @cursor_not_found=true;
  -- ---------------------------------------------------------------
  set @cursor_not_found :=false;
 
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'va_speed' then para_value else null end) as va_speed,
  max(case parameter when 'time_interval' then para_value else null end) as time_interval,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='急刹车'
  group by dept_id;  
  
  -- 删除数据，避免多次计算导致重复
  delete from stat_driving_violation_detail where stat_date=p_date and actiontype='suddenlyBraking';
  
  -- 开启游标 
  open cur01;
  fetch cur01 into v_devid,v_va_speed,v_time_interval,v_score;
  
  while not @cursor_not_found do
  -- 获取基础数据
  -- select v_devid,now();
  drop table if exists tmp01;
  create temporary table tmp01 as
  select VEHICLEDEVICEID,time,speed,gpsx,gpsy,  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	case when timestampdiff(second,@time,time)=1 and speed<@speed  then @gid
	-- 连续的两条记录速度递减，则为同一组;不连续，产生新组 
	else  @gid:=@gid+1 end as gid,
	case when timestampdiff(second,@time,time)=1 and speed<@speed then @r:=@r+1
	else  @r:=1  end as r,
	@time:=time,@speed:=speed
  from (
     select b.VEHICLEDEVICEID,b.time,b.speed,b.gpsx,b.gpsy -- 新增 gps信息  2018年9月20日  by 韩亚璋
     from t_vehicleanaloginfo b  
       -- inner join t_vehiclestateinfo1 a
	   -- on a.VehicleDeviceID=b.VehicleDeviceID and a.time=b.time
	   -- and a.time>=p_date and a.time<adddate(p_date,interval 1 day)
       -- 刹车灯或缓速器有效
       -- and ( a.RetardNotify='1' or a.BrakeLight='1')
     where b.VehicleDeviceID=v_devid
       and b.time>=p_date and b.time<adddate(p_date,interval 1 day)
       order by b.time asc ) t1 
     inner join (select @gid:=0,@r:=0,@time:=null,@speed:=null) t2 on 1=1 ;
    
    -- 找出有多条数据的组,过滤掉只有一条数据的组，尽量减少计算的数据集 
    drop table if exists tmp02;
    create temporary table tmp02 as select gid from tmp01 where r=2;
    create index idx01 on tmp01(gid);
    
    drop table if exists tmp03;
	create temporary table tmp03 as 
    select * from tmp01 where gid in (select gid from tmp02);
    
    -- 找出符合条件的数据
    drop table if exists tmp04;
    create  temporary table tmp04 as  
    select a.VEHICLEDEVICEID,a.time as bt,a.speed as bp,b.time as et,
      b.speed as ep,a.gpsx,a.gpsy,a.gid,b.r-a.r+1 as total_sec  -- 新增 gps信息  2018年9月20日  by 韩亚璋
    from tmp03 a  
    inner join tmp01 b on a.gid=b.gid 
    where b.time>a.time 
    and b.r-a.r=v_time_interval
    -- AND b.r-a.r<=v_time_interval
    -- 之前是上面代码，孙天恒2017-04-17修改
    -- 减速度
    and (a.speed-b.speed)/(b.r-a.r)>=v_va_speed 
    order by a.gid,a.time,b.time ;
   
   -- 去重
   insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
        begin_time,end_time,gpsx,gpsy,stat_date,score,speed)-- 新增 gps信息  2018年9月20日  by 韩亚璋
   select VEHICLEDEVICEID,'suddenlyBraking','急刹车',bt,et,gpsx,gpsy,p_date,v_score,ep from (   -- 新增 gps信息  2018年9月20日  by 韩亚璋
   select t1.*,
    case when @gid=null then @r:=1
      when @gid=gid then @r:=@r+1
      else @r:=1 end as r ,@gid:=gid
   from (
    select * from tmp04 order by gid,bt,et)t1
    inner join (select @gid:=null,@r:=1) t2) tt
    where r=1;
    fetch cur01 into v_devid,v_va_speed,v_time_interval,v_score;
  end while;
  
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_KongDangHuaXing_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_KongDangHuaXing_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_KongDangHuaXing_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：空挡滑行
  -- 算法描述：空挡时，车速大于0，且转速大于300转
  declare v_pre_score int;
  declare v_cur_score int;
  declare v_engineSpeed int default 300;
  -- declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,score from tmp01   -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'engine_speed' then para_value else null end) as engine_speed,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='空挡滑行'
  group by dept_id;
  -- 获取基本数据
  DROP TABLE IF EXISTS tmp_kdhx;
  CREATE TEMPORARY TABLE tmp_kdhx AS
  SELECT deviceId FROM t_vehicleinfo WHERE motorType = 1 OR motorType = 4;
  -- 创建临时表，记录燃油车和燃气车的deviceId
  -- 孙天恒2017-04-21修改，由于威帝更新了计算模型
  
  drop table if exists tmp01;
  
  create temporary table tmp01 as 
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  select a.VEHICLEDEVICEID,a.time,a.speed,a.gpsx,a.gpsy,  -- 新增 gps信息  2018年9月20日  by 韩亚璋
    a.Engine, -- 发动机转速
    b.NGear -- 空挡
  from t_vehicleanaloginfo a inner join t_vehiclestateinfo1 b
  on a.time=b.time and a.VEHICLEDEVICEID=b.VEHICLEDEVICEID
     AND a.VEHICLEDEVICEID IN (SELECT deviceId FROM tmp_kdhx)
     -- 只取出燃油车和燃气车的deviceId
     -- 孙天恒2017-04-21修改，由于威帝更新了计算模型
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and b.time>=p_date and b.time<adddate(p_date,interval 1 day)
  and a.speed>0 
  and b.NGear='1' ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id
  where t1.engine > t3.engine_speed;
  
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='coasting';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; -- 添加 gps信息  2018年9月20日 by 韩亚璋
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
   -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score; -- gps信息添加 2018年9月20日 by 韩亚璋
    
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehicleanaloginfo a 
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score) -- gps信息添加 2018年9月20日 by 韩亚璋
	  values(v_first_vid,'coasting','空挡滑行',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score); -- gps信息添加 2018年9月20日 by 韩亚璋
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	  -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time;  
       -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else 
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	    -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
           
    
  end while label01;
  
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_KongTiaoKaiQiShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_KongTiaoKaiQiShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_KongTiaoKaiQiShiChang_byDay`(p_date date)
BEGIN
  -- 节能分析：空调开启时长 
  -- 算法描述：空调开启，累计时间
  -- 威帝修改算法为，纯电车不判断转速
  -- 2017年4月26日，孙天恒修改
  declare cont int;
  DROP TABLE IF EXISTS tmp_01;
  CREATE TEMPORARY TABLE tmp_01 AS
  SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2;
  -- 创建临时表tmp_01，记录纯电车的deviceId
  
  DROP TABLE IF EXISTS tmp_02;
  CREATE TEMPORARY TABLE tmp_02 AS
  SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2;
  -- 创建临时表tmp_02，记录纯电车的deviceId，临时表在一个session里面只能打开一次
  
  delete from stat_energy_saving_detail 
  where stat_date=p_date and type='conditionTime';
  
 
SET @stime:=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00');
SET @etime:=@stime+interval 1 hour;
set cont:=0;
while cont<23 do
  
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  select a.VEHICLEDEVICEID,'conditionTime','空调开启时长',
     min(a.time),max(a.time),p_date,count(1)
  from T_VehicleStateInfo2 a 
  -- inner join t_vehicleanaloginfo b     --  因为所有车辆不需再判断转速 故 注释掉  2019年4月22日
   -- on a.time=b.time and a.VEHICLEDEVICEID=b.VEHICLEDEVICEID  -- 注释掉  2019年4月22日
 -- where a.time>=p_date and a.time<adddate (p_date,interval 1 day)
 where a.time>=@stime and a.time<@etime
  and a.conditioneron  ='1' 
  -- and a.vehicletypeid  <> '02'   -- 注释掉  2019年4月22日
 --  and a.VEHICLEDEVICEID  IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType <> 2) 
 --  and  b.engine>0  -- 注释掉  2019年4月22日
 -- and a.VEHICLEDEVICEID IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2)
  -- and b.engine>0
  -- 2017年4月26日，孙天恒修改
  /*AND 
  
    (
      (a.VEHICLEDEVICEID IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2)) -- 纯电车不判断转速
      OR 
      (a.VEHICLEDEVICEID not IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2) AND b.engine>0 ) -- 其他车判断转速 
    )*/
  group by a.VEHICLEDEVICEID;
 /*  INSERT INTO stat_energy_saving_detail(VehicleDeviceID,TYPE,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  SELECT a.VEHICLEDEVICEID,'conditionTime','空调开启时长',
     MIN(a.time),MAX(a.time),p_date,COUNT(1)
  FROM T_VehicleStateInfo2 a INNER JOIN t_vehicleanaloginfo b 
    ON a.time=b.time AND a.VEHICLEDEVICEID=b.VEHICLEDEVICEID
 -- where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
 WHERE a.time>=@stime AND a.time<@etime
  AND a.conditioneron  ='1'
    AND a.vehicletypeid  ='02'
--  AND a.VEHICLEDEVICEID  IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2) 
  -- and b.engine>0
  -- 2017年4月26日，孙天恒修改
 -- AND 
  
  --  (
     -- (a.VEHICLEDEVICEID IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2)) -- 纯电车不判断转速
    --  OR 
    --  (a.VEHICLEDEVICEID not IN (SELECT deviceId FROM t_vehicleinfo WHERE motorType = 2) AND b.engine>0 ) -- 其他车判断转速 
 --   )
  GROUP BY a.VEHICLEDEVICEID;*/
  SET @stime:=@etime;
  SET @etime:=@stime+INTERVAL 1 HOUR;
  set cont:=cont+1;
 end while;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_miles
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_miles`;
delimiter ;;
CREATE PROCEDURE `p_stat_miles`(IN p_date date)
BEGIN
    DECLARE max_shortmileage INT DEFAULT 16777215; #短里程最大值，超过改值认为异常
    DECLARE max_mileage INT UNSIGNED DEFAULT 4294967295; #累积里程最大值，超过改值认为异常
    DECLARE v_logid INT;
    
    -- 插入日志
    INSERT INTO maintain_events_log(eventName,startTime,finishTime,comments) VALUES('p_stat_miles',NOW(),NULL,'车龄及里程日统计');
    SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_stat_miles';
    
    -- 获取所有车辆的设备号，车牌号，购买日期 以及模拟量表中在线车辆的下线时间，短计里程，累计里程，车辆状态
    DROP TABLE IF EXISTS m;
    CREATE TEMPORARY TABLE m 
    SELECT deviceid,vehicleno,a.* ,STR_TO_DATE(purchaseDate, '%Y-%m-%d')AS purchaseDate FROM t_vehicleinfo b LEFT JOIN ( 
    SELECT c.vehicledeviceid,endtime,shortmileage,mileage,"online"AS gpsstatus FROM t_vehicleanaloginfo c INNER JOIN (
    SELECT vehicledeviceid,MAX(TIME) AS endtime FROM t_vehicleanaloginfo WHERE TIME >= p_date AND TIME < p_date + INTERVAL 1 DAY GROUP BY vehicledeviceid)d ON d.vehicledeviceid=c.vehicledeviceid AND c.time=d.endtime
    )a ON b.deviceid=a.vehicledeviceid WHERE deviceid IS NOT NULL;
    
    -- 获取t_vehiclemiles表中的所有车辆的设备号，短计里程，累计里程，更新时间
   DROP TABLE IF EXISTS n;
   CREATE TEMPORARY TABLE n SELECT e.vehicledeviceid,accruedmiles,shortmiles,updatetime FROM t_vehiclemiles INNER JOIN (
   SELECT vehicledeviceid,MAX(stat_date)AS maxtime FROM t_vehiclemiles GROUP BY vehicledeviceid)e ON e.vehicledeviceid=t_vehiclemiles.vehicledeviceid AND t_vehiclemiles.stat_date=e.maxtime;
   
   -- 删除重复数据
   -- 整理准备好的数据内容，并插入数据
   DELETE FROM t_vehiclemiles WHERE  stat_date = p_date;
   insert into t_vehiclemiles (vehicledeviceid,vehicleNo,accruedmiles,shortmiles,gpsstatus,vehicleAge,updatetime,stat_date)
   SELECT m.deviceid,m.vehicleno,
   IF(IFNULL(IFNULL(mileage,accruedmiles),0)<=max_mileage,IFNULL(IFNULL(mileage,accruedmiles),0),NULL)AS accruedmiles,
   IF(IFNULL(IFNULL(shortmileage,shortmiles),0)<=max_shortmileage,IFNULL(IFNULL(shortmileage,shortmiles),0),NULL)AS shortmileage,
   IFNULL(m.gpsstatus,"offline")AS gpsstatus,
   (YEAR(p_date) - YEAR(IFNULL(purchaseDate,p_date))) * 12 + (MONTH(p_date) - MONTH(IFNULL(purchaseDate,p_date)) + 1)AS vehicleAge,
   IFNULL(IFNULL(endtime,updatetime),NOW())AS updatetime,
   p_date AS stat_date FROM m LEFT JOIN n ON m.deviceid=n.vehicledeviceid;
   
   -- 更新日志
   UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_miles_bat
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_miles_bat`;
delimiter ;;
CREATE PROCEDURE `p_stat_miles_bat`(IN p_date DATE)
BEGIN
    DECLARE max_shortmileage INT DEFAULT 16777215; #短里程最大值，超过改值认为异常
    DECLARE max_mileage INT UNSIGNED DEFAULT 4294967295; #累积里程最大值，超过改值认为异常
    DECLARE v_devid VARCHAR(64);
    DECLARE v_vehicleNo VARCHAR(64);
    DECLARE v_num INT;
    DECLARE v_shortmile INT; -- 来自can的短里程
    DECLARE v_totalmile INT; -- 来自can的累积里程
    DECLARE yesterday_v_totalmile INT; -- 当前的前一天can的累积里程
    DECLARE v_max_time DATETIME; -- 最后上报的can数据时间
    DECLARE v_vehicleage INT; -- 车龄，精确到月
    DECLARE v_purchase_date DATE; -- 车辆购买时间
    DECLARE v_updatetime DATETIME; -- 车辆数据更新时间
    
    -- 由于不在由外部调用， 现加入事件 每日执行  by 韩亚璋 2018年9月28日
      declare  cur01 cursor for select vehicleNo
     from t_vehicleinfo  order by vehicleId; 
     
      declare continue handler for not found set @cursor_not_found=true;
       set @cursor_not_found :=false;
       
       
       open cur01;
  fetch cur01 into v_vehicleNo;
  
  
  WHILE NOT @cursor_not_found DO
   
    SELECT
      deviceId,
      str_to_date(purchaseDate, '%Y-%m-%d') -- 对购买日期字符串进行格式化，防止为空的情况下，发生类型错误 by 孟凡印 2017-08-12
    INTO v_devid, v_purchase_date
    FROM t_vehicleinfo
    WHERE vehicleNo = v_vehicleNo;
    --  SELECT v_devid,1,@cursor_not_found;
      tx01: BEGIN
      IF v_devid IS NULL
      THEN
        -- 车牌号不存在，则直接退出
        SELECT concat('vehicleNo[', v_vehicleNo, '] not exists!!') AS msg;
        LEAVE tx01;
      END IF;
      IF ifnull(v_purchase_date, NULL) IS NULL
      THEN
        SET v_vehicleage = "0";
      ELSE
        SET v_vehicleage := (year(p_date) - year(v_purchase_date)) * 12
                            + (month(p_date) - month(v_purchase_date) + 1);
      END IF;
      SELECT count(*)
      INTO v_num
      FROM (
             SELECT
               vehicledeviceid,
               shortmileage,
               mileage
             FROM t_vehicleanaloginfo
             WHERE vehicledeviceid = v_devid AND time >= p_date
                   AND time < p_date + INTERVAL 1 DAY
             ORDER BY time DESC
             LIMIT 1) t;
      -- 取昨天的gps累积里程
      -- 增加了累计里程和短里程字段 by 孟凡印 2017-08-12
   --    SELECT 1,@cursor_not_found,v_vehicleNo;
      SELECT
        accruedmiles + 0 ,
        shortmiles + 0 ,
        
        updatetime
      INTO v_totalmile, v_shortmile,  v_updatetime
      FROM (SELECT
              accruedmiles,
              shortmiles,
              0,
              updatetime
            FROM t_vehiclemiles
            WHERE vehicledeviceid = v_devid AND accruedmiles is not NULL and shortmiles is not NULL
            ORDER BY stat_date DESC
            LIMIT 1) t;
          --  SELECT 4,@cursor_not_found,v_vehicleNo;
      IF v_num = 0
      THEN
        DELETE FROM t_vehiclemiles
        WHERE vehicledeviceid = v_devid AND stat_date = p_date;
        -- 没有该车辆的状态信息，则置gps状态为 不在线
        INSERT INTO t_vehiclemiles (vehicleNo, vehicledeviceid, gpsstatus, stat_date, accruedmiles, shortmiles, updatetime, vehicleAge)
        VALUES
          (v_vehicleNo, v_devid, 'offline', p_date, v_totalmile, v_shortmile, v_updatetime,
           v_vehicleage);
        LEAVE tx01;
      END IF;
      -- 取车辆当天最后一条记录的里程信息
     
      SELECT
        shortmileage + 0,
        mileage + 0,
        time
      INTO v_shortmile, v_totalmile, v_max_time
      FROM t_vehicleanaloginfo
      WHERE vehicledeviceid = v_devid AND time >= p_date
            AND time < p_date + INTERVAL 1 DAY
      ORDER BY time DESC
      LIMIT 1;
  --     SELECT 2,@cursor_not_found,v_vehicleNo;
      -- 取车辆当天的前一天最后一条记录的累计里程信息
      SELECT mileage + 0
      INTO yesterday_v_totalmile
      FROM t_vehicleanaloginfo
      WHERE vehicledeviceid = v_devid AND time >= p_date
            AND time < p_date + INTERVAL 1 DAY
      ORDER BY time ASC
      LIMIT 1;
      
   --    SELECT 0,@cursor_not_found;
      IF v_shortmile > max_shortmileage
      THEN
        SET v_shortmile := NULL;
      END IF;
      IF v_totalmile > max_mileage
      THEN
        SET v_totalmile := NULL;
      END IF;
      -- order by time desc limit 1 ;
      DELETE FROM t_vehiclemiles
      WHERE vehicledeviceid = v_devid AND stat_date = p_date;
    --   SELECT 3,@cursor_not_found,v_vehicleNo;
      -- heli 2017/05/22 将gps里程更新为累积里程
      INSERT INTO t_vehiclemiles (vehicleNo, vehicledeviceid, gpsstatus, stat_date, accruedmiles,
                                  shortmiles,  vehicleAge, updatetime)
      VALUES (v_vehicleNo, v_devid, 'online', p_date, v_totalmile, v_shortmile,
              v_vehicleage, v_max_time);
    END tx01;
    
    fetch cur01 into v_vehicleNo;
     --   SELECT 4,@cursor_not_found,v_vehicleNo;
    end while ;
  
    close cur01;
    
    
    
    
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_miles_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_miles_old`;
delimiter ;;
CREATE PROCEDURE `p_stat_miles_old`(IN p_date date)
BEGIN
    DECLARE max_shortmileage INT DEFAULT 16777215; #短里程最大值，超过改值认为异常
    DECLARE max_mileage INT UNSIGNED DEFAULT 4294967295; #累积里程最大值，超过改值认为异常
    DECLARE v_devid VARCHAR(64);
    DECLARE v_vehicleNo VARCHAR(64);
    DECLARE v_num INT;
    DECLARE v_count INT;
    DECLARE v_shortmile INT; -- 来自can的短里程
    DECLARE v_totalmile INT; -- 来自can的累积里程
    DECLARE yesterday_v_totalmile INT; -- 当前的前一天can的累积里程
    DECLARE v_max_time DATETIME; -- 最后上报的can数据时间
    DECLARE v_vehicleage INT; -- 车龄，精确到月
    DECLARE v_purchase_date DATE; -- 车辆购买时间
    DECLARE v_updatetime DATETIME; -- 车辆数据更新时间
    DECLARE v_logid INT;
    -- 由于不在由外部调用， 现加入事件 每日执行  by 韩亚璋 2018年9月28日
    declare cur01 cursor for select vehicleNo from t_vehicleinfo order by vehicleId;
    declare continue handler for not found set @cursor_not_found = true;
    INSERT INTO maintain_events_log_detail(eventName,startTime,finishTime,comments) VALUES('p_stat_miles',NOW(),NULL,'车龄及里程日统计');
    SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='p_stat_miles';
    set @cursor_not_found := false;
    open cur01;
    fetch cur01 into v_vehicleNo;
    WHILE NOT @cursor_not_found DO
      SELECT deviceId, str_to_date(purchaseDate, '%Y-%m-%d') INTO v_devid, v_purchase_date FROM t_vehicleinfo WHERE vehicleNo = v_vehicleNo;
          --  SELECT v_devid,1,@cursor_not_found;
      tx01: BEGIN
           --  如果车牌号没有设备ID就退出
           IF v_devid IS NULL THEN   LEAVE tx01; END IF;
            --  设置车龄
            IF ifnull(v_purchase_date, NULL) IS NULL THEN SET v_vehicleage = "0"; ELSE SET v_vehicleage := (year(p_date) - year(v_purchase_date)) * 12 + (month(p_date) - month(v_purchase_date) + 1); END IF;
            -- 获取模拟量中，该车是否有数据
            SELECT count(*) INTO v_num FROM ( SELECT vehicledeviceid FROM t_vehicleanaloginfo WHERE vehicledeviceid = v_devid AND time >= p_date AND time < p_date + INTERVAL 1 DAY  LIMIT 1) t;
            SELECT count(1) into v_count FROM t_vehiclemiles WHERE vehicledeviceid = v_devid AND accruedmiles is not NULL and shortmiles is not NULL ORDER BY stat_date DESC LIMIT 1;
                    /*在结果表中，查该车最后一条里程值*/
                    if v_count = 0 then  SELECT 0 , 0 , now() INTO v_totalmile, v_shortmile,  v_updatetime; 
                    else SELECT accruedmiles + 0 , shortmiles + 0 , updatetime INTO v_totalmile, v_shortmile,  v_updatetime FROM (SELECT accruedmiles, shortmiles, 0, updatetime FROM t_vehiclemiles WHERE vehicledeviceid = v_devid AND accruedmiles is not NULL and shortmiles is not NULL ORDER BY stat_date DESC LIMIT 1) t; end if;
                    -- 如果昨天车没数据，则用结果表中的最后一条
                    IF v_num = 0 THEN DELETE FROM t_vehiclemiles WHERE vehicledeviceid = v_devid AND stat_date = p_date;  INSERT INTO t_vehiclemiles (vehicleNo, vehicledeviceid, gpsstatus, stat_date, accruedmiles, shortmiles, updatetime, vehicleAge) VALUES (v_vehicleNo, v_devid, 'offline', p_date, v_totalmile, v_shortmile, v_updatetime, v_vehicleage); 
            LEAVE tx01; 
            END IF;
                    -- 如果昨天车有数据，则用模拟量里的数据
                    SELECT shortmileage + 0, mileage + 0, time INTO v_shortmile, v_totalmile, v_max_time FROM t_vehicleanaloginfo WHERE vehicledeviceid = v_devid AND time >= p_date AND time < p_date + INTERVAL 1 DAY ORDER BY time DESC LIMIT 1;
            -- 异常值重置
            IF v_shortmile > max_shortmileage THEN SET v_shortmile := NULL; END IF; IF v_totalmile > max_mileage THEN SET v_totalmile := NULL; END IF;
            -- 删除结果表，避免重复
            DELETE FROM t_vehiclemiles WHERE vehicledeviceid = v_devid AND stat_date = p_date;
            -- 将结果插入结果表
            INSERT INTO t_vehiclemiles (vehicleNo, vehicledeviceid, gpsstatus, stat_date, accruedmiles, shortmiles,  vehicleAge, updatetime) VALUES (v_vehicleNo, v_devid, 'online', p_date, v_totalmile, v_shortmile, v_vehicleage, v_max_time);
      END tx01;
    
      fetch cur01 into v_vehicleNo;
    end while;
    close cur01;
    
    -- 更新日志
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
  END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_motorlowcurrentalarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_motorlowcurrentalarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_motorlowcurrentalarm_byDay`(in p_date date)
BEGIN
-- ATS系统监控故障月报表 风扇1
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  declare v_gx varchar(45);
  declare v_gy varchar(45);
  declare v_duration int;
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE temporary TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.motorstat
  FROM (
  SELECT VEHICLEDEVICEID,TIME,motorstat
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.motorstat=1;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='电机过流';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT count(1)  into v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time limit 1 ;
		
		if v_cnt2=1 then
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		else set v_gx:=' ';
		     set v_gy:=' ';
		end if;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'电机过流',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),
    v_gx,v_gy,p_date,'集中润滑监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
drop table tmp01;  
  
  CLOSE cur01;
  
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_oilpressuresensoralarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_oilpressuresensoralarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_oilpressuresensoralarm_byDay`(in p_date date)
BEGIN
-- ATS系统监控故障月报表 风扇1
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  declare v_gx varchar(45);
  declare v_gy varchar(45);
  declare v_duration int;
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE temporary TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.oilpressurestat
  FROM (
  SELECT VEHICLEDEVICEID,TIME,oilpressurestat
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.oilpressurestat=2;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='油压传感器故障';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT count(1)  into v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time limit 1 ;
		
		if v_cnt2=1 then
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		else set v_gx:=' ';
		     set v_gy:=' ';
		end if;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'油压传感器故障',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),
    v_gx,v_gy,p_date,'集中润滑监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
drop table tmp01;  
  
  CLOSE cur01;
  
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_PiLaoJiaShi_ByDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_PiLaoJiaShi_ByDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_PiLaoJiaShi_ByDay`(IN p_date DATE)
BEGIN
  -- 驾驶行为分析：疲劳驾驶
  -- 算法描述：直接判断报警量
  declare v_pre_score int;
  declare v_cur_score int;
  declare v_alarmtype_id int;
  
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  
  declare v_cnt int;
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,score from tmp01 
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='疲劳驾驶'
  group by dept_id;  
  
  select alarmTypeId into v_alarmtype_id
  from t_vehiclealarmtype where alarmname='TiredDriving';
 
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t3.score
  from (
  select deviceId as VEHICLEDEVICEID,alarmTime as time
  from t_vehiclealarminfo a
  where alarmtypeid=v_alarmtype_id
  and a.alarmTime>=p_date and a.alarmTime<adddate(p_date,interval 1 day) ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
  
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='TiredDriving';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_pre_score;
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_score;
    
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehiclealarminfo a 
	where a.deviceId=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score)
	  values(v_first_vid,'TiredDriving','疲劳驾驶',v_first_time,v_pre_time,p_date,v_pre_score);
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time; 
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else 
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	  set v_pre_time:=v_cur_time;
	end if;
           
    
  end while label01;
  
  close cur01;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_QiBuBuGuanCheMen_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_QiBuBuGuanCheMen_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_QiBuBuGuanCheMen_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：起步不关车门
  -- 算法描述：第一个速度非0时刻起，判断所有车门是否关闭
  declare v_score int; 
  
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  declare v_cnt int;
  
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  
  
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy, score from tmp01    -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='起步不关车门'
  group by dept_id; 
 
 
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  select a.VEHICLEDEVICEID,a.time,b.gpsx,b.gpsy   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from t_vehiclestateinfo1 a inner join t_vehicleanaloginfo b
  on a.VEHICLEDEVICEID=b.VEHICLEDEVICEID and a.time=b.time
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and b.speed>0 
  and (a.AllDoorShut='0' or a.frontdooropen='1' or a.middledooropen='1' or a.middledoor2open='1'
      or a.reardooropen='1' or leftfrontdooropen='1' or a.leftmiddledooropen='1' 
      or a.leftreardooropen='1' or a.rightfrontdooropen='1' or a.rightmiddledooropen='1' 
      or a.rightreardooropen='1' or a.leftdoorallopen='1' or a.rightdoorallopen='1' 
      )) t1
   inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
   inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
  
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='startWithDoorOpen';
  
  open cur01;
  fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_score;   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  label01:while not @cursor_not_found do
    -- 判断是否为第一个非0速度的记录  
	select count(1) into v_cnt from (
     select t.speed from
       (select speed from t_vehicleanaloginfo a 
	    where a.VEHICLEDEVICEID=v_cur_vid
        -- 判断该条记录之前的一条记录是否速度大于0
	    and a.time>v_cur_time - interval 1 minute and a.time<v_cur_time 
        order by time desc) t 
	  limit 1) tt 
	where speed>0;
    
    if v_cnt=0 then 
    -- 该次违规判断结束
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score)     -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  values(v_cur_vid,'startWithDoorOpen','起步不关车门',v_cur_time,v_cur_time,v_cur_gpsx,v_cur_gpsy,p_date,v_score);    -- 新增 gps信息  2018年9月20日  by 韩亚璋
	end if;
           
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_score;
  end while label01;
  
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_QiBuJiJiaSu_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_QiBuJiJiaSu_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_QiBuJiJiaSu_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：起步急加速
  -- 算法描述：从第一次车速>0时刻起，规定时间内，车速大于设定值
  declare v_score int;  
  declare v_time_interval int;
  declare v_max_speed int;
  declare v_devid varchar(32);
 
  declare  cur01 cursor for select t1.deviceId,t2.speed,t2.time_interval,t2.score
       from t_vehicleinfo t1 
       inner join tmp_stat_config t2  
       on t1.deptid=t2.dept_id;
  declare continue handler for not found set @cursor_not_found=true;
  
  -- -----------------------------------------------------------------------
  set @cursor_not_found :=false;
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'speed' then para_value else null end) as speed,
  max(case parameter when 'time_interval' then para_value else null end) as time_interval,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='起步急加速'
  group by dept_id; 
 
  -- 删除数据，避免多次计算导致重复 
  delete from stat_driving_violation_detail where stat_date=p_date and actiontype='startAccelerationRapidly';
  
  -- 开始游标 
  open cur01;
  fetch cur01 into v_devid,v_max_speed,v_time_interval,v_score;
  
  
  
   WHILE NOT @cursor_not_found DO
  DROP TABLE IF EXISTS tmp01;
    CREATE TEMPORARY TABLE tmp01 AS SELECT VEHICLEDEVICEID,TIME,gpsx,gpsy,speed, -- 新增 gps信息 2018年9月21日  BY 韩亚璋
        CASE WHEN @speed IS NULL THEN @gid:=0  
         -- 连续的两条记录车速都为0或都不为0，则为同一组 
	      WHEN (speed=0 AND @speed=0) OR (speed>0 AND @speed>0) THEN @gid
          -- 连续的两条记录车速有一个为0，产生新组 
          ELSE  @gid:=@gid+1 END AS gid,
        CASE WHEN @speed IS NULL THEN @r:=1  
	      WHEN (speed=0 AND @speed=0) OR (speed>0 AND @speed>0) THEN @r:=@r+1
          ELSE  @r:=1  END AS r,
        CASE WHEN @speed IS NULL THEN @time:=TIME  
	      WHEN (speed=0 AND @speed=0) OR (speed>0 AND @speed>0) THEN @time
          ELSE  @time:=TIME  END AS tim,
        @speed:=speed,
        TIMESTAMPDIFF(SECOND,@time,TIME) TIMEDIFF
	 FROM (
	   SELECT a.VEHICLEDEVICEID,a.time,a.gpsx,a.gpsy,a.speed      -- 新增 gps信息 2018年9月21日  BY 韩亚璋
       FROM t_vehicleanaloginfo a 
       WHERE a.time>=p_date AND a.time<p_date+INTERVAL 1 DAY
       -- 对一辆车全天的数据按照时间排序 
       AND vehicledeviceid=v_devid
       ORDER BY TIME ASC ) t1 
	 INNER JOIN (SELECT @gid:=NULL,@speed:=NULL,@r:=0,@time:=NULL) t2 ON 1=1 ;
	
-- 获取 gps 信息，待过滤 新增 gps信息 2018年9月21日  BY 韩亚璋
DROP TABLE  IF EXISTS  tmp02; 
create temporary table tmp02 as	
	select  vehicledeviceid,time,gpsx,gpsy from tmp01 where r=1 and TIMEDIFF<=v_time_interval AND speed>0;
-- 获取违规数据
DROP TABLE  IF EXISTS  tmp03; 
CREATE TEMPORARY TABLE tmp03 AS		
	select vehicledeviceid,MIN(TIME) as bt,MAX(TIME) as et ,MAX(speed) as speed from tmp01 
	WHERE TIMEDIFF<=v_time_interval AND speed>0
  GROUP BY gid HAVING MAX(speed)>=v_max_speed ;
  
  
  -- 插入数据 新增 gps信息 2018年9月21日  BY 韩亚璋
  
  INSERT INTO stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy, stat_date,score,speed)    
  select v_devid,'startAccelerationRapidly','起步急加速',bt,et,a.gpsx,a.gpsy,p_date,v_score,speed   --   2018年9月21日  by 韩亚璋
  from tmp02 a inner join tmp03 b on a.time=b.bt ; -- 关联数据，并过滤gps信息
  
	 
/*  INSERT INTO stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score,speed)
    SELECT v_devid,'startAccelerationRapidly','起步急加速',MIN(TIME),MAX(TIME),p_date,v_score,MAX(speed)
  
  while not @cursor_not_found do
    insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score,speed)
    select v_devid,'startAccelerationRapidly','起步急加速',min(time),max(time),p_date,v_score,max(speed)
    from (-- 按照时间排序，第一个非0车速来分组 ，车速全为0的为一组 
      select VEHICLEDEVICEID,time,speed,
        case when @speed is null then @gid:=0  
         -- 连续的两条记录车速都为0或都不为0，则为同一组 
	      when (speed=0 and @speed=0) or (speed>0 and @speed>0) then @gid
          -- 连续的两条记录车速有一个为0，产生新组 
          else  @gid:=@gid+1 end as gid,
        case when @speed is null then @r:=1  
	      when (speed=0 and @speed=0) or (speed>0 and @speed>0) then @r:=@r+1
          else  @r:=1  end as r,
        case when @speed is null then @time:=time  
	      when (speed=0 and @speed=0) or (speed>0 and @speed>0) then @time
          else  @time:=time  end as tim,
        @speed:=speed,
        timestampdiff(second,@time,time) timediff
	 from (
	   select a.VEHICLEDEVICEID,a.time,a.speed
       from t_vehicleanaloginfo a 
       where a.time>=p_date and a.time<p_date+interval 1 day
       -- 对一辆车全天的数据按照时间排序 
       and vehicledeviceid=v_devid
       order by time asc ) t1 
	 inner join (select @gid:=null,@speed:=null,@r:=0,@time:=null) t2 on 1=1 ) tt
  -- 找出规定时间内车速达到阈值的组 
  where timediff<=v_time_interval and speed>0
  group by gid having max(speed)>=v_max_speed ;
    */
    fetch cur01 into v_devid,v_max_speed,v_time_interval,v_score;
  end while;
  -- 关闭游标 
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_QiBuJiJiaSu_byDay_bak
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_QiBuJiJiaSu_byDay_bak`;
delimiter ;;
CREATE PROCEDURE `p_stat_QiBuJiJiaSu_byDay_bak`(p_date date)
BEGIN
  -- 驾驶行为分析：起步急加速
  -- 算法描述：从第一次车速>0时刻起，规定时间内，车速大于设定值
  declare v_score int;  
  declare v_time_interval int;
  declare v_max_speed int;
 
  declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_first_speed int ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_pre_speed int ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  declare v_cur_speed int ;
  
  declare v_cnt int;
  declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,speed from tmp01 
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 获取参数 
  select para_value  into v_max_speed from stat_drivingconfig 
  where type_desc='起步急加速' and parameter='speed'; 
  
  select para_value  into v_time_interval from stat_drivingconfig 
  where type_desc='起步急加速' and parameter='time_interval'; 
  
  select para_value into v_score from stat_drivingconfig 
  where type_desc='起步急加速' and parameter='score';
 
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select a.VEHICLEDEVICEID,a.time,a.speed
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and a.speed>0;
  
  delete from stat_driving_violation_detail where stat_date=p_date and actiontype='startAccelerationRapidly';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_speed;
  set v_cur_vid:=v_first_vid;
  set v_cur_time:=v_first_time;
  set v_cur_speed:=v_first_speed;
  set v_pre_time:=v_first_time;
  set v_pre_vid:=v_first_vid;
  
  label01:while not @cursor_not_found do
    set v_timediff :=timestampdiff(second,v_first_time,v_cur_time);
    
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehicleanaloginfo a 
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 or v_timediff > v_time_interval then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
 	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	  set v_pre_vid:=v_first_vid;
	  set v_pre_time:=v_first_time;  
      
      if v_cur_speed>v_max_speed then
      -- 违规
        set v_success:='Y';
        
        insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score)
		 values(v_first_vid,'startAccelerationRapidly','起步急加速',v_cur_time,v_cur_time,p_date,v_score);
      else
        -- 没有违规  
        set v_success:='N';
      end if;
	
	else 
    -- 是连续的，继续判断
      if v_cur_speed>v_max_speed and v_success='N' then
        set v_success:='Y';
        set v_pre_time:=v_cur_time;
        
        insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score)
		 values(v_first_vid,'startAccelerationRapidly','起步急加速',v_first_time,v_cur_time,p_date,v_score);
      else
        set v_pre_time:=v_cur_time;
      end if;
	end if;
           
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_speed;
  end while label01;
  
  close cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_QiDongWuShaChe_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_QiDongWuShaChe_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_QiDongWuShaChe_byDay`(p_date DATE)
BEGIN
  -- 驾驶行为分析：启动无刹车报警
  -- 算法描述：第一个速度非0时刻起，判断手刹或刹车无效
  DECLARE v_pre_score INT;
  DECLARE v_cur_score INT;
  
  -- declare v_success char(1) default 'N';-- 标记是否为一次违规
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  
   -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  DECLARE v_cnt INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME,gpsx,gpsy,score FROM tmp01  -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  
  SET @cursor_not_found :=FALSE;
 
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='启动无刹车'
  group by dept_id; 
  -- 获取基本数据
  DROP TABLE IF EXISTS tmp01;
  
  CREATE TEMPORARY TABLE tmp01 AS
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  SELECT a.VEHICLEDEVICEID,a.time ,b.gpsx,b.gpsy       -- 新增 gps信息  2018年9月20日  by 韩亚璋
  FROM t_vehiclestateinfo1 a INNER JOIN t_vehicleanaloginfo b  
  ON a.VEHICLEDEVICEID=b.VEHICLEDEVICEID AND a.time=b.time
  WHERE a.time>=p_date AND a.time<ADDDATE(p_date,INTERVAL 1 DAY)
  AND b.speed>0 AND a.HandBrake<>'1' ) t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
  -- and a.Brake<>'1';
  -- 孙天恒2017-05-09修改，避免影响驾驶员排名，修改前的违规扣分高达几万
  
  DELETE FROM stat_driving_violation_detail 
  WHERE stat_date=p_date AND actiontype='startWithoutBrake';
  
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; -- 添加 gps信息  2018年9月20日 by 韩亚璋
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
   -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score; -- gps信息添加 2018年9月20日 by 韩亚璋
    
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM t_vehicleanaloginfo a 
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
    
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  INSERT INTO stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score) -- gps信息添加 2018年9月20日 by 韩亚璋
	  VALUES(v_first_vid,'startWithoutBrake','启动无刹车',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score);-- gps信息添加 2018年9月20日 by 韩亚璋
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
	    -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;  
       -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	ELSE 
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	  SET v_pre_time:=v_cur_time;
	   -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	END IF;
           
    
  END WHILE label01;
  
  CLOSE cur01;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_statealarm_summary
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_statealarm_summary`;
delimiter ;;
CREATE PROCEDURE `p_stat_statealarm_summary`(p_date date)
BEGIN
-- ATS系统监控故障月报表 及详情
truncate stat_statealarm_summary_tmp;
/*call `p_stat_fan1alarm_byDay`(p_date);
CALL `p_stat_fan2alarm_byDay`(p_date);
CALL `p_stat_waterpump1alarm_byDay`(p_date);
CALL `p_stat_waterpump2alarm_byDay`(p_date);
CALL `p_stat_motorlowcurrentalarm_byDay`(p_date);
CALL `p_stat_oilpressuresensoralarm_byDay`(p_date);*/
-- 详情汇总
   delete from stat_6monitoralarm_detail where stattime=p_date;
	-- 状态量报警
	 INSERT INTO stat_6monitoralarm_detail(vehicleNo,deviceId,driverName,alarmtype,alarmstarttime,lastAlarmTime,duration,motorType,
	    gx,gy,stattime,alarmType2,companyName,companyDeptId,
	    subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId) -- alarmtype2  空调，胎压，ebs等
	     SELECT t2.vehicleno, t1.vehicledeviceid,t5.drivername,t1.alarmtype,t1.begin_time,t1.end_time,t1.duration, 
	    t2.motortype, t1.gx,t1.gy, t1.stattime,t1.alarmtype2, t4.companyName,t4.companyDeptId,
	    t4.subCompanyName,t4.subCompanyDeptId,t4.groupName,t4.groupDeptId,t4.lineName,t4.lineDeptId
	    FROM `stat_statealarm_summary_tmp` t1  INNER JOIN t_vehicleinfo t2
	     ON t1.vehicledeviceId=t2.deviceId  
	     INNER JOIN v_lineinfo t4  ON t2.deptId=t4.lineDeptId 
	     INNER JOIN (SELECT  deviceid ,drivername,signintime FROM 
	    ( SELECT  deviceid ,drivername,signintime FROM driver_attendance  ORDER BY signintime DESC) tt GROUP BY deviceid ) t5  ON t5.deviceid = t1.vehicledeviceid;
	-- 报警量报警
    
     INSERT INTO stat_6monitoralarm_detail(vehicleNo,deviceId,driverName,alarmtype,alarmstarttime,lastAlarmTime,duration, alarmlocation,motorType,
    gx,gy,stattime,alarmType2,companyName,companyDeptId,subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId)
    
		SELECT  `vehicleNo`  , `deviceId` ,  `driverName`  , `alarmType`  , `alarmstarttime` , `lastAlarmTime` , `duration` ,  `alarmlocation`  ,`motorType` ,
		       `gx`,  `gy`  , `statTime` ,b.alarmtype2, `companyName` ,  `companyDeptId`,   `subCompanyName` ,  `subCompanyDeptId` ,  `groupName` ,  
		       `groupDeptId`   ,`lineName` ,  `lineDeptId`
		  FROM t_alarmsummary a INNER JOIN t_vehiclenewalarmtype b ON b.alarmtypeid=a.alarmtypeid
		  
		 WHERE 
		 -- 取报警结束的记录 和  监控月报表里的报警
		    a.`finished`=1 AND a.alarmflag=2 and stattime = p_date AND EXISTS (SELECT c.alarmtypeid FROM t_vehiclenewalarmtype c WHERE c.alarmtypeid=a.alarmtypeid);
     
     
     
     
     
     
     
     
     
    -- 月统计 
    delete from stat_6monitoralarm_summary where stattime=p_date-interval day(p_date)-1 day;
  INSERT INTO  stat_6monitoralarm_summary(vehicleNo,deviceId,driverName,alarmtype,duration,motorType,
    stattime,alarmType2,companyName,companyDeptId,
    subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId,times)   
     select vehicleNo,deviceId,driverName,alarmtype,sum(duration),motorType,
    p_date-INTERVAL DAY(p_date)-1 DAY,alarmType2,companyName,companyDeptId,
    subCompanyName,subCompanyDeptId,groupName,groupDeptId,lineName,lineDeptId ,count(*)
     from stat_6monitoralarm_detail  where 
    stattime >= p_date-interval day(p_date)-1 day and stattime< LAST_DAY(p_date)+INTERVAL 1 DAY 
     group by vehicleno,alarmtype;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_vehicle_speed
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_vehicle_speed`;
delimiter ;;
CREATE PROCEDURE `p_stat_vehicle_speed`(IN p_date DATE)
BEGIN
     -- 司机驾驶最高车速
 /*  delete from stat_speed_analyse where stat_date=p_date and type='day';
  insert into stat_speed_analyse(deviceId,vehicleNo,value,driverId,driverName,
    lineId,type,stat_date,create_time)
  select vehicledeviceid,t2.vehicleNo,speed,t2.driverId,t2.driverName,t2.lineId,
    'day',p_date,now()
  from (
  select vehicledeviceid,max(speed) speed
  from t_vehicleanaloginfo
  where time>=p_date and time<p_date+interval 1 day
  group by vehicledeviceid ) t1
  left join driver_attendance t2 on t1.vehicledeviceid=t2.deviceId ;
 
  
  -- 求每月平均最高车速
  delete from stat_speed_analyse where stat_date=p_date - interval (day(p_date)-1) day and type='month';
  insert into stat_speed_analyse(deviceId,vehicleNo,value,driverId,driverName,
    lineId,type,stat_date,create_time)
  select deviceId,max(vehicleNo),avg(value),max(driverId),max(driverName),
      max(lineId),'month',p_date - interval (day(p_date)-1) day ,now()
  from stat_speed_analyse
  where stat_date>=p_date - interval (day(p_date)-1) day
  and stat_date<last_day(p_date)+interval 1 day
  and type='day'
  group by deviceId ;*/
  
   -- 去掉  司机信息  2019年3月6日 更新 hanyazhang
   DELETE FROM stat_speed_analyse WHERE stat_date=p_date AND TYPE='day';
  INSERT INTO stat_speed_analyse(deviceId,vehicleNo,VALUE,
    lineId,TYPE,stat_date,create_time)
  SELECT vehicledeviceid,t2.vehicleNo,speed,
  t2.deptId,  'day',p_date,NOW()
  FROM (
  SELECT vehicledeviceid,MAX(speed) speed
  FROM t_vehicleanaloginfo
  WHERE TIME>=p_date AND TIME<p_date+INTERVAL 1 DAY
  GROUP BY vehicledeviceid ) t1
  LEFT JOIN t_vehicleinfo t2 ON t1.vehicledeviceid=t2.deviceId ;  
  
  -- 求每月平均最高车速
  DELETE FROM stat_speed_analyse WHERE stat_date=p_date - INTERVAL (DAY(p_date)-1) DAY AND TYPE='month';
  INSERT INTO stat_speed_analyse(deviceId,vehicleNo,VALUE,
    lineId,TYPE,stat_date,create_time)
  SELECT deviceId,MAX(vehicleNo),AVG(VALUE),
      MAX(lineId),'month',p_date - INTERVAL (DAY(p_date)-1) DAY ,NOW()
  FROM stat_speed_analyse
  WHERE stat_date>=p_date - INTERVAL (DAY(p_date)-1) DAY
  AND stat_date<LAST_DAY(p_date)+INTERVAL 1 DAY
  AND TYPE='day'
  GROUP BY deviceId ;  
  
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_vehicle_speed_forhour
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_vehicle_speed_forhour`;
delimiter ;;
CREATE PROCEDURE `p_stat_vehicle_speed_forhour`(IN p_date DATE)
BEGIN
declare v_end_time datetime;
DECLARE v_begin_time DATETIME;
declare v_cnt int;
set v_cnt:=0;
SET v_begin_time:=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00');
SET v_end_time:=v_begin_time+ interval 1 hour;
 DELETE FROM stat_speed_analyse_forhour WHERE stat_date=p_date AND TYPE='day';
 DELETE FROM stat_speed_analyse_forhour WHERE stat_date=p_date - INTERVAL (DAY(p_date)-1) DAY AND TYPE='month';
 DELETE FROM stat_speed_analyse_forhour WHERE stat_date=p_date - INTERVAL (DAY(p_date)-1) DAY - INTERVAL (MONTH(p_date) -1) MONTH  AND TYPE='year';
 
while v_cnt< 24  do
    -- 求每日平均车速 按小时分 
  
 /* insert into stat_speed_analyse_forhour(deviceId,vehicleNo,value,driverId,driverName,
    deptId,type,stat_date,`hour`)
  select vehicledeviceid,t2.vehicleNo,speed,t2.driverId,t2.driverName,t2.lineDeptId,
    'day',p_date,v_cnt
  from (
  select vehicledeviceid,avg(speed) speed
  from t_vehicleanaloginfo
  where time>=v_begin_time and time<v_end_time and speed>0
  group by vehicledeviceid ) t1
  left join driver_attendance t2 on t1.vehicledeviceid=t2.deviceId ;
  
  SET v_begin_time:=v_end_time;
  SET v_end_time:=v_begin_time+ INTERVAL 1 HOUR;
  
  
  
  -- 求每月平均最高车速
 
  INSERT INTO stat_speed_analyse_forhour(deviceId,vehicleNo,VALUE,driverId,driverName,
    deptId,TYPE,stat_date,`hour`)
  SELECT deviceId,MAX(vehicleNo),AVG(VALUE),MAX(driverId),MAX(driverName),
      MAX(deptId),'month',p_date - INTERVAL (DAY(p_date)-1) DAY ,v_cnt
  FROM stat_speed_analyse_forhour
  WHERE stat_date>=p_date - INTERVAL (DAY(p_date)-1) DAY
  AND stat_date<LAST_DAY(p_date)+INTERVAL 1 DAY
  and `hour`=v_cnt
  AND TYPE='day'
  GROUP BY deviceId ;  
  
  
    -- 求每年平均最高车速
      INSERT INTO stat_speed_analyse_forhour(deviceId,vehicleNo,VALUE,driverId,driverName,
    deptId,TYPE,stat_date,`hour`)
  SELECT deviceId,MAX(vehicleNo),AVG(VALUE),MAX(driverId),MAX(driverName),
      MAX(deptId),'year',p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH  ,v_cnt
  FROM stat_speed_analyse_forhour
  WHERE stat_date>=p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH 
  AND stat_date<p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH +INTERVAL 1 YEAR
  AND `hour`=v_cnt
  AND TYPE='month'
  GROUP BY deviceId ;  
    
  
  set v_cnt:=v_cnt+1;*/
  
 
    -- 去掉  司机信息  2019年3月6日 更新 hanyazhang
    -- 求每日平均车速 按小时分 
 insert into stat_speed_analyse_forhour(deviceId,vehicleNo,value,
    deptId,type,stat_date,`hour`)
  select vehicledeviceid,t2.vehicleNo,speed,t2.deptId,
    'day',p_date,v_cnt
  from (
  select vehicledeviceid,avg(speed) speed
  from t_vehicleanaloginfo
  where time>=v_begin_time and time<v_end_time and speed>0
  group by vehicledeviceid ) t1
  left join t_vehicleinfo t2 on t1.vehicledeviceid=t2.deviceId ;
  
  SET v_begin_time:=v_end_time;
  SET v_end_time:=v_begin_time+ INTERVAL 1 HOUR;
  
  
  
  -- 求每月平均最高车速
 
  INSERT INTO stat_speed_analyse_forhour(deviceId,vehicleNo,VALUE,
    deptId,TYPE,stat_date,`hour`)
  SELECT deviceId,MAX(vehicleNo),AVG(VALUE),
      MAX(deptId),'month',p_date - INTERVAL (DAY(p_date)-1) DAY ,v_cnt
  FROM stat_speed_analyse_forhour
  WHERE stat_date>=p_date - INTERVAL (DAY(p_date)-1) DAY
  AND stat_date<LAST_DAY(p_date)+INTERVAL 1 DAY
  and `hour`=v_cnt
  AND TYPE='day'
  GROUP BY deviceId ;  
  
  
    -- 求每年平均最高车速
      INSERT INTO stat_speed_analyse_forhour(deviceId,vehicleNo,VALUE,
    deptId,TYPE,stat_date,`hour`)
  SELECT deviceId,MAX(vehicleNo),AVG(VALUE),
      MAX(deptId),'year',p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH  ,v_cnt
  FROM stat_speed_analyse_forhour
  WHERE stat_date>=p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH 
  AND stat_date<p_date - INTERVAL DAY(p_date)-1 DAY - INTERVAL MONTH(p_date) -1 MONTH +INTERVAL 1 YEAR
  AND `hour`=v_cnt
  AND TYPE='month'
  GROUP BY deviceId ;  
    
  
  set v_cnt:=v_cnt+1;  
  
  
  end while;
  
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_vehicle_totalinfo_byday
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_vehicle_totalinfo_byday`;
delimiter ;;
CREATE PROCEDURE `p_stat_vehicle_totalinfo_byday`(p_startdate date,p_enddate date)
BEGIN
  declare v_day date;
  declare v_startTime timestamp ; 
  
  set v_startTime:=current_timestamp() ;  
  
  -- 定义临时表来保存结果 
  drop table if exists tmp_vehicle_totalinfo;
  create temporary table tmp_vehicle_totalinfo(
         deviceid varchar(16),-- 车载设备id
         stat_date date,-- 统计日期 
         type varchar(16),-- 类型：analog-模拟量，state-状态量，alarm-报警量
         totalNum int -- 总量 
  );
  
  set v_day:=p_startdate;
  
  -- 每天循环执行，避免按time group by，提升效率
  while v_day<=p_enddate do
    -- 状态量
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'state',count(*) 
    from T_VehicleStateInfo1
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'state',count(*) 
    from T_VehicleStateInfo2
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'state',count(*) 
    from T_VehicleStateInfo3
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'state',count(*) 
    from T_ElectricVehicleStateInfo
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    
    -- 模拟量 
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'analog',count(*) 
    from T_VehicleAnalogInfo
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    insert into tmp_vehicle_totalinfo
    select vehicledeviceid,v_day,'analog',count(*) 
    from T_ElectricvehicleAna
    where time >=v_day and time < v_day+interval 1 day
    group by vehicledeviceid;
    
    -- 报警量 
    insert into tmp_vehicle_totalinfo
    select deviceId,v_day,'analog',count(*) 
    from t_vehiclealarminfo
    where alarmtime >=v_day and alarmtime < v_day+interval 1 day
    group by deviceId;
    
    set v_day:=v_day+interval 1 day;
  end while;
  
  delete from stat_vehicle_totalinfo where stat_date>=p_startdate and stat_date<p_enddate+interval 1 day;
  
  -- 输出结果
  insert into stat_vehicle_totalinfo
  select v.vehicleId,v.vehicleNo,t.deviceid,t.stat_date,t.analogNum,t.stateNum,t.alarmNum
  from (
  select deviceid,stat_date,
    sum(case type when 'analog' then totalNum else 0 end) as analogNum,
    sum(case type when 'state' then totalNum else 0 end) as stateNum,
    sum(case type when 'alarm' then totalNum else 0 end) as alarmNum
  from tmp_vehicle_totalinfo 
  group by deviceid,stat_date) t 
  left join t_vehicleinfo v on t.deviceid=v.deviceId ;
  
  -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime)values('p_stat_vehicle_totalinfo',v_startTime,now());
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_waterpump1alarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_waterpump1alarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_waterpump1alarm_byDay`(p_date date)
BEGIN
-- ATS系统监控故障月报表  下水泵1
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  DECLARE v_gx VARCHAR(45);
  DECLARE v_gy VARCHAR(45);
  
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE TEMPORARY TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.waterpump1
  FROM (
  SELECT VEHICLEDEVICEID,TIME,waterpump1
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.waterpump1=1;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='水泵1故障';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT COUNT(1)  INTO v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time LIMIT 1 ;
		
		IF v_cnt2=1 THEN
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		ELSE SET v_gx:=' ';
		     SET v_gy:=' ';
		END IF;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'水泵1故障',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),v_gx,v_gy,p_date,'散热(ATS)系统监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
DROP TABLE tmp01;  
  
  CLOSE cur01;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_waterpump2alarm_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_waterpump2alarm_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_waterpump2alarm_byDay`(p_date date)
BEGIN
-- ATS系统监控故障月报表  下水泵2
  -- 算法描述：状态量2 中连续的一组1，则为 报警
  DECLARE v_first_vid VARCHAR(256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR(256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR(256) ;
  DECLARE v_cur_time DATETIME ;
  DECLARE v_gx VARCHAR(45);
  DECLARE v_gy VARCHAR(45);
  
  DECLARE v_cnt INT;
  DECLARE v_cnt2 INT;
  -- declare v_timediff int;
  DECLARE  cur01 CURSOR FOR SELECT VEHICLEDEVICEID,TIME FROM tmp01
                  ORDER BY VEHICLEDEVICEID,TIME ASC;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  -- 获取基本数据
  
  DROP TABLE IF EXISTS tmp01;
  CREATE TEMPORARY TABLE tmp01 AS
  SELECT t1.VEHICLEDEVICEID,t1.time,t1.waterpump2
  FROM (
  SELECT VEHICLEDEVICEID,TIME,waterpump2
  FROM `t_vehiclestateinfo2` a
  WHERE a.time >= p_date AND a.time < ADDDATE(p_date,INTERVAL 1 DAY) ) t1
  INNER JOIN t_vehicleinfo t2 ON t1.VEHICLEDEVICEID=t2.deviceid
    WHERE t1.waterpump2=1;
  DELETE FROM stat_6monitoralarm_detail
  WHERE stattime=p_date AND alarmtype='水泵2故障';
  OPEN cur01;
  FETCH cur01 INTO v_first_vid,v_first_time;
  SET v_pre_vid:=v_first_vid;
  SET v_pre_time:=v_first_time;
 
     
  label01:WHILE NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,v_cur_time;
    IF @cursor_not_found THEN
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      SET v_cur_vid:='xx';
	END IF;
    -- 判断两条候选是否连续的，即中间有无其他记录
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM `t_vehiclestateinfo2` a
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
	
	
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN
    -- 不是同一辆车或相邻的两个候选不是连续的记录
    -- 该次违规判断结束，重新初始化first
     
  
 SELECT COUNT(1)  INTO v_cnt2 FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time LIMIT 1 ;
		
		IF v_cnt2=1 THEN
			 SELECT gpsx,gpsy INTO v_gx,v_gy    FROM t_vehicleanaloginfo WHERE vehicledeviceid =v_pre_vid AND TIME = v_pre_time ;
		ELSE SET v_gx:=' ';
		     SET v_gy:=' ';
		END IF;
    
    
    INSERT INTO stat_statealarm_summary_tmp (   vehicledeviceid,alarmtype,begin_time,
		end_time,duration,gx ,gy ,stattime, alarmtype2 )
    
    VALUES(v_pre_vid,'水泵2故障',v_first_time,v_pre_time,TIMESTAMPDIFF(SECOND,v_first_time,v_pre_time),v_gx,v_gy,p_date,'散热(ATS)系统监控');
        
    
    
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time;
	ELSE
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录
	  SET v_pre_time:=v_cur_time;
	END IF;
	
  END WHILE label01;
  
DROP TABLE tmp01;  
  
  CLOSE cur01;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_WeiTingWenKaiCheMen_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_WeiTingWenKaiCheMen_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_WeiTingWenKaiCheMen_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：未停稳开车门
  -- 算法描述：判断当前车速不为0，且车门开状态
  declare v_pre_score int ;
  declare v_cur_score int ;
  -- declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar (256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar (256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar (256) ;
  declare v_cur_time datetime ;
   -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int ;
  -- declare v_timediff int;
  declare cur01 cursor for
  select VEHICLEDEVICEID,time,gpsx,gpsy,score  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from
    tmp01
  order by VEHICLEDEVICEID,
    time asc ;
  declare continue handler for not found set @cursor_not_found = true ;
  set @cursor_not_found := false ;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='车辆未停稳开车门'
  group by dept_id; 
  -- 获取基本数据
  drop table if exists tmp01 ;
  create temporary table tmp01 as 
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t3.score -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  select 
    a.VEHICLEDEVICEID,
    a.time,
    a.AllDoorShut,
    a.AllDoorOpen,
    b.speed ,b.gpsx,b.gpsy   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from
    t_vehiclestateinfo1 a 
    inner join t_vehicleanaloginfo b 
      on a.VEHICLEDEVICEID = b.VEHICLEDEVICEID 
      and a.time = b.time 
  where a.time >= p_date 
    and a.time < adddate(p_date, interval 1 day) 
    and b.speed > 0 
    and (
      a.alldoorshut = '0' 
      or a.frontdooropen = '1' 
      or a.middledooropen = '1' 
      or a.middledoor2open = '1' 
      or a.reardooropen = '1' 
      or a.leftfrontdooropen = '1' 
      or a.leftmiddledooropen = '1' 
      or a.leftreardooropen = '1' 
      or a.rightfrontdooropen = '1' 
      or a.rightmiddledooropen = '1' 
      or a.rightreardooropen = '1' 
      or a.leftdoorallopen = '1' 
      or a.rightdoorallopen = '1'
    ) ) t1
    inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
    inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
    
  delete
  from
    stat_driving_violation_detail
  where stat_date = p_date
    and actiontype = 'openDoorNotStopYet' ;
  open cur01 ;
  fetch cur01 into v_first_vid,
  v_first_time , v_first_gpsx,v_first_gpsy,v_pre_score;  -- 添加 gps信息  2018年9月20日 by 韩亚璋
  set v_pre_vid := v_first_vid ;
  set v_pre_time := v_first_time ;
   -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  label01 :
  while
    not @cursor_not_found do fetch cur01 into v_cur_vid,
    v_cur_time ,v_cur_gpsx,v_cur_gpsy,v_cur_score;  -- gps信息添加 2018年9月20日 by 韩亚璋
    if @cursor_not_found 
    then -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
    set v_cur_vid := 'xx' ;
    end if ;
    -- 判断两条候选是否连续的，即中间有无其他记录 
    select 
      count(1) into v_cnt 
    from
      (select 
        1 
      from
        t_vehicleanaloginfo a 
      where a.VEHICLEDEVICEID = v_first_vid 
        and a.time > v_pre_time 
        and a.time < v_cur_time 
      limit 1) t ;
    if v_cur_vid <> v_pre_vid 
    or v_cnt = 1 
    then -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
    insert into stat_driving_violation_detail (
      VehicleDeviceID,
      actiontype,
      actiontypeDesc,
      begin_time,
      end_time,
      gpsx,gpsy, -- gps信息添加 2018年9月20日 by 韩亚璋
      stat_date,
      score
    ) 
    values
      (
        v_first_vid,
        'openDoorNotStopYet',
        '车辆未停稳开车门',
        v_first_time,
        v_pre_time,
        v_first_gpsx,v_first_gpsy,  -- gps信息添加 2018年9月20日 by 韩亚璋
        p_date,
        v_pre_score
      ) ;
    set v_first_vid := v_cur_vid ;
    set v_first_time := v_cur_time ;
      -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
    set v_pre_vid := v_first_vid ;
    set v_pre_time := v_first_time ;
     -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
    set v_pre_score:=v_cur_score;
    -- set v_success:='N';
    -- 是连续的，继续判断
    else -- 算违规，但该次违规判断还未结束，继续判断下一条记录  
    set v_pre_time := v_cur_time ;
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
    end if ;
  end while label01 ;
  close cur01 ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_XiHuoHuaXing_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_XiHuoHuaXing_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_XiHuoHuaXing_byDay`(p_date DATE)
BEGIN
  -- 驾驶行为分析：熄火滑行
  -- 算法描述：空挡有效时，车速大于0，且转速小于300转/分
  DECLARE v_pre_score INT ;
  DECLARE v_cur_score INT ;
  DECLARE v_engineSpeed INT DEFAULT 300 ;
  DECLARE v_first_vid VARCHAR (256) ;
  DECLARE v_first_time DATETIME ;
  DECLARE v_pre_vid VARCHAR (256) ;
  DECLARE v_pre_time DATETIME ;
  DECLARE v_cur_vid VARCHAR (256) ;
  DECLARE v_cur_time DATETIME ;
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  DECLARE v_cnt INT ;
  DECLARE cur01 CURSOR FOR
  SELECT
    VEHICLEDEVICEID,
    TIME,gpsx,gpsy,score   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  FROM
    tmp01
  ORDER BY VEHICLEDEVICEID,
    TIME ASC ;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found = TRUE ;
  SET @cursor_not_found := FALSE ;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'engine_speed' then para_value else null end) as engine_speed,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='熄火滑行'
  group by dept_id; 
  -- 获取基本数据
  DROP TABLE IF EXISTS tmp_xhhx;
  CREATE TEMPORARY TABLE tmp_xhhx AS 
  SELECT t1.deviceId,t3.engine_speed,t3.score FROM t_vehicleinfo t1
  inner join tmp_stat_config t3 on t1.deptid=t3.dept_id
  WHERE t1.motorType = 1 OR t1.motorType = 4;
  -- 创建临时表，记录燃油车和燃气车的deviceId
  -- 孙天恒2017-04-21修改，根据威帝新提出的计算模型
  
  DROP TABLE IF EXISTS tmp01 ;
  CREATE TEMPORARY TABLE tmp01 AS
  SELECT
    a.VEHICLEDEVICEID,
    a.time,a.gpsx,a.gpsy,t3.score   -- 新增 gps信息  2018年9月20日  by 韩亚璋
  FROM
    t_vehicleanaloginfo a
    INNER JOIN t_vehiclestateinfo1 b
      ON a.time = b.time
      AND a.VEHICLEDEVICEID = b.VEHICLEDEVICEID
	inner join tmp_xhhx t3
      on a.VEHICLEDEVICEID = t3.deviceid
      and a.engine < t3.engine_speed
     -- 只取出燃油车和燃气车的deviceId
     -- 孙天恒2017-04-21修改，根据威帝新提出的计算模型
  WHERE a.time >= p_date
    AND a.time < ADDDATE(p_date, INTERVAL 1 DAY)
    AND b.time >= p_date
    AND b.time < ADDDATE(p_date, INTERVAL 1 DAY)
    AND a.speed > 0
    AND b.ngear = '1' ;
    
  DELETE
  FROM
    stat_driving_violation_detail
  WHERE stat_date = p_date
    AND actiontype = 'coastingWithEngineOff' ;
  OPEN cur01 ;
  FETCH cur01 INTO v_first_vid,
  v_first_time ,v_first_gpsx,v_first_gpsy,v_pre_score;  -- 添加 gps信息  2018年9月20日 by 韩亚璋
  SET v_pre_vid := v_first_vid ;
  SET v_pre_time := v_first_time ;
   -- gps信息添加 2018年9月20日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  label01 :
  WHILE
    NOT @cursor_not_found DO
    FETCH cur01 INTO v_cur_vid,
    v_cur_time ,v_cur_gpsx,v_cur_gpsy,v_cur_score;  -- gps信息添加 2018年9月20日 by 韩亚璋
    IF @cursor_not_found THEN
      -- 此时游标已经取完了，依然再判断一次，否则最后一条数据会被丢掉
      SET v_cur_vid := 'xx' ;
    END IF ;
    -- 判断两条候选是否连续，即中间有无其他记录
    SELECT
      COUNT(1) INTO v_cnt
    FROM
      (SELECT
        1
      FROM
        t_vehicleanaloginfo a
      WHERE a.VEHICLEDEVICEID = v_first_vid
        AND a.time > v_pre_time
        AND a.time < v_cur_time
      LIMIT 1) t ;
    IF v_cur_vid <> v_pre_vid OR v_cnt = 1 THEN
      -- 不是同一辆车或相邻的两个候选不是连续的记录
      -- 该次违规判断结束，重新初始化first
      INSERT INTO stat_driving_violation_detail (
        VehicleDeviceID,
        actiontype,
        actiontypeDesc,
        begin_time,
        end_time,
         gpsx,gpsy, -- gps信息添加 2018年9月20日 by 韩亚璋
        stat_date,
        score
      )
      VALUES
        (
          v_first_vid,
          'coastingWithEngineOff',
          '熄火滑行',
          v_first_time,
          v_pre_time,
          v_first_gpsx,v_first_gpsy,  -- gps信息添加 2018年9月20日 by 韩亚璋
          p_date,
          v_pre_score
        ) ;
      SET v_first_vid := v_cur_vid ;
      SET v_first_time := v_cur_time ;
      -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      SET v_pre_vid := v_first_vid ;
      SET v_pre_time := v_first_time ;
       -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
      set v_pre_score:=v_cur_score;
    -- 是连续的，继续判断
    ELSE -- 算违规，但该次违规判断还未结束，继续判断下一条记录
      SET v_pre_time := v_cur_time ;
       -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
    END IF ;
  END WHILE label01 ;
  CLOSE cur01 ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_YeJianBuKaiDaDeng_ByDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_YeJianBuKaiDaDeng_ByDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_YeJianBuKaiDaDeng_ByDay`(p_date date)
BEGIN
  -- 驾驶行为分析：夜间不开大灯
  -- 算法描述：判断当时GPS时间是否为黑天时间，如果为黑天时间，则判断近光灯或远光灯是否开启
  declare v_pre_score int;
  declare v_cur_score int;
  declare v_night_begintime time;
 
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
    -- 新增 gps信息  2018年9月20日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
  -- declare v_timediff int;
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy,score from tmp01   -- 新增 gps信息  2018年9月20日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
  
  set @cursor_not_found :=false;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='夜间不开大灯'
  group by dept_id; 
  select cast(begin_time as time ) into v_night_begintime from t_daytimesheet 
  where time_sheet='night' and month=month(p_date)
  limit 1;
  
  -- 获取基本数据
  drop table if exists tmp01;
  
  create temporary table tmp01 as
  select VEHICLEDEVICEID,time, gpsx,gpsy,t3.score  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from (
  select a.VEHICLEDEVICEID,a.time, b.gpsx,b.gpsy  -- 新增 gps信息  2018年9月20日  by 韩亚璋
  from t_vehiclestateinfo1 a left join t_vehicleanaloginfo b on a.VEHICLEDEVICEID=b.VEHICLEDEVICEID and a.time=b.time -- 关联gps数据
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and time(a.time)>=v_night_begintime 
  and a.LightFar='0' and a.LightNear='0') t1
  inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid
  inner join tmp_stat_config t3 on t2.deptid=t3.dept_id;
  
 delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='headLightOffAtNight';
  
  open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; -- 添加 gps信息  2018年9月20日 by 韩亚璋
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
 -- gps信息添加 2018年9月20日 by 韩亚璋
   SET v_pre_gpsx:=v_first_gpsx;
  SET v_pre_gpsy:=v_first_gpsy;
  label01:while not @cursor_not_found do
    fetch cur01 into v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_cur_score;-- gps信息添加 2018年9月20日 by 韩亚璋
    if @cursor_not_found then
    -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
      set v_cur_vid:='xx';
	end if;
    -- 判断两条候选是否连续的，即中间有无其他记录 
	select count(1) into v_cnt from
    (select 1 from t_vehiclestateinfo1 a 
	where a.VEHICLEDEVICEID=v_first_vid
	and a.time>v_pre_time and a.time<v_cur_time limit 1) t;
    
    if v_cur_vid<>v_pre_vid or v_cnt=1 then 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score) -- gps信息添加 2018年9月20日 by 韩亚璋
	  values(v_first_vid,'headLightOffAtNight','夜间不开大灯',v_first_time,v_pre_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score); -- gps信息添加 2018年9月20日 by 韩亚璋
	  set v_first_vid:=v_cur_vid;
	  set v_first_time:=v_cur_time;
	   -- 添加 gps信息  2018年9月20日 by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      set v_pre_vid:=v_first_vid;
      set v_pre_time:=v_first_time;  
       -- 新增 gps信息  2018年9月20日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;  
      set v_pre_score:=v_cur_score;
     -- set v_success:='N';
	-- 是连续的，继续判断
	else 
	-- 因为数据关联用的是 left join，所以在此做判断 第一条记录是否为空，是则取下一条记录 
	 SET v_first_gpsx:=  IFNULL(v_first_gpsx,v_cur_gpsx);
         SET v_first_gpsy:=  IFNULL(v_first_gpsy,v_cur_gpsy);
	-- 算违规，但该次违规判断还未结束，继续判断下一条记录  
	
	  set v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月20日  by 韩亚璋
	  set v_pre_gpsx:=v_cur_gpsx;
	  set v_pre_gpsy:=v_cur_gpsy;
	end if;
           
  end while label01;
  
  close cur01;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_YeJianXingShi_ByDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_YeJianXingShi_ByDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_YeJianXingShi_ByDay`(p_date date)
BEGIN
  -- 驾驶行为分析：夜间行驶
  -- 算法描述：判断如果为黑天时间，则车速是否大于1，是则累加单位时间
  declare v_night_begintime time;
  
  -- 获取参数 
  select cast(begin_time as time ) into v_night_begintime from t_daytimesheet 
  where time_sheet='night' and month=month(p_date)
  limit 1;
  
  -- 获取基本数据
  insert into stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,stat_date,score)
  select a.VEHICLEDEVICEID,'driveInNight','夜间行驶',min(a.time) btime,max(a.time) etime,p_date,0
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  and time(a.time)>=v_night_begintime 
  and a.speed>1
  group by a.VEHICLEDEVICEID;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_YiChangKaiCheMen_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_YiChangKaiCheMen_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_YiChangKaiCheMen_byDay`(p_date date)
BEGIN
  -- 驾驶行为分析：在行驶过程中开车门
  -- 算法描述：判断当前车速车速大于5KM/h，且车门开状态
  declare v_speed int ;
  -- declare v_success char(1) default 'N';-- 标记是否为一次违规
  declare v_first_vid varchar (256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar (256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar (256) ;
  declare v_cur_time datetime ;
  declare v_cnt int ;
  -- declare v_timediff int;
  declare cur01 cursor for
  select
    VEHICLEDEVICEID,
    time
  from
    tmp01
  order by VEHICLEDEVICEID,
    time asc ;
  declare continue handler for not found set @cursor_not_found = true ;
  set @cursor_not_found := false ;
  
  -- 按公司获取参数
  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  max(case parameter when 'speed' then para_value else null end) as speed
  from stat_drivingconfig t
  where type_desc='异常开车门'
  group by dept_id; 
  -- 获取基本数据
  drop table if exists tmp01 ;
  create temporary table tmp01 as 
  select 
    a.VEHICLEDEVICEID,
    a.time,
    a.AllDoorShut,
    a.AllDoorOpen,
    b.speed 
  from
    t_vehiclestateinfo1 a 
    inner join t_vehicleanaloginfo b 
      on a.VEHICLEDEVICEID = b.VEHICLEDEVICEID 
      and a.time = b.time 
	inner join t_vehicleinfo t2 on a.VEHICLEDEVICEID=t2.deviceid
    inner join tmp_stat_config t3 on t2.deptid=t3.dept_id
  where a.time >= p_date 
    and a.time < adddate(p_date, interval 1 day) 
    and b.speed > t3.speed 
    and (
      a.alldoorshut = '0' 
      or a.frontdooropen = '1' 
      or a.middledooropen = '1' 
      or a.middledoor2open = '1' 
      or a.reardooropen = '1' 
      or a.leftfrontdooropen = '1' 
      or a.leftmiddledooropen = '1' 
      or a.leftreardooropen = '1' 
      or a.rightfrontdooropen = '1' 
      or a.rightmiddledooropen = '1' 
      or a.rightreardooropen = '1' 
      or a.leftdoorallopen = '1' 
      or a.rightdoorallopen = '1'
    ) ;
  delete
  from
    stat_driving_violation_detail
  where stat_date = p_date
    and actiontype = 'openDoorDuringRunning' ;
  open cur01 ;
  fetch cur01 into v_first_vid,
  v_first_time ;
  set v_pre_vid := v_first_vid ;
  set v_pre_time := v_first_time ;
  label01 :
  while
    not @cursor_not_found do fetch cur01 into v_cur_vid,
    v_cur_time ;
    if @cursor_not_found 
    then -- 这里是个小技巧:此时游标已经取完了,依然再判断一次,否则最后一条数据会被丢掉
    set v_cur_vid := 'xx' ;
    end if ;
    -- 判断两条候选是否连续的，即中间有无其他记录 
    select 
      count(1) into v_cnt 
    from
      (select 
        1 
      from
        t_vehicleanaloginfo a 
      where a.VEHICLEDEVICEID = v_first_vid 
        and a.time > v_pre_time 
        and a.time < v_cur_time 
      limit 1) t ;
    if v_cur_vid <> v_pre_vid 
    or v_cnt = 1 
    then -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
    insert into stat_driving_violation_detail (
      VehicleDeviceID,
      actiontype,
      actiontypeDesc,
      begin_time,
      end_time,
      stat_date,
      score
    ) 
    values
      (
        v_first_vid,
        'openDoorDuringRunning',
        '异常开车门',
        v_first_time,
        v_pre_time,
        p_date,
        0
      ) ;
    set v_first_vid := v_cur_vid ;
    set v_first_time := v_cur_time ;
    set v_pre_vid := v_first_vid ;
    set v_pre_time := v_first_time ;
    -- set v_success:='N';
    -- 是连续的，继续判断
    else -- 算违规，但该次违规判断还未结束，继续判断下一条记录  
    set v_pre_time := v_cur_time ;
    end if ;
  end while label01 ;
  close cur01 ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_YuanDiTiSehgnQiYa_by_Day
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_YuanDiTiSehgnQiYa_by_Day`;
delimiter ;;
CREATE PROCEDURE `p_stat_YuanDiTiSehgnQiYa_by_Day`(p_date date)
BEGIN
    -- 驾驶行为分析 原地提升气压  北京新增  2018年9月23日  by 韩亚璋
      declare v_pre_score int;
  declare v_cur_score int;
  declare v_alarmtype_id int;
  
    declare v_time_interval int;
  declare v_score int;
 DECLARE v_success CHAR(1) DEFAULT 'N';-- 标记是否为一次违规
  
  declare v_first_vid varchar(256) ;
  declare v_first_time datetime ;
  declare v_pre_vid varchar(256) ;
  declare v_pre_time datetime ;
  declare v_cur_vid varchar(256) ;
  declare v_cur_time datetime ;
  
    -- 新增 gps信息  2018年9月23日  by 韩亚璋
 DECLARE v_cur_gpsx VARCHAR(45);
  DECLARE v_cur_gpsy VARCHAR(45);
  DECLARE v_first_gpsx VARCHAR(45);
  DECLARE v_first_gpsy VARCHAR(45);
  DECLARE v_pre_gpsx VARCHAR(45);
  DECLARE v_pre_gpsy VARCHAR(45);
  
  declare v_cnt int;
 declare v_timediff int;
  
  declare  cur01 cursor for select VEHICLEDEVICEID,time,gpsx,gpsy from tmp01   -- 新增 gps信息  2018年9月23日  by 韩亚璋
                  order by VEHICLEDEVICEID,time asc;
  declare continue handler for not found set @cursor_not_found=true;
 
  
  SET @cursor_not_found :=FALSE;
  
  -- 公司参数暂设为固定  因为没设 2018年9月23日 by 韩亚璋
 /*  drop table if exists tmp_stat_config;
  create temporary table tmp_stat_config as
  select dept_id,
  MAX(CASE parameter WHEN 'speed' THEN para_value ELSE NULL END) AS engine_speed,
  max(case parameter when 'engine_speed' then para_value else null end) as engine_speed,
  max(case parameter when 'score' then para_value else null end) as score
  from stat_drivingconfig t
  where type_desc='原地提升气压'
  group by dept_id;
*/  
 drop table if exists tmp01;
  
  create temporary table tmp01 as 
  select t1.VEHICLEDEVICEID,t1.time,t1.gpsx,t1.gpsy,t1.time_interval,t1.score 
  from
      (select vehicledeviceid, time, gpsx,gpsy, v_time_interval as time_interval, v_score as score from t_vehicleanaloginfo where speed=0 and engine>1800 and time > p_date and time <p_date +interval 1 day) t1 
     inner join t_vehicleinfo t2 on t1.VEHICLEDEVICEID=t2.deviceid 
      ;
  delete from stat_driving_violation_detail 
  where stat_date=p_date and actiontype='highengine0speed';
open cur01;
  fetch cur01 into v_first_vid,v_first_time,v_first_gpsx,v_first_gpsy,v_pre_score; 
  set v_pre_vid:=v_first_vid;
  set v_pre_time:=v_first_time;
   -- gps信息添加 2018年9月23日 by 韩亚璋
   set v_pre_gpsx:=v_first_gpsx;
  set v_pre_gpsy:=v_first_gpsy;
  
  
  label01:while not @cursor_not_found do
   FETCH cur01 INTO v_cur_vid,v_cur_time,v_cur_gpsx,v_cur_gpsy,v_time_interval,v_cur_score;    -- 新增 gps信息  2018年9月23日  by 韩亚璋
    IF @cursor_not_found THEN
       LEAVE label01;
	END IF;
    
    SET v_timediff :=TIMESTAMPDIFF(MINUTE,v_first_time,v_cur_time);
    
    -- 判断两条候选是否连续的，即中间有无其他记录 
	SELECT COUNT(1) INTO v_cnt FROM
    (SELECT 1 FROM t_vehicleanaloginfo a 
	WHERE a.VEHICLEDEVICEID=v_first_vid
	AND a.time>v_pre_time AND a.time<v_cur_time LIMIT 1) t;
    
    IF v_cur_vid<>v_pre_vid OR v_cnt=1 THEN 
    -- 不是同一辆车或相邻的两个候选不是连续的记录 
    -- 该次违规判断结束，重新初始化first
	  SET v_first_vid:=v_cur_vid;
	  SET v_first_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月23日  by 韩亚璋
	  SET v_first_gpsx:=v_cur_gpsx;
          SET v_first_gpsy:=v_cur_gpsy;
      SET v_pre_vid:=v_first_vid;
      SET v_pre_time:=v_first_time; 
      -- 新增 gps信息  2018年9月23日  by 韩亚璋 
      SET v_pre_gpsx:=v_first_gpsx;
      SET v_pre_gpsy:=v_first_gpsy;
      SET v_pre_score:=v_cur_score;
      SET v_success:='N';
	-- 是连续的，继续判断
	ELSEIF v_timediff>=v_time_interval AND v_success='N' THEN
    -- 是一次违规 
	  SET v_success :='Y';
	  INSERT INTO stat_driving_violation_detail(VehicleDeviceID,actiontype,actiontypeDesc,
             begin_time,end_time,gpsx,gpsy,stat_date,score)   -- 新增 gps信息  2018年9月23日  by 韩亚璋
		 VALUES(v_first_vid,'highengine0speed','原地提升气压',v_first_time,v_cur_time,v_first_gpsx,v_first_gpsy,p_date,v_pre_score);  -- 新增 gps信息  2018年9月23日  by 韩亚璋
	ELSEIF v_timediff>=v_time_interval AND v_success='Y' THEN
	-- 已经算一次违规了，不能再算，但该次违规判断还未结束，继续判断下一条记录  
	  SET v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月23日  by 韩亚璋
	  SET v_pre_gpsx:=v_cur_gpsx;
	  SET v_pre_gpsy:=v_cur_gpsy;
	ELSE 
	-- 不算违规，但该次违规判断还未结束，继续判断下一条记录  
	  SET v_pre_time:=v_cur_time;
	  -- 新增 gps信息  2018年9月23日  by 韩亚璋
	  SET v_pre_gpsx:=v_cur_gpsx;
	  SET v_pre_gpsy:=v_cur_gpsy;
	END IF;
           
    
  END WHILE label01;
  
  CLOSE cur01;
  
  
  
  
  
  
  
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_stat_YunXingShiChang_byDay
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_stat_YunXingShiChang_byDay`;
delimiter ;;
CREATE PROCEDURE `p_stat_YunXingShiChang_byDay`(p_date date)
BEGIN
  -- 节能分析：运行时长 
  -- 算法描述：发动机是否大于0，累计时间
  -- 2017-04-21 威帝更改为转速或车速大于零，累加时间
  
  delete from stat_energy_saving_detail 
  where stat_date=p_date and type='runTime';
  
  insert into stat_energy_saving_detail(VehicleDeviceID,type,typeDesc,
      begin_time,end_time,stat_date,total_seconds)
  select a.VEHICLEDEVICEID,'runTime','运行时长',
    min(a.time),max(a.time),p_date,count(1)
  from t_vehicleanaloginfo a 
  where a.time>=p_date and a.time<adddate(p_date,interval 1 day)
  AND (a.engine >0 OR a.speed>0) -- 孙天恒
  group by a.VEHICLEDEVICEID;
 
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_driver_analysis_by_timerange
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_driver_analysis_by_timerange`;
delimiter ;;
CREATE PROCEDURE `p_test_driver_analysis_by_timerange`(p_start date,p_end date)
BEGIN
declare v1 date;
declare v_logid int;
set v1:=p_start;
while v1<=p_end do
   -- 记录日志
  insert into maintain_events_log(eventName,startTime,finishTime)
  values('p_driver_analysis_by_day',now(),null);
  select max(id) into v_logid from maintain_events_log;
  call p_driver_analysis_by_day(v1);
  -- 记录日志
  update maintain_events_log set finishTime=now() where id=v_logid;
  
  set v1:=v1+interval 1 day;
end while;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_drop_partitions
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_drop_partitions`;
delimiter ;;
CREATE PROCEDURE `p_test_drop_partitions`(p_tableName varchar(64),p_date date)
BEGIN
  -- 删除表p_tableName的分区，满足分区时间早于 p_date
  declare v_parti_name varchar(64);
  declare done boolean default false;
  declare v_counter int default 0;
  declare c01 cursor for select partition_name from information_schema.partitions a 
      where a.partition_name is not null
      and a.table_schema=database()
      and a.table_name=p_tableName
      and a.partition_description<=unix_timestamp(p_date)
      order by partition_description asc ;
  declare continue handler for not found set done=true;
  
  -- 开启游标
  open c01;
  fetch c01 into v_parti_name;
  
  while not done do
    set @sql:=concat('alter table ',p_tableName,' drop partition ',v_parti_name);
    prepare stm from @sql;
    execute stm;
    deallocate prepare stm; 
    
    set v_counter:=v_counter+1;
    
    fetch c01 into v_parti_name;
  end while;
    
  -- 关闭游标
  close c01;
  
  -- print
  select concat('Dropped ',v_counter,' partitions from table[',p_tableName,']!') msg;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_remove_Duplicate_data_analoginfo
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_remove_Duplicate_data_analoginfo`;
delimiter ;;
CREATE PROCEDURE `p_test_remove_Duplicate_data_analoginfo`(p_startDate date,p_endDate date)
BEGIN
  declare v_day date;
  
  set v_day:=p_startDate;
  
  -- 创建临时表 
  create table t_vehicleanaloginfo_tmp like t_vehicleanaloginfo;
  
  -- 去重，插入临时表
  while v_day<=p_endDate do
    insert into t_vehicleanaloginfo_tmp
    select vehicledeviceid,vehicletypeid,datatypeid,time,speed,engine,
      batteryvoltage,oilpressure,coolanttemper,pressure1,pressure2,pressure3,
      pressure4,enginecompartmenttemper,insidetemper,outsidetemper,residualfuel,
      fullfuel,tyrelayout,tyreposition,tyretemper,tyrepressurehigh,tyrepressurelow,
      shortmileage,mileage,cumulativeenginerevolution,fuelconsumptrate,fueleconomy,
	  totalfueluse,urealevel,longitudedegree,longitudeminute,longitudesecond,
      longitudedecimals,latitudedegree,latitudeminute,latitudesecond,latitudedecimals,
      angleinteger,angledecimals,sim,io,singletotalgasuse,totalgasuse,realtimegasuse,
      averagegasuse,allgasuse,gpsx,gpsy,gpsangle,gpsx1,gpsy1,gpsangle1
    from (
       select t1.*,case when @devid<>t1.vehicledeviceid then @r:=1
		 when @devid=t1.vehicledeviceid and @tim<>t1.time then @r:=1
         else @r:=@r+1 end as r,
         @devid:=t1.vehicledeviceid,@tim:=t1.time
         from (
           select a.* from t_vehicleanaloginfo a
           where time>=v_day and time<v_day+interval 1 day
           order by a.vehicledeviceid,a.time asc) t1
         inner join (select @devid:='',@tim:='',@r:=0) t2 
         )tt
     where r=1 ;
     
	set v_day:=v_day+1;
  end while;
  
  -- 将临时表更名为原表 
  alter table t_vehicleanaloginfo rename to t_vehicleanaloginfo_replicate;
  alter table t_vehicleanaloginfo_tmp rename to t_vehicleanaloginfo;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_remove_Duplicate_data_stat1
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_remove_Duplicate_data_stat1`;
delimiter ;;
CREATE PROCEDURE `p_test_remove_Duplicate_data_stat1`(p_startDate date,p_endDate date)
BEGIN
  declare v_day date;
  
  set v_day:=p_startDate;
  
  -- 创建临时表 
  create table if not exists t_vehiclestateinfo1_tmp like t_vehiclestateinfo1;
  
  -- 去重，插入临时表
  while v_day<=p_endDate do
  insert into t_vehiclestateinfo1_tmp
  select vehicledeviceid,time,frontdooropen,middledooropen,middledoor2open,
  reardooropen,leftfrontdooropen,leftmiddledooropen,leftreardooropen,
  rightfrontdooropen,rightmiddledooropen,rightreardooropen,leftdoorallopen,
  rightdoorallopen,alldooropen,disabledoor,leftdoorallshut,rightdoorallshut,
  alldoorshut,frontdoornotify,middledoornotify,middledoor2notify,reardoornotify,
  leftfrontdoornotify,leftmiddledoornotify,leftreardoornotify,rightfrontdoornotify,
  rightmiddledoornotify,rightreardoornotify,pgear,rgear,ngear,dgear,handbrake,brake,
  abs,ebs,frontdoorbell,middledoorbell,reardoorbell,retardnotify,retardrear1,retardrear2,
  retardrear3,retardrear4,hingestop,hingework,hingebrake,lightfar,lightnear,
  foglightfront,foglightrear,lightsmall,spotlightfront,spotlightmiddle,spotlightmiddle2,
  spotlightrear,spotlightleftfront,spotlightleftmiddle,spotlightleftrear,spotlightrightfront,
  spotlightrightmiddle,spotlightrightrear,leftlamp,rightlamp,turnlampleft,turnlampright,brakelight,
  reverselight,hornelect,hornair,wiperhigh,wiperlow,wipergap1,wipergap2,wipergap3,wipergap4,wiperpower,
  wiper,wiperwheel,clutch,clutchfan,panelhign,panellow,panelpower,panelout,counterpower,vehicletypeid,datatypeid
  from (
    select t1.*,case when @devid<>t1.vehicledeviceid then @r:=1
        when @devid=t1.vehicledeviceid and @tim<>t1.time then @r:=1
        else @r:=@r+1 end as r,
      @devid:=t1.vehicledeviceid,@tim:=t1.time
  from (
     select a.* from t_vehiclestateinfo1 a
     where time>=v_day and time<v_day+interval 1 day
     order by a.vehicledeviceid,a.time asc) t1
  inner join (select @devid:='',@tim:='',@r:=0) t2 )tt
  where r=1 ;
     
	set v_day:=v_day+1;
  end while;
  
  -- 将临时表更名为原表 
  alter table t_vehiclestateinfo1 rename to t_vehiclestateinfo1_replicate;
  alter table t_vehiclestateinfo1_tmp rename to t_vehiclestateinfo1;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_remove_Duplicate_data_stat2
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_remove_Duplicate_data_stat2`;
delimiter ;;
CREATE PROCEDURE `p_test_remove_Duplicate_data_stat2`(p_startDate date,p_endDate date)
BEGIN
  declare v_day date;
  
  set v_day:=p_startDate;
  
  -- 创建临时表 
  create table if not exists t_vehiclestateinfo2_tmp like t_vehiclestateinfo2;
  
  -- 去重，插入临时表
  while v_day<=p_endDate do
  insert into t_vehiclestateinfo2_tmp
  select vehicledeviceid,time,leftcabindoor,rightcabindoor,rearcabindoor,safedoor,enginestop,enginemaintain,enginediagnosis,
    engineawaitstart,enginediagnosisrequest,alternatorcharge,alternatorcharge2,alternatorcharge3,lubricate,asr,retarderoperate,
    bridgelock,wheeldifferential,axisdifferential,conditioncooling,conditionair,conditionclutch,dryernotify,motorpreheat,
    lightguide,lightshoulder,lightreading,lightticketsfront,lightticketsmiddle,lightticketsrear,lightdaytime,lightdriver,
    cruisework,cruiseset,cruiseboost,cruisedrop,cruiserecover,requestservice,requeststop,idlingboost,idlingdrop,ventilatorfrontin,
    ventilatorfrontout,ventilatormiddlein,ventilatormiddleout,ventilatorrearin,ventilatorrearout,defroster1,defroster2,
    rearviewheating,radiator1,radiator2,heater,airsuspensionup,airsuspensiondown,airsuspensionreset,ecasheel,ecasheight,ecasworking,
    lighterpower,driverfan1,driverfan2,curtainup,curtaindown,powerslot,powerwc,powermonitor,powerincarmonitor,powerreceiver,
    powercondition,tvpowerfront,tvpowerrear,tvpackfront,tvpackrear,tvpopupfront,tvpopuprear,vehicletypeid,datatypeid
  from (
    select t1.*,case when @devid<>t1.vehicledeviceid then @r:=1
        when @devid=t1.vehicledeviceid and @tim<>t1.time then @r:=1
        else @r:=@r+1 end as r,
      @devid:=t1.vehicledeviceid,@tim:=t1.time
  from (
     select a.* from t_vehiclestateinfo2 a
     where time>=v_day and time<v_day+interval 1 day
     order by a.vehicledeviceid,a.time asc) t1
  inner join (select @devid:='',@tim:='',@r:=0) t2 )tt
  where r=1 ;
     
	set v_day:=v_day+1;
  end while;
  
  -- 将临时表更名为原表 
  alter table t_vehiclestateinfo2 rename to t_vehiclestateinfo2_replicate;
  alter table t_vehiclestateinfo2_tmp rename to t_vehiclestateinfo2;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_test_remove_Duplicate_data_stat3
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_test_remove_Duplicate_data_stat3`;
delimiter ;;
CREATE PROCEDURE `p_test_remove_Duplicate_data_stat3`(p_startDate date,p_endDate date)
BEGIN
  declare v_day date;
  
  set v_day:=p_startDate;
  
  -- 创建临时表 
  create table if not exists t_vehiclestateinfo3_tmp like t_vehiclestateinfo3;
  
  -- 去重，插入临时表
  while v_day<=p_endDate do
  insert into t_vehiclestateinfo3_tmp
  select vehicledeviceid,time,antipfront,antipmiddle,antipmiddle2,antiprear,antipleftfront,antipleftmiddle,antipleftrear,antiprightfront,
    antiprightmiddle,antiprightrear,reliefrotate,reliefopen,emecapout,emergencyout,emecapin,emergencyin,emecapfi,emergencyfi,emecapfo,
    emergencyfo,emecapmi,emergencymi,emecapmo,emergencymo,emecapm2i,emergencym2i,emecapm2o,emergencym2o,emecapri,emergencyri,emecapro,
    emergencyro,emecaplfi,emergencylfi,emecaplfo,emergencylfo,emecaplmi,emergencylmi,emecaplmo,emergencylmo,emecaplri,emergencylri,
    emecaplro,emergencylro,emecaprfi,emergencyrfi,emecaprfo,emergencyrfo,
    emecaprmi,emergencyrmi,emecaprmo,emergencyrmo,emecaprri,emergencyrri,emecaprro,emergencyrro,absdiagnosisrequest,disabledhelp,
    ptonotify,ptonotifyhigh,ptonotifylow,accelstatus,conditionon,conditionmegpower,conditionidlingboost,contackbuzzer,lightcorridor,
    lightsterilize,lightluggage,lightnight,wheelchairout,wheelchairbelt,safebelt,vehicletypeid,datatypeid,keyacc,keyon,keystart
  from (
    select t1.*,case when @devid<>t1.vehicledeviceid then @r:=1
        when @devid=t1.vehicledeviceid and @tim<>t1.time then @r:=1
        else @r:=@r+1 end as r,
      @devid:=t1.vehicledeviceid,@tim:=t1.time
  from (
     select a.* from t_vehiclestateinfo3 a
     where time>=v_day and time<v_day+interval 1 day
     order by a.vehicledeviceid,a.time asc) t1
  inner join (select @devid:='',@tim:='',@r:=0) t2 )tt
  where r=1 ;
     
	set v_day:=v_day+1;
  end while;
  
  -- 将临时表更名为原表 
  alter table t_vehiclestateinfo3 rename to t_vehiclestateinfo3_replicate;
  alter table t_vehiclestateinfo3_tmp rename to t_vehiclestateinfo3;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_tmp_update_elecconsume
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_tmp_update_elecconsume`;
delimiter ;;
CREATE PROCEDURE `p_tmp_update_elecconsume`()
BEGIN
 DECLARE v_id  BIGINT;
    DECLARE v_cont INT;
    DECLARE v_elecavg INT(11);
    DECLARE v_elecins FLOAT;
    DECLARE v_elechundred FLOAT;
    DECLARE v_electot FLOAT ;
    DECLARE v_elecsum FLOAT;
DECLARE  cur01  CURSOR FOR SELECT id FROM stat_vehicleenergy 
     WHERE  motorType=5 AND stat_date=CURRENT_DATE() - INTERVAL 1 DAY AND vehicleNo LIKE '辽%' ;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  
OPEN cur01;
FETCH cur01 INTO v_id;
SELECT FLOOR(RAND() * 20)+1 INTO v_cont;
WHILE NOT @cursor_not_found DO 
SELECT elecAvg ,elecPerday, elecHundredMiles,elecTotal,elecSumAll INTO v_elecavg,v_elecins,v_elechundred,v_electot,v_elecsum FROM stat_vehicleenergy_elec WHERE id=v_cont;
UPDATE stat_vehicleenergy SET elecAvg=v_elecavg,elecPerDay=v_elecins, elecHundredMiles=v_elechundred, elecTotal=v_electot, elecSumAll=v_elecsum WHERE id=v_id;
FETCH cur01 INTO v_id;
SELECT FLOOR(RAND() * 20)+1 INTO v_cont;
END WHILE;
CLOSE cur01;
UPDATE stat_vehicleenergy SET energyStandard=151 WHERE  motorType=5  AND stat_date=CURRENT_DATE()-INTERVAL 1 DAY AND vehicleNo LIKE '辽%' ;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_tmp_update_gasconsume
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_tmp_update_gasconsume`;
delimiter ;;
CREATE PROCEDURE `p_tmp_update_gasconsume`()
BEGIN
DECLARE v_id  BIGINT;
    DECLARE v_cont INT;
    DECLARE v_gasavg INT(11);
    DECLARE v_gasins FLOAT;
    DECLARE v_gashundred FLOAT;
    DECLARE v_gastot FLOAT ;
    DECLARE v_gassum FLOAT;
DECLARE  cur01  CURSOR FOR SELECT id FROM stat_vehicleenergy 
     WHERE  motorType=5 AND stat_date=CURRENT_DATE() - INTERVAL 1 DAY AND vehicleNo LIKE '辽%' ;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET @cursor_not_found=TRUE;
  SET @cursor_not_found :=FALSE;
  
OPEN cur01;
FETCH cur01 INTO v_id;
SELECT FLOOR(RAND() * 20)+1 INTO v_cont;
WHILE NOT @cursor_not_found DO 
SELECT gasAvg ,gasInstant, gasHundredMiles,gasTotal,gasSumAll INTO v_gasavg,v_gasins,v_gashundred,v_gastot,v_gassum FROM stat_vehicleenergy_gas WHERE id=v_cont;
UPDATE stat_vehicleenergy SET gasAvg=v_gasavg,gasInstant=v_gasins, gasHundredMiles=v_gashundred, gasTotal=v_gastot, gasSumAll=v_gassum WHERE id=v_id;
FETCH cur01 INTO v_id;
SELECT FLOOR(RAND() * 20)+1 INTO v_cont;
END WHILE;
CLOSE cur01;
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_update_dept_level
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_update_dept_level`;
delimiter ;;
CREATE PROCEDURE `p_update_dept_level`(p_deptId int)
BEGIN
   declare v_level int;
   
   -- 找到父级的level 
   select level into v_level 
   from (
     select t2.lft,t2.level
     from mauth_dept t1
     inner join mauth_dept t2
     on t1.lft>t2.lft and t1.rgt<t2.rgt
     where t1.dept_id=p_deptId
     order by t2.lft desc) t1 limit 1;
     
  update mauth_dept set level=v_level+1 where dept_id=p_deptId;
   
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_update_driver_violation
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_update_driver_violation`;
delimiter ;;
CREATE PROCEDURE `p_update_driver_violation`(p_date date)
BEGIN
# 新考勤修改 2019年3月1日 hanyazhang 
  SET sql_safe_updates = 0;
 -- 此处应该 确定 driver_attendance 的维护方式后做 适当修改  
  UPDATE driver_attendance t1 
  INNER JOIN t_vehicleinfo t2 
    ON t1.vehicleno=t2.vehicleno
  SET t1.deviceid=t2.deviceid,t1.lineDeptid=t2.deptid ;
  
  
-- 根据签到表 获取 有 签到和签退时间的 且  车辆最后一次签到的签退时间为null 的车辆驾驶员关系表 ，  用来代替 driver_attendance
  
  DROP TABLE IF EXISTS tmp_driver_attendance1;
  CREATE TEMPORARY TABLE tmp_driver_attendance1 AS
SELECT a.*,b.signInTime AS signOutTime FROM (
  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
  FROM (
  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
  FROM (
    SELECT * FROM driver_attendance 
    ORDER BY vehicleNo ,signInTime ASC)t1 
  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  a
   LEFT JOIN 
   
   (
  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,r
  FROM (
  SELECT t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
    t1.signintime,IF(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) AS r,@vno:=t1.vehicleNo
  FROM (
    SELECT * FROM driver_attendance 
    ORDER BY vehicleNo ,signInTime ASC)t1 
  INNER JOIN (SELECT @r:=0,@vno:='') t2 ON 1=1 )tt )  b ON a.r=b.r-1 AND a.deviceid=b.deviceid ;
 
  
    -- 获取签到表车辆和司机的绑定关系   
  DROP TABLE IF EXISTS tmp_driver_attendance;
  CREATE TEMPORARY TABLE tmp_driver_attendance AS
  -- 此处  signOutTime 可为下次签到的 签到时间  必填
  SELECT vehicleNo,deviceid,drivername,driverid,lineDeptid,signInTime,signOutTime
  FROM tmp_driver_attendance1 WHERE signInTime>=p_date OR signOuttime IS NULL 
   ;
  
  UPDATE stat_driving_violation_detail a 
  INNER JOIN tmp_driver_attendance b 
    ON a.vehicledeviceid=b.deviceid 
    -- and b.signIntime >= a.stat_date
    AND a.begin_time<=IFNULL(b.signOutTime,NOW())  AND a.begin_time>= b.signInTime
    -- 孙天恒2017-04-21修改，解决不规范操作车辆和司机关联不上的bug
  SET a.drivername=b.drivername,a.driverid=b.driverid,a.lineDeptId=b.lineDeptid
  WHERE  a.stat_date = p_date 
   
   ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_update_driver_violation_old
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_update_driver_violation_old`;
delimiter ;;
CREATE PROCEDURE `p_update_driver_violation_old`(p_date date)
BEGIN
  -- heli at 2017/04/25
  -- 关联违规车辆司机 
  set sql_safe_updates = 0;
 
  update driver_attendance t1 
  inner join t_vehicleinfo t2 
    on t1.vehicleno=t2.vehicleno
  set t1.deviceid=t2.deviceid,t1.lineDeptid=t2.deptid ;
  
  -- 获取车辆的最后登录的司机
  drop table if exists tmp_driver_attendance;
  create table tmp_driver_attendance as
  select vehicleNo,deviceid,drivername,driverid,lineDeptid,signintime
  from (
  select t1.vehicleNo,t1.deviceid,t1.drivername,t1.driverid,t1.lineDeptid,
    t1.signintime,if(@vno<>t1.vehicleNo,@r:=1,@r:=@r+1) as r,@vno:=t1.vehicleNo
  from (
    select * from driver_attendance 
    order by vehicleNo ,signInTime desc)t1 
  inner join (select @r:=0,@vno:='') t2 on 1=1 )tt
  where r=1 ;
  
  update stat_driving_violation_detail a 
  inner join tmp_driver_attendance b 
    on a.vehicledeviceid=b.deviceid 
    -- and b.signIntime >= a.stat_date
    and b.signIntime < a.stat_date+interval 1 day
    -- 孙天恒2017-04-21修改，解决不规范操作车辆和司机关联不上的bug
  set a.drivername=b.drivername,a.driverid=b.driverid,a.lineDeptId=b.lineDeptid
  where  a.stat_date >= p_date - interval day(p_date)-1 day
    and a.stat_date < last_day(p_date)+interval 1 day ;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_violation_day_to_month
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_violation_day_to_month`;
delimiter ;;
CREATE PROCEDURE `p_violation_day_to_month`(IN `p_startDate` date)
  COMMENT 'dev4-zhangzhufu根据日汇总故障表整理月汇总数据过程（删除无影响）'
BEGIN
#20190510将api_breakdowns日汇总表数据整理至月汇总数据	（单次使用，停用，删除对程序无影响）
#zhangzhufu -2019年5月10日 17:42:10
#2017-03    -----   2018-10

#为防止意外，将这两行注释
-- DELETE FROM api_breakdowns_month WHERE stat_date=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY;
-- INSERT INTO api_breakdowns_month(deptId,vehicleNo,stat_date,alarmtypename,total,alarmLevel)
SELECT deptId,vehicleNo,p_startDate - INTERVAL (DAY(p_startDate)-1) DAY,
alarmtypename, SUM(total),alarmLevel
 FROM api_breakdowns
WHERE stat_date>=p_startDate - INTERVAL (DAY(p_startDate)-1) DAY
AND stat_date<p_startDate - INTERVAL (DAY(p_startDate)-1) DAY + INTERVAL 1 MONTH 
GROUP BY deptId,vehicleNo,alarmtypename,alarmLevel ; 







END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_zzf_countData
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_zzf_countData`;
delimiter ;;
CREATE PROCEDURE `p_zzf_countData`()
BEGIN
	#7分钟65条
	/*
	zhangzhufu生成统计数据
	2019年1月29日 12:19:27
	*/
	declare d_vehicledeviceid VARCHAR(256) ;
	declare d_time timestamp DEFAULT '0000-00-00 00:00:00';  
	declare d_state1_time timestamp   DEFAULT '0000-00-00 00:00:00';  
	declare d_state2_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare d_state3_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare d_ele1_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare d_ele2_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare d_elestate_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare d_finaly_time timestamp   DEFAULT '0000-00-00 00:00:00';			
	declare d_count INT(5);
	#插入表数据
	declare f_time timestamp DEFAULT '0000-00-00 00:00:00';  
	declare f_state1_time timestamp   DEFAULT '0000-00-00 00:00:00';  
	declare f_state2_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare f_state3_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare f_ele1_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare f_ele2_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare f_elestate_time timestamp   DEFAULT '0000-00-00 00:00:00';
	declare f_finaly_time timestamp   DEFAULT '0000-00-00 00:00:00';
	#游标
  DECLARE done INT DEFAULT FALSE;
  declare  devAndTime cursor for SELECT device_id,analog_time,state1_time,state2_time,state3_time,ele_analog1_time,ele_analog2_time,ele_state_time 
	FROM t_car_data_tmp_for_test WHERE create_time >= '2019-01-26 00:00:00' AND create_time < '2019-01-26 01:00:00' order by device_id,create_time asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	#清空统计表
	TRUNCATE TABLE t_car_data_tmp_for_count;
  open devAndTime;
    -- 遍历
    read_loop: LOOP
            -- 取值 取多个字段
            FETCH  NEXT from devAndTime INTO d_vehicledeviceid,d_time,d_state1_time,d_state2_time,d_state3_time,d_ele1_time,d_ele2_time,d_elestate_time;
            IF done THEN
                LEAVE read_loop;
             END IF;
 
							#确定最终数据时间
							IF d_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_time;
							ELSEIF d_state1_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_state1_time;
							ELSEIF d_state2_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_state2_time;
							ELSEIF d_state3_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_state3_time;
							ELSEIF d_ele1_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_ele1_time;
							ELSEIF d_ele2_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_ele2_time;
							ELSEIF d_elestate_time <> '0000-00-00 00:00:00' THEN
								SET d_finaly_time = d_elestate_time;
							END IF;
							#循环逻辑
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_vehicleanaloginfo WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_time = '0000-00-00 00:00:00';
							ELSE
									SET f_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_vehiclestateinfo1 WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_state1_time = '0000-00-00 00:00:00';
							ELSE
									SET f_state1_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_vehiclestateinfo2 WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_state2_time = '0000-00-00 00:00:00';
							ELSE
									SET f_state2_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_vehiclestateinfo3 WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_state3_time = '0000-00-00 00:00:00';
							ELSE
									SET f_state3_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_electricvehicleana WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_ele1_time = '0000-00-00 00:00:00';
							ELSE
									SET f_ele1_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_electricvehicleana2 WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_ele2_time = '0000-00-00 00:00:00';
							ELSE
									SET f_ele2_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							SELECT COUNT(*) INTO d_count FROM t_electricvehiclestateinfo WHERE vehicledeviceid = d_vehicledeviceid AND time = d_finaly_time;
							IF d_count = 0 THEN
									SET f_elestate_time = '0000-00-00 00:00:00';
							ELSE
									SET f_elestate_time = d_finaly_time;
							END IF;
							SET d_count = 0;
							#------------------------------------------
							#保存逆向原始信息，与t_car_data_tmp_for_test对比
							INSERT INTO t_car_data_tmp_for_count (device_id,analog_time,state1_time,state2_time,state3_time,ele_analog1_time,ele_analog2_time,ele_state_time)
							VALUES(d_vehicledeviceid,f_time,f_state1_time,f_state2_time,f_state3_time,f_ele1_time,f_ele2_time,f_elestate_time);
    END LOOP;
    CLOSE devAndTime;
END
;;
delimiter ;

-- ----------------------------
-- Function structure for reduceDiscou
-- ----------------------------
DROP FUNCTION IF EXISTS `reduceDiscou`;
delimiter ;;
CREATE FUNCTION `reduceDiscou`(`lng1` double,`lat1` double,`lng2` double,`lat2` double)
 RETURNS double
BEGIN
	#参数说明：`lng1` double gpsx经度,`lat1` double gpsy纬度,`lng2` double gpsx经度,`lat2` double gpsy纬度
	#地球半径 6378.137
	RETURN round(
		6378.137 * 2 * asin(
			sqrt(
				pow(
					sin(
						(
							lat1 * pi() / 180 - lat2 * pi() / 180
						) / 2
					),
					2
				) + cos(lat1 * pi() / 180) * cos(lat2 * pi() / 180) * pow(
					sin(
						(
							lng1 * pi() / 180 - lng2 * pi() / 180
						) / 2
					),
					2
				)
			)
		) * 1000
	);
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for show_table_rows
-- ----------------------------
DROP PROCEDURE IF EXISTS `show_table_rows`;
delimiter ;;
CREATE PROCEDURE `show_table_rows`()
BEGIN
    declare v_tabname varchar(60);
    declare done boolean default false;
    declare cur1 cursor for select table_name from information_schema.TABLES a 
           where a.table_schema=database() and table_type='BASE TABLE';
    declare continue handler for not found set done=true;
    
    -- 打开游标 
    open cur1;
    fetch cur1 into v_tabname;
    
	-- 创建临时表 
    drop table if exists tmp_tab_rows;
    create temporary table tmp_tab_rows(table_name varchar(60) primary key,rownums int);
    
    while not done do
      set @sql:=concat('select count(1) into @rows from ',v_tabname);
      prepare stm from @sql;
      execute stm;
      insert into tmp_tab_rows values(v_tabname,@rows);
      
      fetch cur1 into v_tabname;
	end while;
    
    deallocate prepare stm;
    close cur1;
    
    -- 输出结果
	select table_name,rownums,'order by table_name asc' msg from tmp_tab_rows where table_name<>'tmp_tab_rows' order by 1 asc;
	select table_name,rownums,'order by rownums desc' msg from tmp_tab_rows where table_name<>'tmp_tab_rows' order by 2 desc;
    select table_name,rownums,'order by table_name asc' msg from tmp_tab_rows where table_name<>'tmp_tab_rows' and rownums=0 order by 1 asc;  
    
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for syn_mauth_data
-- ----------------------------
DROP PROCEDURE IF EXISTS `syn_mauth_data`;
delimiter ;;
CREATE PROCEDURE `syn_mauth_data`()
BEGIN
	DELETE
FROM
	t_mauth_dept;
INSERT INTO t_mauth_dept (
	companyName,
	companyDeptId,
	subCompanyName,
	subCompanyDeptId,
	groupName,
	groupDeptId,
	lineName,
	lineDeptId
) SELECT
	companyName,
	companyDeptId,
	subCompanyName,
	subCompanyDeptId,
	groupName,
	groupDeptId,
	lineName,
	lineDeptId
FROM
	v_mauth;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for test
-- ----------------------------
DROP PROCEDURE IF EXISTS `test`;
delimiter ;;
CREATE PROCEDURE `test`()
begin
    declare v_1 int;
    declare v_2 int;
    create temporary table t_1 like t_vehicleinfo;



   insert into t_1 select * from t_vehicleinfo;
   select count(1)  from t_vehicleinfo into v_1;
   select count(1)  from t_1 into v_2;
   select v_1,v_2;
   drop table t_1;
  end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for unfinishedalarm_auto_finished
-- ----------------------------
DROP PROCEDURE IF EXISTS `unfinishedalarm_auto_finished`;
delimiter ;;
CREATE PROCEDURE `unfinishedalarm_auto_finished`(IN p_date date)
BEGIN
DECLARE v_logid INT;
INSERT INTO maintain_events_log(eventName,startTime,finishTime) VALUES('unfinishedalarm_auto_finished',NOW(),NULL);
SELECT MAX(id) INTO v_logid FROM maintain_events_log WHERE eventName='unfinishedalarm_auto_finished';
-- 创建临时表m为删除未结束报警做准备
DROP TABLE IF EXISTS m;
CREATE TEMPORARY TABLE m
SELECT a.id FROM (
      SELECT * FROM t_alarmsummary_unfinished WHERE alarmstarttime<p_date AND lastalarmtime<p_date)a 
      INNER JOIN (
      SELECT * FROM(
           SELECT deviceid,vehicleno,DATE_FORMAT(FROM_UNIXTIME(lastdatauptime),'%Y-%m-%d %H:%i:%s')AS lastdatauptime FROM t_vehicleinfo )tmp WHERE lastdatauptime>=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00'))b ON a.deviceid=b.deviceid;
-- 创建临时表n为汇总结束报警做准备
DROP TABLE IF EXISTS n;
CREATE TEMPORARY TABLE n           
SELECT a.vehicleNo,a.deviceId,a.driverName,a.alarmType,a.TYPE,a.parenttype,a.alarmstarttime,a.duration,a.alarmlocation,a.motorType,NOW()AS dismissTime,a.alarmLevel,a.statTime,a.gx,a.gy,a.lastAlarmTime,
       a.alarmtypeid,a.alarmFlag,a.companyName,a.companyDeptId,a.subCompanyName,a.subCompanyDeptId,a.groupName,a.groupDeptId,a.lineName,a.lineDeptId,a.finished,"2"AS releaseState, CONCAT("(",a.duration,"--0),")AS intervalTime
FROM (
      SELECT * FROM t_alarmsummary_unfinished WHERE alarmstarttime<p_date AND lastalarmtime<p_date)a 
      INNER JOIN (
      SELECT * FROM(
           SELECT deviceid,vehicleno,DATE_FORMAT(FROM_UNIXTIME(lastdatauptime),'%Y-%m-%d %H:%i:%s')AS lastdatauptime FROM t_vehicleinfo )tmp WHERE lastdatauptime>=DATE_FORMAT(p_date,'%Y-%m-%d 00:00:00'))b ON a.deviceid=b.deviceid;
 
 -- 将自动结束报警汇入报警表  
 insert into t_alarmsummary select * from n;
 
 -- 将已经结束的报警从持续表中删除
 delete from t_alarmsummary_unfinished where id in (select * from m);                  
    
-- 更新日志
UPDATE maintain_events_log SET finishTime=NOW() WHERE id=v_logid;
    
           
    END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for update_vehicleinfo_update_time
-- ----------------------------
DROP PROCEDURE IF EXISTS `update_vehicleinfo_update_time`;
delimiter ;;
CREATE PROCEDURE `update_vehicleinfo_update_time`()
BEGIN
    DECLARE v_count INT DEFAULT 0;
    DECLARE v_id INT DEFAULT 0;
    SELECT count(*)  FROM t_vehicleinfo_updated_stamp  INTO v_count;
    IF (v_count = 0) THEN
        INSERT  t_vehicleinfo_updated_stamp (last_update_time) VALUES (CURRENT_TIMESTAMP());
    ELSE
        SELECT id FROM t_vehicleinfo_updated_stamp ORDER BY  last_update_time DESC limit 1 INTO v_id;
        DELETE FROM t_vehicleinfo_updated_stamp  WHERE id != v_id;
        UPDATE t_vehicleinfo_updated_stamp set last_update_time = current_timestamp() WHERE id = v_id;
    END IF ;
END
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_addPartition_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_addPartition_day`;
delimiter ;;
CREATE EVENT `ev_addPartition_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-06-01 20:00:00'
ON COMPLETION PRESERVE
DO call p_manage_all_day_partition_tables()
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_alarm_stat_min
-- ----------------------------
DROP EVENT IF EXISTS `ev_alarm_stat_min`;
delimiter ;;
CREATE EVENT `ev_alarm_stat_min`
ON SCHEDULE
EVERY '1' MINUTE STARTS '2017-09-27 19:00:00'
ON COMPLETION PRESERVE
DISABLE
DO call p_stat_alarminfo_min(now()-interval 5 minute,now())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_breakdowns
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_breakdowns`;
delimiter ;;
CREATE EVENT `ev_api_breakdowns`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-10-18 04:00:00'
ON COMPLETION PRESERVE
DO CALL p_api_breakdowns(CURRENT_DATE()-INTERVAL 1 DAY,CURRENT_DATE())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_breakdowns_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_breakdowns_day`;
delimiter ;;
CREATE EVENT `ev_api_breakdowns_day`
ON SCHEDULE
EVERY '1' HOUR STARTS '2019-10-18 04:00:00'
ON COMPLETION PRESERVE
DO call p_api_breakdowns_day(current_date())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_data_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_data_day`;
delimiter ;;
CREATE EVENT `ev_api_data_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2017-01-21 00:05:00'
ON COMPLETION PRESERVE
DISABLE
DO call p_get_api_data(current_date()-interval 1 day)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_energe
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_energe`;
delimiter ;;
CREATE EVENT `ev_api_energe`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-10-17 04:00:00'
ON COMPLETION PRESERVE
DO call p_api_energe(current_date()-interval 1 day,current_date())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_site_stat_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_site_stat_day`;
delimiter ;;
CREATE EVENT `ev_api_site_stat_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2017-03-28 04:10:00'
ON COMPLETION PRESERVE
DO CALL p_api_site_getbasedata(current_date()-interval 1 day,current_date())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_stat_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_stat_day`;
delimiter ;;
CREATE EVENT `ev_api_stat_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2017-03-28 04:00:00'
ON COMPLETION PRESERVE
DO call p_api_getbasedata(current_date()-interval 1 day,current_date())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_api_violation
-- ----------------------------
DROP EVENT IF EXISTS `ev_api_violation`;
delimiter ;;
CREATE EVENT `ev_api_violation`
ON SCHEDULE
EVERY '1' DAY STARTS '2017-03-28 06:00:00'
ON COMPLETION PRESERVE
DO call p_api_violation(current_date()-interval 1 day,current_date())
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_del_terminal_log_periodic
-- ----------------------------
DROP EVENT IF EXISTS `ev_del_terminal_log_periodic`;
delimiter ;;
CREATE EVENT `ev_del_terminal_log_periodic`
ON SCHEDULE
EVERY '10' DAY STARTS '2020-03-01 00:00:00'
ON COMPLETION PRESERVE
DO call p_del_terminal_log()
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_driverAnanlysis_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_driverAnanlysis_day`;
delimiter ;;
CREATE EVENT `ev_driverAnanlysis_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-08-01 06:30:00'
ON COMPLETION PRESERVE
DISABLE
DO CALL p_driver_analysis_by_day(CURRENT_DATE()-INTERVAL 1 DAY)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_driverAnanlysis_day_sum
-- ----------------------------
DROP EVENT IF EXISTS `ev_driverAnanlysis_day_sum`;
delimiter ;;
CREATE EVENT `ev_driverAnanlysis_day_sum`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-08-01 05:30:00'
ON COMPLETION PRESERVE
DO CALL p_driver_analysis_by_day_sum(CURRENT_DATE()-INTERVAL 1 DAY)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_driver_analyse_count_by_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_driver_analyse_count_by_day`;
delimiter ;;
CREATE EVENT `ev_driver_analyse_count_by_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-04-04 05:00:00'
ON COMPLETION PRESERVE
DO CALL p_driver_analyse_count_by_day(CURRENT_DATE()-INTERVAL 1 DAY)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_energySavingAnalyse_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_energySavingAnalyse_day`;
delimiter ;;
CREATE EVENT `ev_energySavingAnalyse_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-09-28 01:00:00'
ON COMPLETION PRESERVE
DO call p_stat_energy_saving_byDay(current_date()-interval 1 day)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_optimize_table
-- ----------------------------
DROP EVENT IF EXISTS `ev_optimize_table`;
delimiter ;;
CREATE EVENT `ev_optimize_table`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-10-17 23:00:00'
ON COMPLETION PRESERVE
DO call p_optimize_table()
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_optimize_t_alarmsummary_unfinished
-- ----------------------------
DROP EVENT IF EXISTS `ev_optimize_t_alarmsummary_unfinished`;
delimiter ;;
CREATE EVENT `ev_optimize_t_alarmsummary_unfinished`
ON SCHEDULE
EVERY '1' HOUR STARTS '2019-10-17 12:00:00'
ON COMPLETION PRESERVE
DO call p_optimize_t_alarmsummary_unfinished()
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_stat_battery_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_stat_battery_day`;
delimiter ;;
CREATE EVENT `ev_stat_battery_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-12-12 02:15:00'
ON COMPLETION PRESERVE
DO call p_stat_battery_voltandtemp(current_date()- interval 1 day )
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_stat_energy_compare_hour
-- ----------------------------
DROP EVENT IF EXISTS `ev_stat_energy_compare_hour`;
delimiter ;;
CREATE EVENT `ev_stat_energy_compare_hour`
ON SCHEDULE
EVERY '1' HOUR STARTS '2017-01-19 00:01:00'
ON COMPLETION PRESERVE
DO CALL p_stat_energy_compare(null, null, null, null )
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_stat_energy_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_stat_energy_day`;
delimiter ;;
CREATE EVENT `ev_stat_energy_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-12-12 02:00:00'
ON COMPLETION PRESERVE
DO call p_stat_energy(current_date()- interval 1 day)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_stat_miles
-- ----------------------------
DROP EVENT IF EXISTS `ev_stat_miles`;
delimiter ;;
CREATE EVENT `ev_stat_miles`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-08-01 01:30:00'
ON COMPLETION PRESERVE
DO BEGIN
	    call p_stat_miles(current_date - interval 1 day);
	END
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_stat_vehicletotalinfo_day
-- ----------------------------
DROP EVENT IF EXISTS `ev_stat_vehicletotalinfo_day`;
delimiter ;;
CREATE EVENT `ev_stat_vehicletotalinfo_day`
ON SCHEDULE
EVERY '1' DAY STARTS '2016-10-11 02:00:00'
ON COMPLETION PRESERVE
DO call p_stat_vehicle_totalinfo_byday(curdate()-interval 1 day,curdate()-interval 1 day)
;;
delimiter ;

-- ----------------------------
-- Event structure for ev_vechile_status_min
-- ----------------------------
DROP EVENT IF EXISTS `ev_vechile_status_min`;
delimiter ;;
CREATE EVENT `ev_vechile_status_min`
ON SCHEDULE
EVERY '1' MINUTE STARTS '2016-10-22 10:00:00'
ON COMPLETION PRESERVE
DO call p_get_vehicle_status()
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table mauth_role
-- ----------------------------
DROP TRIGGER IF EXISTS `update_data_push`;
delimiter ;;
CREATE TRIGGER `update_data_push` BEFORE UPDATE ON `mauth_role` FOR EACH ROW BEGIN
update t_fault_push set fushDeptId=new.dept_id where user_id=old.role_id;
END
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table t_alarmsummary_unfinished_copy
-- ----------------------------
DROP TRIGGER IF EXISTS `tri_test_alarm_1`;
delimiter ;;
CREATE TRIGGER `tri_test_alarm_1` AFTER DELETE ON `t_alarmsummary_unfinished_copy` FOR EACH ROW begin
insert into api_alarm_test values(old.id,old.vehicleNo,old.driverName,old.alarmstarttime,old.duration,old.motorType,old.alarmtypeid,old.alarmFlag);
end
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table t_vehicleinfo
-- ----------------------------
DROP TRIGGER IF EXISTS `t_vehicleinfo_after_insert`;
delimiter ;;
CREATE TRIGGER `t_vehicleinfo_after_insert` AFTER INSERT ON `t_vehicleinfo` FOR EACH ROW BEGIN
    call update_vehicleinfo_update_time();
  END
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table t_vehicleinfo
-- ----------------------------
DROP TRIGGER IF EXISTS `t_vehicleinfo_after_update`;
delimiter ;;
CREATE TRIGGER `t_vehicleinfo_after_update` AFTER UPDATE ON `t_vehicleinfo` FOR EACH ROW BEGIN
    IF (OLD.deviceId != NEW.deviceId OR OLD.deptId != NEW.deptId) THEN
          CALL update_vehicleinfo_update_time();
    END IF;
    
    IF (OLD.deviceId != NEW.deviceId ) THEN
         UPDATE terminal_app SET device_id =NEW.deviceId WHERE device_id = OLD.deviceId;
    END IF;
  END
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table t_wechat_map
-- ----------------------------
DROP TRIGGER IF EXISTS `insert_beijing`;
delimiter ;;
CREATE TRIGGER `insert_beijing` BEFORE INSERT ON `t_wechat_map` FOR EACH ROW begin
insert into bj_cz_production.t_wechat_map values (new.openId,new.iphone);
end
;;
delimiter ;

SET FOREIGN_KEY_CHECKS = 1;
